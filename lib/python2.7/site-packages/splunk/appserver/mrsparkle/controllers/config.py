import cherrypy, json, time, logging
from splunk.appserver.mrsparkle import *
from splunk.appserver.mrsparkle.lib import i18n, times, cached, util
import splunk.entity as en


logger = logging.getLogger('splunk.appserver.controllers.config')

class ConfigController(BaseController):
    """/config"""

    #
    # helper methods
    #
    
    def _get_active_config(self):
        return {
            'SEARCH_RESULTS_TIME_FORMAT': i18n.ISO8609_MICROTIME,
            'DISPATCH_TIME_FORMAT': cherrypy.config.get('DISPATCH_TIME_FORMAT'),
            'MRSPARKLE_ROOT_PATH': cherrypy.request.script_name,
            'MRSPARKLE_PORT_NUMBER': cherrypy.config.get('server.socket_port'),
            'VERSION_LABEL': cherrypy.config.get('version_label', 'UNKNOWN_VERSION'),
            'BUILD_NUMBER': cherrypy.config.get('build_number', 0),
            'BUILD_PUSH_NUMBER': cherrypy.config.get('_push_version', 0),
            'LOCALE': i18n.current_lang_url_component(),
            'FLASH_MAJOR_VERSION': cherrypy.config.get('flash_major_version', 0),
            'FLASH_MINOR_VERSION': cherrypy.config.get('flash_minor_version', 0),
            'FLASH_REVISION_VERSION': cherrypy.config.get('flash_revision_version', 0),
            "JS_LOGGER_MODE": cherrypy.config.get('js_logger_mode', 0),
            "JS_LOGGER_MODE_SERVER_END_POINT": cherrypy.config.get('js_logger_mode_server_end_point', '/'),
            "JS_LOGGER_MODE_SERVER_POLL_BUFFER": cherrypy.config.get('js_logger_mode_server_poll_buffer', 100000),
            "JS_LOGGER_MODE_SERVER_MAX_BUFFER": cherrypy.config.get('js_logger_mode_server_max_buffer', 1000),
            'NOCACHE' : cherrypy.config.get('js_no_cache', False),
            'UI_UNIX_START_TIME': int(cherrypy.config.get('start_time', 0)),
            'DEFAULT_NAMESPACE': splunk.getDefault('namespace'),
            'SYSTEM_NAMESPACE': SYSTEM_NAMESPACE,
            'UI_INACTIVITY_TIMEOUT': self.getCherrypyConfigIntSafe('ui_inactivity_timeout', 60),
            'SERVER_TIMEZONE_OFFSET': self.getServerTimezoneOffset(),
            'SERVER_ZONEINFO': self.getServerZoneInfo(),
            'SPLUNKD_FREE_LICENSE': cherrypy.config.get('is_free_license'),
            'FORM_KEY': util.getFormKey(),
            'USERNAME': cherrypy.session.get('user', {}).get('name'),
            'JSCHART_TEST_MODE': cherrypy.config.get('jschart_test_mode', False)
        }

    def _get_active_unauthorized_config(self):
        return {
            'MRSPARKLE_PORT_NUMBER': cherrypy.config.get('server.socket_port'),
            'UI_INACTIVITY_TIMEOUT': self.getCherrypyConfigIntSafe('ui_inactivity_timeout', 60),
            'FORM_KEY': util.getFormKey()
        }

    def _get_app_config(self, app):
        try:
            rawConfig = splunk.bundle.getConf('app', namespace=app)
        except splunk.ResourceNotFound:
            return {}
        return {
            'APP_BUILD': rawConfig['install'].get('build', 0)
        }

    def getCherrypyConfigIntSafe(self, key, default):
        """returns int value under the key in cherrypy.config; if it's not an integer, returns default value"""
        try:
            i = int(cherrypy.config.get(key, default))
            return (i<0)*0 + (i>0)*i
        except ValueError:
            logger.warn('%s key is not integer, assuming default value %s', key, default)
            return default
        
    def getServerTimezoneOffset(self) :
        """  returns the offset from GMT in seconds  """
        # Somewhat shockingly, this clunky if/else is the official way to get the actual timezone offset, 
        # ie a offset int that is accurate in both DST and non-DST times.
        if (time.localtime()[-1] == 1): 
            return time.altzone
        else:
            return time.timezone

    @cached.memoized(cache_age=30)
    def getServerZoneInfo(self):
        '''
        Returns server's zoneinfo table.  Memoized.
        '''
        try:
            return times.getServerZoneinfo()
        except Exception, e:
            logger.exception(e)
            return ''



    #
    # exposed controllers
    #

    @route('/')
    @expose_page(must_login=False, methods='GET')
    @set_cache_level('never')
    def index(self, autoload=False, namespace=None, asDict=False):
        '''
        Returns the configuration information for the main Splunk frontend.
        The values returned from the endpoint are subject to the following:
        
        1) values are idempotent
        2) any time values are in ISO-8601 format
        3) values are typed appropriately
        
        On the JS side, these values are all inserted into a config
        dictionary that is accessible at:
        
            window.$C[<key_name>]
            
        These values should be treated as read-only.
        
        TODO: attach event handlers to value changes on JS side
        
        '''
        
        cherrypy.response.headers['content-type'] = MIME_JSON

        # unauthed calls get the bare minimum
        if not cherrypy.session.get('sessionKey'):
            args = self._get_active_unauthorized_config()
        else:
            args = self._get_active_config()

        if namespace:
            args.update(self._get_app_config(namespace))

        # for debug page
        if asDict:
            return args
            
            
        if autoload:
            output = 'window.$C = %s' % json.dumps(args)
        else:
            output = json.dumps(args)


        if util.apply_etag(output):
            return None
        else:
            logger.debug('config values: %s' % args)
            return output


    @route('/:var')
    @expose_page(methods='GET')
    def getvar(self, var, **kw):
        cfg = self._get_active_config()
        if not cfg.has_key(var):
            raise cherrypy.NotFound()
        return str(cfg[var])


    @expose_page(must_login=False, methods='GET', handle_api=True)
    def UI_UNIX_START_TIME(self, **kw):
        """/config/UI_UNIX_START_TIME is required without auth by the server restart command"""
        start_time = round(cherrypy.config.get('start_time', 0))
        if cherrypy.request.is_api:
            data = {'start_time': start_time}
            return self.render_json(data)
        else:
            cherrypy.response.headers['content-type'] = 'text/plain'
            return start_time
    
    @expose_page(must_login=False, methods='GET')
    def img(self, **kw):
        """
        Used by the javascript restart handler to determine when the server is back
        up when the protocol has changed
        """
        if 'proto' in kw:
            # IE8 will actually send an http request down its already open https pipe
            # if it can; test to make sure we're actually in the mode it thinks we are
            if kw['proto'] != cherrypy.request.scheme:
                raise cherrypy.HTTPError(400)
        img = file(os.path.join(cherrypy.config['staticdir'], 'img/skins/default/a.gif')).read()
        cherrypy.response.headers['content-type'] = 'image/gif'
        return img


    @expose_page(must_login=False, verify_sso=False, methods='GET')
    def version(self, **kw):
        return "Splunk;%s;%s" % (cherrypy.config.get('version_number', '4'), cherrypy.config.get('version_label', 'unknown'))

