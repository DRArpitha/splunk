
try{i18n_register({"catalog":{"+-getParam: Splunk cannot get param; null key name passed":"getParam: Splunk cannot get param; null key name passed"},"plural":function(n){return n==1?0:1;}});
Splunk.Module=$.klass({
CURRENT_VIEWSTATE_KEY:'_current',
HIDDEN_MODULE_KEY:'hidden module',
_childModulesHaveFreshContexts:true,
_state:Splunk.util.moduleLoadStates["WAITING_FOR_INITIALIZATION"],
initialize:function(container){
this.logger=Splunk.Logger.getLogger("AbstractModule.js");
if(this.parent||this.container||this._children){
this.logger.error(this.moduleType,".initialize - Assertion Failed. Modules may not be reinitialized.");}
this.container=$(container);
this.resultsContainer=$('<div/>').appendTo(this.container);
this.parent=null;
this._children=[];
this.childEnforcement=0;
this.parentEnforcement=0;
this.baseContext=null;
this._paramsToUseAsSettings=[];
this._lastSuccessfulDispatchedContext=null;
this._previousResultParams=null;
this.moduleId=this.container.attr('id');
this._invisibilityModes={};
this.importParams();
this.getResultsRetryCounter=0;
this.getResultsRetryPolicy=3;
this.getResultsXHRObject=null;
this.pushContextWhenReady=false;
$(document).bind('viewDataChange',this.onViewDataChange.bind(this));
$(document).bind('moduleLoadStatusChange',function(event,module,statusInt){
if(module.moduleId==this.moduleId){
this.onLoadStatusChange(statusInt);}}.bind(this));},
getLoadState:function(){
return this._state;},
setLoadState:function(statusInt,suppressEvent){
var oldState=this._state;
if(oldState!=statusInt){
this._state=statusInt;
if(!suppressEvent){
$(document).trigger('moduleLoadStatusChange',[this,statusInt]);}}},
markPageLoadComplete:function(){
this._pageLoadComplete=true;},
isPageLoadComplete:function(){
return this._pageLoadComplete||false;},
requiresAsynchronousLoading:function(){return false;},
onLoadStatusChange:function(statusInt){
if(!this._hierarchyValidated&&(statusInt>=Splunk.util.moduleLoadStates.WAITING_FOR_CONTEXT)){
this.validateHierarchy();}},
mergeLoadParamsIntoContext:function(namespace,paramNames){
for(var i=0;i<paramNames.length;i++){
var pair={namespace:namespace,param:paramNames[i]};
this._paramsToUseAsSettings.push(pair);}},
requiresDispatch:function(search){return false;},
onContextChange:function(){},
_fireDispatch:function(search){
if(!search){
this.logger.error("Assertion failed.  required arg 'search' not passed to ",this.moduleType,"._fireDispatch");
return;}
if(this.dispatchAlreadyInProgress){
return false;}else{
this.dispatchAlreadyInProgress=true;
var USE_AUTOMATIC_STRING_REPLACEMENT=false;
if(USE_AUTOMATIC_STRING_REPLACEMENT){
var context=this.getContext();
var baseSearch=search.toString();
var tokens=Splunk.util.discoverReplacementTokens(baseSearch);
for(var i=0;i<tokens.length;i++){
var replacer=new RegExp("\\$"+tokens[i]+"\\$");
baseSearch=Splunk.util.replaceTokens(baseSearch,replacer,context.get(tokens[i]));
search.setBaseSearch(baseSearch);}}
search.dispatchJob(this._fireDispatchSuccessHandler.bind(this),this._fireDispatchFailHandler.bind(this),this.getGroupName());}},
_removeLastSearch:function(){
var lastSearch=this._lastSuccessfulDispatchedSearch;
if(lastSearch&&lastSearch.isJobDispatched()&&!lastSearch.job.canBeAutoCancelled()){
Splunk.Globals['Jobber'].removeJob(lastSearch.job.getSearchId());}else if(lastSearch&&lastSearch.isJobDispatched()&&lastSearch.job.canBeAutoCancelled()){
lastSearch.job.cancel();}},
_fireDispatchSuccessHandler:function(dispatchedSearch){
this.logger.debug("success - context dispatched for search=",dispatchedSearch.toString());
var context=this.getModifiedContext();
context.set("search",dispatchedSearch);
this.withEachDescendant(function(module){
module.reset();});
this.pushContextToChildren(context);
this._removeLastSearch();
this._lastSuccessfulDispatchedSearch=dispatchedSearch;
this.dispatchAlreadyInProgress=false;},
_fireDispatchFailHandler:function(failedSearch){
this.dispatchAlreadyInProgress=false;
this.logger.error(this.moduleType," Context failed to dispatch job for search=",failedSearch.toString());
this._removeLastSearch();
var descendants=this.getDescendants();
for(var i=0,len=descendants.length;i<len;i++){
descendants[i].reset();}},
someChildrenRequireDispatch:function(search){
var requireDispatch=false;
this.withEachChild(function(child){
if(child.requiresDispatch(search)){
requireDispatch=true;
return false;}});
return requireDispatch;},
onBeforeJobDispatched:function(search){},
ensureFreshContexts:function(){
if(this.getContext().get('search').isJobDispatched()){
return;}
var stale=null;
this.withEachAncestor(function(module){
if(module.getContext().get('search').isJobDispatched()){
return false;}
if(!module._childModulesHaveFreshContexts){
stale=module;}},true);
if(stale){
stale.withEachDescendant(function(child){
child.baseContext=null;});
stale.setChildContextFreshness(true);}},
setChildContextFreshness:function(bool){
this._childModulesHaveFreshContexts=(!!bool);},
getContext:function(){
var context=null;
if(this.baseContext){
context=this.baseContext.clone();}else{
if(this.parent){
var baseContext=this.parent.getModifiedContext();
if(baseContext!=null){
if(this.getLoadState()<Splunk.util.moduleLoadStates.HAS_CONTEXT){
this.logger.debug(this.moduleType+" - Although we're still loading the page we have to let modules cache contexts.");
this.parent.setChildContextFreshness(false);}
this.baseContext=baseContext;
context=baseContext.clone();}else{
var exception_msg=sprintf("getContext was called by %(moduleId)s with no baseContext. %(moduleId)s's parent returned a null context. This should not happen.",this);
throw(exception_msg);}}else{
context=new Splunk.Context();
var search=new Splunk.Search();
context.set("search",search);}}
for(var i=0,len=this._paramsToUseAsSettings.length;i<len;i++){
var pair=this._paramsToUseAsSettings[i];
var namespacedKey=pair.namespace+"."+pair.param;
if(this.getParam(pair.param)!=null&&!context.has(namespacedKey)){
context.set(namespacedKey,this.getParam(pair.param));}}
return context;},
pushContextToChildren:function(explicitContext){
var readiness=this.isReadyForContextPush()
if(readiness==Splunk.Module.CANCEL){
if(!this.isPageLoadComplete()){
var propagateLoadCompleteFlag=function(module){
module.markPageLoadComplete();
module.withEachChild(function(child){
propagateLoadCompleteFlag(child);});};
propagateLoadCompleteFlag(this);}
return;}else if(readiness==Splunk.Module.DEFER){
this.pushContextWhenReady=true;
return;}else if(readiness==Splunk.Module.CONTINUE){
if(this.pushContextWhenReady){
this.pushContextWhenReady=false;}}else{
this.logger.error(this.moduleType+" returned illegal value from isReadyForContextPush");}
this.ensureFreshContexts();
var childContext=explicitContext||this.getModifiedContext();
if(childContext==null||!childContext.has("search")){
this.logger.warn(this.moduleType,'TODO  - hit old behaviour of returning NULL - getModifiedContext returns a context with a "null" search, stopping the pushContextToChildren call.');
return;}else if(this.getLoadState()<Splunk.util.moduleLoadStates.HAS_CONTEXT){
return;}
this.withEachDescendant(function(module){
module.setLoadState(Splunk.util.moduleLoadStates.WAITING_FOR_CONTEXT);});
var search=childContext.get("search");
if(this.someChildrenRequireDispatch(search)){
search.abandonJob();
this.withEachDescendant(function(module){
module.onBeforeJobDispatched(search);});
this._fireDispatch(search);
return;}
this.withEachChild(function(child){
child.baseContext=childContext;
child.setLoadState(Splunk.util.moduleLoadStates.HAS_CONTEXT);
child.onContextChange();
child.pushContextToChildren();
if(!child.isPageLoadComplete()){
child.markPageLoadComplete();}});
this.setChildContextFreshness(true);},
isReadyForContextPush:function(){
if(this.getLoadState()<Splunk.util.moduleLoadStates.HAS_CONTEXT)return false;
return true},
resetContext:function(){
if(this.baseContext&&this.baseContext.has("search")){
var search=this.baseContext.get("search");
if(search.isJobDispatched()){
Splunk.Globals['Jobber'].removeJob(search.job.getSearchId());}}
this.baseContext=null;
this._lastSuccessfulDispatchedSearch=null;},
getModifiedContext:function(){
if(!this.baseContext){
this.logger.debug(this.moduleType,"does not override getModifiedContext, has no local cache and thus is backfilling");}
return this.getContext();},
applyContext:function(context){
if(!this.isPageLoadComplete()){
this.logger.warn(this.moduleType," does not implement applyContext");}},
passContextToParent:function(context){
if(this.parent){
if(!this.isPageLoadComplete()){
this.parent.applyContext(context)
this.parent.passContextToParent(context);}
else if(!this.parent.applyContext(context)){
return this.parent.passContextToParent(context);}}else if(!this.isPageLoadComplete()){
var newBaseContext=context.clone();
var topSearch=newBaseContext.get("search");
newBaseContext.set("search",topSearch);
this.baseContext=newBaseContext;
return;}
this.logger.warn("an upstream interaction made it to the top of the tree (to ",this.moduleType,") because none of its downstream modules were able to take any action.")
return false;},
addChild:function(child){
if(child.parent){
this.logger.error(this.moduleType,".addChild - Assertion failed. this",child.moduleType," instance already has a parentModule. There Can Be Only One.");}
this._children.push(child);
child.parent=this;},
removeChild:function(childModule){
var newChildrenList=[];
for(var i=0;i<this._children.length;i++){
if(childModule==this._children[i]){
this._children[i].parent=null;}else{
newChildrenList.push(this._children[i]);}}
this._children=newChildrenList;},
validateHierarchy:function(){
this._hierarchyValidated=true;
var msg=false;
if(this.childEnforcement==Splunk.Module.ALWAYS_REQUIRE&&this._children.length==0){
msg="This view has a %s module but it is configured with no child modules to push its changes to. This represents a configuration error.";}else if(this.childEnforcement==Splunk.Module.NEVER_ALLOW&&this._children.length>0){
msg="This view has a %s module configured to push changes to downstream modules. This module never has any changes to push so this represents a configuration error."}
if(this.parentEnforcement==Splunk.Module.ALWAYS_REQUIRE&&!this.parent){
msg="This view has a %s module but that module has no parent modules to receive changes from. This module will not work in this configuration so this represents a configuration error.";}else if(this.parentEnforcement==Splunk.Module.NEVER_ALLOW&&this.parent){
msg="This view has a %s module but that module receives changes from other modules upstream. Since this module will ignore all such changes, this represents a configuration error.";}
if(msg){
if($("div.Message").length>0){
var messenger=Splunk.Messenger.System.getInstance();
messenger.send('error','splunk',_(sprintf(msg,this.moduleType)));}else{
this.displayInlineErrorMessage(_(sprintf(msg,this.moduleType)));}}},
withEachAncestor:function(fn,reverse){
var ancestors=this.getAncestors();
if(reverse)ancestors.reverse();
for(var i=0,j=ancestors.length;i<j;i++){
var resp=fn(ancestors[i]);
if(resp===false)return false;}
return true;},
withEachChild:function(fn){
var children=this._children;
for(var i=0,j=children.length;i<j;i++){
var resp=fn(children[i]);
if(resp===false)return false;}
return true;},
withEachDescendant:function(fn){
this.withEachChild(function(child){
if(fn(child)===false)return false;
child.withEachDescendant(fn);});
return true;},
getRootAncestor:function(){
var pointer=this,resp=null;
while(pointer){
resp=pointer;
pointer=pointer.parent;}
return resp;},
getAncestors:function(){
var pointer=this.parent,resp=[];
while(pointer){
resp.unshift(pointer);
pointer=pointer.parent;}
return resp;},
getGroupName:function(){
if(this._params.hasOwnProperty("group")){
return this._params["group"]}
return(this.parent)?this.parent.getGroupName():false;},
getDescendants:function(){
var resp=this._children.slice();
for(var i=0;i<resp.length;i++){
resp=resp.concat(resp[i]._children);}
return resp;},
getModulesInTree:function(){
var root=this.getRootAncestor();
return[root].concat(root.getDescendants());},
show:function(invisibilityMode){
invisibilityMode=invisibilityMode||"global";
if(this._invisibilityModes.hasOwnProperty(invisibilityMode)){
delete this._invisibilityModes[invisibilityMode];}
this._changeVisibility();},
hide:function(invisibilityMode){
invisibilityMode=invisibilityMode||"global";
this._invisibilityModes[invisibilityMode]=1;
this._changeVisibility();},
showDescendants:function(invisibilityMode){
if(!this.isSwitcherLeaf){
for(var i=0;i<this._children.length;i++){
this._children[i].show(invisibilityMode);
this._children[i].showDescendants(invisibilityMode);}}},
hideDescendants:function(invisibilityMode){
if(!this.isSwitcherLeaf){
for(var i=0,len=this._children.length;i<len;i++){
this._children[i].hide(invisibilityMode);
this._children[i].hideDescendants(invisibilityMode);}}},
_changeVisibility:function(){
var visible=true;
for(var mode in this._invisibilityModes){
if(this._invisibilityModes.hasOwnProperty(mode)){
visible=false;}}
if(visible)this.container.show();
else this.container.hide();},
onViewDataChange:function(event,data){},
pushViewDataChange:function(){
Splunk.Globals.ModuleLoader.refreshViewData();},
importParams:function(){
this._params={};
this._stickyParamList=[];
this._persistableParamList=[];
if(!Splunk.Module.loadParams){
this.logger.info('importParams - view does not have any parameters defined');
return;}
if(Splunk.Module.loadParams.hasOwnProperty(this.moduleId)){
this._params=$.extend(true,{},Splunk.Module.loadParams[this.moduleId]);}
if(!Splunk.Module.paramConfig){
this.logger.info('importParams - view does not have parameter config defined');
return;}
if(Splunk.Module.paramConfig.sticky.hasOwnProperty(this.moduleId)){
this._stickyParamList=Splunk.Module.paramConfig.sticky[this.moduleId];}
if(Splunk.Module.paramConfig.persistable.hasOwnProperty(this.moduleId)){
this._persistableParamList=Splunk.Module.paramConfig.persistable[this.moduleId];}},
getParam:function(key,fallbackValue){
if(!key){
throw Error(_('getParam: Splunk cannot get param; null key name passed'));}
if(this._params.hasOwnProperty(key)){
return this._params[key];}else if(fallbackValue!=null){
return fallbackValue;}else{
return null;}},
setParam:function(key,value,isSessionOnly){
this._params[key]=value;
if(this.getContext().get("viewStateId")){
this.logger.debug('setParam - skipping param write; inside viewstate');
return;}
if($.inArray(key,this._stickyParamList)==-1&&!this._matchesWildcardParam(key)){
this.logger.info('setParam - skipping param write: "'+key+'" is not sticky');
return;}
if(!isSessionOnly){
if(!(typeof(value)=='string')&&!(typeof(value)=='boolean')&&isNaN(value)){
this.logger.debug('setParam - Cannot persist non-primitive value: key='
+key+' type='+typeof(value));
return;}
$.ajax({
type:'POST',
url:this._buildParamUri(),
data:this._buildParamName(key)+'='+encodeURIComponent(value),
dataType:'json',
success:this._setParamCallback.bind(this),
error:this._setParamErrorback.bind(this)});}},
snapshotParamset:function(){
var output={};
var value=null;
var wildcardPrefixes=this._getWildcardPrefixes();
for(var key in this._params){
if((this._params.hasOwnProperty(key)&&$.inArray(key,this._persistableParamList)>-1)||this._matchesWildcardParam(key))
{
value=this._params[key];
if(!(typeof(value)=='string')&&!(typeof(value)=='boolean')&&isNaN(value)){
this.logger.warn('snapshotParamset - Cannot persist non-primitive value: key='
+key+' type='+typeof(value));
continue;}
output[key]=this._params[key];}}
return output;},
_getWildcardPrefixes:function(){
var wildcardPrefixes={};
for(var i=0,L=this._persistableParamList.length;i<L;i++){
var paramName=this._persistableParamList[i];
if(paramName.substring(paramName.length-1)=="*"){
wildcardPrefixes[paramName.substring(0,paramName.length-1)]=1;}}
return wildcardPrefixes;},
_matchesWildcardParam:function(key,forceRefresh){
if(!this.hasOwnProperty('_wildcardPrefixes')){
this._wildcardPrefixes=this._getWildcardPrefixes();}
for(var prefix in this._wildcardPrefixes){
if(key.substring(0,prefix.length)==prefix&&this._wildcardPrefixes.hasOwnProperty(prefix)){
return prefix+'*';}}
return false;},
_setParamCallback:function(data,textStatus){
this.logger.debug('_setParamCallback - response: '+data);},
_setParamErrorback:function(xhr,status,error){
this.logger.error('_setParamCallback - error: '+xhr.responseText);},
_buildParamUri:function(viewstate_id){
viewstate_id=viewstate_id||'_current';
return Splunk.util.make_url('app',
Splunk.util.getCurrentApp(),
Splunk.util.getCurrentView(),
viewstate_id);},
_buildParamName:function(key){
if(key==null){
throw Error('_buildParamName - Cannot build name; null key');}
return encodeURIComponent(this.moduleId+'.'+key);},
getResultURL:function(params){
var uri=Splunk.util.make_url('module',Splunk.util.getConfigValue('SYSTEM_NAMESPACE'),this.moduleType,'render');
params=params||{};
if(!params.hasOwnProperty('client_app')){
params['client_app']=Splunk.util.getCurrentApp();}
uri+='?'+Splunk.util.propToQueryString(params);
return uri;},
getResultParams:function(){
return{};},
resetXHRStatus:function(){
this.getResultsXHRObject=null;
this.getResultsRetryCounter=0;},
getResultsErrorHandler:function(xhr,textStatus,errorThrown){
this.resetXHRStatus();
if(textStatus=='abort'){
this.logger.debug(this.moduleType,'.getResults() aborted');}else{
this.logger.warn(this.moduleType,'.getResults() error; textStatus='+textStatus+' errorThrown='+errorThrown);}},
getResultsCompleteHandler:function(xhr,textStatus){
this.resetXHRStatus();},
getResults:function(){
if(this.getResultsXHRObject){
if(this.getResultsXHRObject.readyState<4){
var job=this.getContext().get("search").job;
if(job&&!job.isDone()&&this.getResultsRetryCounter<this.getResultsRetryPolicy){
this.getResultsRetryCounter++;
this.logger.info('XHR already in-flight for module',this.moduleId,'attempt',this.getResultsRetryCounter,'of',this.getResultsRetryPolicy,'exit out');
return;}else{
this.abortGetResults();
this.resetXHRStatus();
this.logger.info('XHR in-flight destroyed for module',this.moduleId,'for job',job.getSearchId(),'and replaced with new one');}}else{
this.resetXHRStatus();}}
this.logger.info('XHR clear for takeoff for module',this.moduleId);
var params=this.getResultParams();
this._previousResultParams=$.extend(true,{},params);
if(Splunk._testHarnessMode){
this.logger.debug(this.moduleType,".getResults -- we are in _testHarnessMode. If you're not running unit tests right now, something is horribly wrong.")
return false;}
var resultUrl=this.getResultURL(params);
if(!resultUrl){
this.logger.warn("getResultsURL() appears to be unimplemented or returning null for this instance.");}
var callingModule=this.moduleType;
this.getResultsXHRObject=$.ajax({
type:"GET",
cache:($.browser.msie?false:true),
url:resultUrl,
beforeSend:function(xhr){
xhr.setRequestHeader('X-Splunk-Module',callingModule);},
success:function(htmlFragment,textStatus,xhr){
if(params["sid"]){
var job=this.getContext().get("search").job;
if(job&&(params["sid"]!=job.getSearchId())){
this.logger.warn(this.moduleType,"while a request to a particular sid was in-flight, it appears the sid changed underneath us. We are dropping the response and NOT calling renderResults. old sid is",params["sid"]," and the new sid is ",job.getSearchId());
return;}}
if(xhr.status==0){
return;}
this.renderResults(htmlFragment);
this.resetXHRStatus();}.bind(this),
complete:this.getResultsCompleteHandler.bind(this),
error:this.getResultsErrorHandler.bind(this)});},
haveResultParamsChanged:function(){
var currentResultParams=this.getResultParams();
return(!Splunk.util.objectSimilarity(this._previousResultParams,currentResultParams));},
abortGetResults:function(){
if(this.getResultsXHRObject&&this.getResultsXHRObject.readyState<4){
this.logger.info('Aborting getResults request for',this.moduleType);
this.getResultsXHRObject.abort();}},
renderResults:function(htmlFragment,turbo){
if(!htmlFragment){
this.resultsContainer.html('No content available.');
return;}
if(turbo){
this.resultsContainer=$(Splunk.util.turboInnerHTML(this.resultsContainer[0],htmlFragment));}else{
this.resultsContainer.html(htmlFragment);}
if(this.onResultsRendered){
this.onResultsRendered();}},
reset:function(){
this.abortGetResults();
this.resetXHRStatus();
this.resetContext();
this.resetUI();},
resetUI:function(){
this.logger.warn(this.moduleType,'has not implemented a resetUI method.');},
resizeWidthToParent:function(){
this.container.width(this.container.parent().width());},
displayInlineErrorMessage:function(message){
this.logger.error(message);
var errorDiv=$('div.error',this.container);
if(errorDiv.length==0){
errorDiv=$("<div>").addClass("error").appendTo(this.container);}
errorDiv.text(message);
this.container.show();},
printHierarchy:function(indentation){
if(!indentation)indentation="";
this.logger.debug(indentation,this.moduleType);
for(var i=0;i<this._children.length;i++){
this._children[i].printHierarchy(indentation+"    ");}}});
Splunk.Module.ALWAYS_REQUIRE=1;
Splunk.Module.NEVER_ALLOW=-1;
Splunk.Module.CANCEL=-1;
Splunk.Module.DEFER=0
Splunk.Module.CONTINUE=1;;}catch(e){var err="The module 'Splunk.Module' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.Module.DispatchingModule=$.klass(Splunk.Module,{
initialize:function($super,container){
this.logger=Splunk.Logger.getLogger("search_modules.js");
$(document).bind('jobProgress',function(event,progressingJob){
if(!this.baseContext||!this.baseContext.has("search"))return false;
var ourJob=this.baseContext.get("search").job;
if(ourJob.getSearchId()==progressingJob.getSearchId()){
this.onJobProgress(event);}}.bind(this));
$(document).bind('jobDone',function(event,doneJob){
if(!this.baseContext||!this.baseContext.has("search"))return false;
var ourJob=this.baseContext.get("search").job;
if(ourJob.getSearchId()==doneJob.getSearchId()){
this.onJobDone(event);}}.bind(this));
$(document).bind('jobStatusChanged',function(event,sid,status){
if(!this.baseContext||!this.baseContext.has("search"))return false;
var search=this.baseContext.get("search");
if((search.job.getSearchId()==sid)){
this.onJobStatusChange(event,status);}}.bind(this));
$super(container);},
baseContext:false,
requiresTransformedResults:function(){return false},
requiresDispatch:function(search){
search=search||new Splunk.Search();
if(this.requiresTransformedResults()){
var range=search.getTimeRange();
if(range.isSubRangeOfJob()){
return true;}}
try{
return!search.isJobDispatched();}catch(e){
this.logger.error("TypeError ",this.moduleType,".requiresDispatch() was given a null search instance.");
return false;}},
pushContextToChildren:function($super,explicitContext){
var context=explicitContext||this.getModifiedContext();
var search=context.get("search");
if(!search.isJobDispatched()&&this.requiresDispatch(search)){
this.logger.error(this.moduleType,".onContextChange - hit the corner case where a DispatchingModule instance requires dispatch for q=",search.toString(),"timeRange=",search.getTimeRange());
this._fireDispatch(search);}else{
$super(context);}},
onJobProgress:function(event){},
onJobDone:function(event){},
onJobStatusChange:function(event,status){
if(status=='cancel'){
this.reset();}}});
Splunk.Module.DispatchingModule.isAbstract=true;;}catch(e){var err="The module 'Splunk.Module.DispatchingModule' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.DispatchingModule",err);});}try{i18n_register({"catalog":{"+-The results table option is only relevant when the search has transformed results.":"The results table option is only relevant when the search has transformed results.","+-Splunk is unable to find a title for child #%s":"Splunk is unable to find a title for child #%s"},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.AbstractSwitcher=$.klass(Splunk.Module.DispatchingModule,{
_titles:[],
_altTitles:[],
_frozenContexts:[],
_mode:null,
initialize:function($super,container){
$super(container);
this.messenger=Splunk.Messenger.System.getInstance();
this.logger=Splunk.Logger.getLogger("abstract_switcher.js");
this._titles=[];
this._altTitles=[];
this._mode=this._params["mode"]||"independent";
this._activeChildIndex=0;
this._preferredChildIndex=-1;
this._disabled=Splunk.util.normalizeBoolean(this._params["disableOnNull"]);},
requiresDispatch:function(search){return false},
disable:function(){this._disabled=true;},
enable:function(){this._disabled=false;},
isDisabled:function(){return this._disabled;},
someChildrenRequireDispatch:function($super,search){
return this._getActiveChild().requiresDispatch(search);},
onLoadStatusChange:function($super,statusInt){
$super(statusInt);
if(!this.isPageLoadComplete()&&statusInt==Splunk.util.moduleLoadStates.WAITING_FOR_CONTEXT){
if(this._mode=="serializeAll"){
for(var i=0;i<this._children.length-1;i++){
var child=this._children[i];
var deepestDescendant=child;
while(deepestDescendant._children.length>0){
deepestDescendant=deepestDescendant._children[deepestDescendant._children.length-1];}
deepestDescendant.isSwitcherLeaf=true;
this._children[i+1].parent=null;
deepestDescendant.addChild(this._children[i+1]);}}
var activeChildTitle=this._params["selected"]||null;
if(activeChildTitle){
for(var j=0;j<this._titles.length;j++){
if(this._titles[j]==activeChildTitle){
this.setActiveChild(j);
return;}}}
this.setActiveChild(0);}},
checkCompatibilities:function(context){
var search=context.get("search");
if(this._mode!="independent"){
return false;}
var markIncompatible=function(i,message,messageTarget){
if(this._activeChildIndex==i){
this._preferredChildIndex=this._activeChildIndex;
this.setActiveChild((i+1)%this._children.length);
this.pushContextToChildren();}
this.lockChild(i,message,messageTarget);}.bind(this);
var markCompatible=function(i){
this.unlockChild(i);
if(this._preferredChildIndex==i&&this._activeChildIndex!=i){
this._preferredChildIndex=-1;
this.setActiveChild(i);
this.pushContextToChildren();}}.bind(this);
var resultsTableIndex=this.getChildIndexByGroupName("splIcon-results-table");
var resultsChartIndex=this.getChildIndexByGroupName("splIcon-results-chart");
if(resultsTableIndex!=-1){
if(search.job.areResultsTransformed()){
var activeChildGroup=this._titles[this._activeChildIndex];
if(!this.alreadyAutoSwitchedForThisJob&&
(context.has("from_history")||(activeChildGroup in{"splIcon-events-list":1,"splIcon-events-table":1}))){
if(resultsChartIndex==-1||!this.getContext().has("charting.chart"))
this.setActiveChild(resultsTableIndex);
else
this.setActiveChild(resultsChartIndex);
this.pushContextToChildren();}}else{
var activeChildGroup=this._titles[this._activeChildIndex];
if(!this.alreadyAutoSwitchedForThisJob&&activeChildGroup in{"splIcon-results-table":1,"splIcon-results-chart":1}){
this.setActiveChild(0);
this.pushContextToChildren();}}
this.alreadyAutoSwitchedForThisJob=true;}},
getChildIndexByGroupName:function(group){
for(var i=0;i<this._children.length;i++){
var child=this._children[i];
if(child._params["group"]==group){
return i;}}
return-1;},
lockChild:function(childIndex,message,messageTarget){
this.logger.error("lockChild not implemented, or an instance of AbstractSwitcher was created directly. Both of these are not normal.");},
unlockChild:function(childIndex){
this.logger.error("unlockChild not implemented, or an instance of AbstractSwitcher was created directly. Both of these are not normal.");},
addChild:function($super,child){
$super(child);
var childIndex=this._children.length-1;
var childTitle=sprintf(_('Splunk is unable to find a title for child #%s'),childIndex);
if(child._params.hasOwnProperty("groupLabel")){
childTitle=child._params["groupLabel"];}
this._titles[childIndex]=childTitle;
var childAltTitle=undefined;
if(child._params.hasOwnProperty("altTitle")){
childAltTitle=child._params["altTitle"];}
this._altTitles[childIndex]=childAltTitle;},
_getActiveChild:function(){
var index=(this._mode=="serializeAll")?0:this._activeChildIndex;
return this._children[index];},
setActiveChild:function(childIndex){
this._activeChildIndex=childIndex;
this.logger.debug(this.container.attr('id')+" - setActiveChild("+childIndex+")");
var numberOfChildren=this._children.length;
if(this._mode=="serializeAll")numberOfChildren--;
var invisibilityMode="hidden by switcher "+this.moduleType+"#"+this.moduleId;
for(var i=0;i<numberOfChildren;i++){
var child=this._children[i];
if(i==parseInt(childIndex,10)){
child.showDescendants(invisibilityMode);
child.show(invisibilityMode);}else{
child.hideDescendants(invisibilityMode);
child.hide(invisibilityMode);}}
var resultsChartIndex=this.getChildIndexByGroupName("splIcon-results-chart");
if(resultsChartIndex!=-1){
var parent=this.parent;
while(parent){
if(parent.updateHistory){
parent.updateHistory();}
parent=parent.parent;}}},
onJobStatusChange:function(event,status){
if(status=="cancel"&&Splunk.util.normalizeBoolean(this._params["disableOnNull"])){
this.disable();}},
onJobProgress:function(){
var context=this.getContext();
if(!this.alreadyAutoSwitchedForThisJob){
this.checkCompatibilities(context);}},
onContextChange:function($super){
this.alreadyAutoSwitchedForThisJob=false;
this.enable();
return $super();},
pushContextToChildren:function(explicitContext){
if(this.isDisabled())return false;
var context=explicitContext||this.getModifiedContext();
var search=context.get("search");
var activeChild=this._getActiveChild();
if(activeChild&&activeChild.requiresDispatch(search)){
this._fireDispatch(search);
return}else{
this.logger.info(this.moduleType,".onContextChange - no children require dispatch");}
activeChild.baseContext=context;
activeChild.setLoadState(Splunk.util.moduleLoadStates.HAS_CONTEXT);
activeChild.onContextChange();
activeChild.pushContextToChildren();
if(!activeChild.isPageLoadComplete()){
activeChild.markPageLoadComplete();}},
getResults:function(params){}});
Splunk.Module.AbstractSwitcher.isAbstract=true;;}catch(e){var err="The module 'Splunk.Module.AbstractSwitcher' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.AbstractSwitcher",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.ConvertToDrilldownSearch=$.klass(Splunk.Module,{
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.parentEnforcement=Splunk.Module.ALWAYS_REQUIRE;
if(Splunk.util.normalizeBoolean(this.getParam("enableDebugOutput"))){
this.setUpDebuggingCrap();}
this.clickDirection="down";
this.drilldownPrefix=this.getParam("drilldownPrefix");
this.hide(this.HIDDEN_MODULE_KEY);},
addDrilldownIntention:function(search,click){
var intention={
arg:{
vals:[]},
flags:["keepevents"],
name:"drilldown"}
var vals=intention.arg.vals;
intention.arg.vals[0]=[];
intention.arg.vals[0][0]=click.name;
intention.arg.vals[0][1]=click.value;
intention.arg.vals[1]=[];
intention.arg.vals[1][0]=click.name2;
intention.arg.vals[1][1]=click.value2;
for(var i=0;i<intention.arg.vals.length;i++){
for(var j=0;j<intention.arg.vals[i].length;j++){
if(!intention.arg.vals[i][j]&&(""+intention.arg.vals[i][j]=="undefined")){
intention.arg.vals[i][j]=null;}}}
search.addIntention(intention);
return search;},
setUpDebuggingCrap:function(){
var moduleInstance=this;
$("<input type='checkbox' checked=\"checked\"/>").click(function(){
if($(this).prop('checked')){
moduleInstance.debugContainer.show();
moduleInstance._propagationPulldown.show();}else{
moduleInstance.debugContainer.hide();
moduleInstance._propagationPulldown.hide();}}).appendTo(this.container);
this.container.append("Show debug foo");
this._propagationPulldown=$("<div>").text("drilldown clicks should propagate:").append(
$("<select>").append($("<option value='up'>Up</option").text("Up (experimental)")).append($("<option selected='selected' value='down'></option").text("Down")).change(function(){
moduleInstance.clickDirection=$(this).val();})).appendTo(this.container);
this.debugContainer=$("<div>").appendTo(this.container);},
outputDebugMessages:function(){
if(!this.debugContainer)return;
var context=this.getContext();
var click=context.getAll(this.drilldownPrefix);
var search=context.get("search");
var debugMsg="<h3>Debugging the drilldown intention args</h3>";
debugMsg+="search = "+search.toString()+"<br/>";
for(name in click){
debugMsg+=name+"="+click[name]+"<br/>";}
this.debugContainer.html(debugMsg);},
pushContextToChildren:function($super,explicitContext){
var click=this.getContext().getAll(this.drilldownPrefix);
if(click.name||click.value||click.name2||click.value2){
if(this.clickDirection=="down"){
return $super(explicitContext);}
else{
this.outputDebugMessages();
var upwardContext=new Splunk.Context();
var search=new Splunk.Search();
upwardContext.set("search",search);
this.applyKeysToContext(click,upwardContext);
this.passContextToParent(upwardContext);}}},
applyKeysToContext:function(click,context){
if(click&&(click.name||click.value||click.name2||click.value2)){
var search=context.get("search");
search.abandonJob();
if(click.name=="_time"){
if(click.timeRange){
click.value=click.timeRange.getEarliestTimeTerms()+"-"+click.timeRange.getLatestTimeTerms();
if(click.name2=="_time")click.value2=click.value;}else{
this.logger.error("we appear to have a time click but we are missing the TimeRange instance");}}
this.addDrilldownIntention(search,click);
context.set("search",search);}
return context;},
getModifiedContext:function(){
var context=this.getContext();
this.outputDebugMessages();
var click=context.getAll(this.drilldownPrefix);
this.applyKeysToContext(click,context);
return context;}});;}catch(e){var err="The module 'Splunk.Module.ConvertToDrilldownSearch' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.ConvertToDrilldownSearch",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.NotReporting=$.klass(Splunk.Module,{
initialize:function($super,container){
$super(container);
$(".ButtonSwitcher").click(function(){
var sel=$('.resultsOptionsActivator');
var csel=$('.SplunkModule.Count');
if(!$(".results-table-help").is(":visible")){
sel.removeClass("splIconicLinkDisabled");
csel.show();}else{
sel.addClass("splIconicLinkDisabled");
csel.hide();}});}});;}catch(e){var err="The module 'Splunk.Module.NotReporting' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.NotReporting",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.BaseChartFormatter=$.klass(Splunk.Module,{
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("BaseChartFormatter.js");
this._formElement=$();
var elements=$("select",this.container);
if(elements.length>0){
this._formElement=$(elements[0]);
if(elements.length>1){
logger.warn('initialize - '+this.moduleType+' has extraneous form elements');}
this._formElement.bind('change',this.handleInputChange.bind(this));}
this._contextKey="SETTING_NAME_NOT_SET";
this.PROPERTY_MANAGER_SPECIAL_CHARS=new Array("#","@");
this.assertParamsMatchUI('initialize');},
getModifiedContext:function(){
var context=this.getContext();
if(this.isCompatibleWithContext()){
var search=context.get("search");
var plotIntention=search.popIntention("plot");
if(!plotIntention||this.isCompatibleWithIntention(plotIntention)){
context.set(this._contextKey,this.getParam('default'));
this.assertParamsMatchUI("getModifiedContext")
return context;}}
if(this._safeDefault!=null){
context.set(this._contextKey,this._safeDefault);}
return context;},
assertParamsMatchUI:function(callingMethodName){
if(this.getParam("default")!=this._formElement.val()){
this.logger.error("Assertion failed in ",this.moduleType,".",callingMethodName," . Params have drifted out of sync with the UI\ngetParam('default')=",this.getParam("default")," formElement.val()=",this._formElement.val());}},
handleInputChange:function(evt){
this.setParam('default',this._formElement.val());
this.logger.debug('handleInputChange - got default='+this.getParam('default'));
this.pushContextToChildren();
var parent=this.parent;
while(parent){
if(parent.updateHistory){
parent.updateHistory();}
parent=parent.parent;}},
showIfCompatible:function(){
if(!this.baseContext){
this.hide('contextCompatibility');}
if(this.isCompatibleWithContext()){
var context=this.getContext();
var search=context.get("search");
var plotIntention=search.popIntention("plot");
if(!plotIntention||this.isCompatibleWithIntention(plotIntention)){
this.show('contextCompatibility');
this.enableCompatibleOptions();}}else{
this.hide('contextCompatibility');}},
isCompatibleWithContext:function(){return true;},
enableCompatibleOptions:function(){},
isCompatibleWithIntention:function(plotIntention){return true;},
onContextChange:function(){
var context=this.getContext();
if(context.has(this._contextKey)){
var value=context.get(this._contextKey);
this._formElement.val(value);
this.setParam('default',value,true);}
this.showIfCompatible();},
escapePropertyManagerControlChars:function(value){
for(var i=0,l=this.PROPERTY_MANAGER_SPECIAL_CHARS.length;i<l;i++){
if(value.substring(0,1)==this.PROPERTY_MANAGER_SPECIAL_CHARS[i]){
var ch=this.PROPERTY_MANAGER_SPECIAL_CHARS[i];
return value.replace(ch,ch.concat(ch));}}
return value}});
Splunk.Module.BaseChartFormatter.isAbstract=true;;}catch(e){var err="The module 'Splunk.Module.BaseChartFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.BaseChartFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.FieldSearch=$.klass(Splunk.Module,{
keys:{
ENTER:13,
UP_ARROW:38,
DOWN_ARROW:40,
LEFT_ARROW:37,
RIGHT_ARROW:39,
PAGE_DOWN:34,
PAGE_UP:33,
SPACE_BAR:32,
TAB:9,
ESCAPE:27},
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("FieldSearch.js")
this.searchForm=$('form',this.container);
this.input=$('input',this.container);
this.fieldName=this.input.attr('name');
if(!this.fieldName){
this.logger.warn(this.moduleType,"Warning - there's no fieldName. using FIELD_NAME_UNSET");
this.fieldName="FIELD_NAME_UNSET";}
this.bindEventListeners();},
bindEventListeners:function(){
this.searchForm.submit(this._onFormSubmit.bind(this));
this.input.bind("keydown",this._onKeyDown.bind(this));},
getIntentionArg:function(){
var fieldValue=this.input.attr('value');
if(!fieldValue)return false;
var argumentDict={};
argumentDict[this.fieldName]=fieldValue;
return argumentDict;},
applyContext:function(context){
var search=context.get("search");
this.logger.debug(this.moduleType,".applyContext received ",search);
if(!this.isPageLoadComplete()){
this.clearInputField();}
var intention=search.popIntention('addterm',this.fieldName);
if(intention){
context.set("search",search);
this.logger.debug(this.moduleType,".applyContext has matched an intention and is removing it from context.");
var fieldValue=intention["arg"][this.fieldName];
if(this.input.attr('value')==fieldValue){
this.setInputField('');}else{
this.setInputField(fieldValue);}
if(this.isPageLoadComplete()){
this.pushContextToChildren();
return true;}}
return false;},
getModifiedContext:function(){
var context=this.getContext();
var argumentDict=this.getIntentionArg();
if(argumentDict){
var search=context.get("search");
search.abandonJob();
search.addIntention({"name":'addterm',"arg":argumentDict});
context.set("search",search);}
return context;},
_onFormSubmit:function(){
setTimeout(function(randomNumberOfDoom){this.pushContextToChildren()}.bind(this),0);
return false;},
setInputField:function(searchStr){
this.logger.debug(this.moduleType,".setInputField old=",this.input.text(),"new=",searchStr);
try{
this.input.attr("value",searchStr);}
catch(e){
this.input.text(searchStr);}},
clearInputField:function(){
try{
this.input.attr("value",'');}
catch(e){
this.input.text('');}},
_onKeyDown:function(evt){
var keyCode=evt.keyCode;
if(keyCode==this.keys['ENTER']){
evt.preventDefault();
this._onFormSubmit();
return false;}else{
for(var key in this.keys){
if(keyCode==this.keys[key])return;}
this.setChildContextFreshness(false);}}});;}catch(e){var err="The module 'Splunk.Module.FieldSearch' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.FieldSearch",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.ViewRedirector=$.klass(Splunk.Module,{
DEFAULT_WINDOW_FEATURES:"status=1,toolbar=1,location=1,menubar=1,resizable=1,scrollbars=1,directories=1",
URI_PARAM_PREFIX:'uriParam.',
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.NEVER_ALLOW;
this.parentEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.popupWindowFeatures=this.DEFAULT_WINDOW_FEATURES;
try{
this.defaultToPopup=Splunk.util.normalizeBoolean(this._params["popup"],true);}catch(e){
this.defaultToPopup=true;
this.popupWindowFeatures=this._params["popup"];}
this.hide(this.HIDDEN_MODULE_KEY);},
addChild:function($super,child){
this.logger.error(this.moduleType,'module is configured with a child module. There is no reason to do this and so it is probably a mistake.');
return $super(child);},
pushContextToChildren:function($super,explicitContext){
var context=explicitContext||this.getContext();
var openInPopup=context.get("click.modifierKey")||this.defaultToPopup;
var search=context.get("search");
if(!this.isPageLoadComplete()){
this.logger.debug(this.moduleType+" - initial page load detected. Not redirecting");
return false;}
var args={};
var qsDict=Splunk.util.queryStringToProp(document.location.search);
if(Splunk.util.normalizeBoolean(this._params["sendBaseSID"])){
if(qsDict.hasOwnProperty("base_sid")){
args["base_sid"]=qsDict["base_sid"];}
else if(qsDict.hasOwnProperty("sid")){
args["base_sid"]=qsDict["sid"];}
else if(search.isJobDispatched()){
args["base_sid"]=context.job.getSearchId();}else{
this.logger.error(this.moduleType," is configured to send the underlying sid, but its context hasnt been dispatched and there are no sids in the URL");}}
if(search.getViewStateId()){
args["vs"]=search.getViewStateId();}
for(var key in this._params){
if(this._params.hasOwnProperty(key)){
if(key.length>this.URI_PARAM_PREFIX.length&&key.indexOf(this.URI_PARAM_PREFIX)==0){
args[key.substring(this.URI_PARAM_PREFIX.length)]=this._params[key];}}}
this.sendToView(args,openInPopup);},
sendToView:function(additionalArgs,openInPopup){
var context=this.getContext();
var search=context.get("search");
var options={};
options["windowFeatures"]=this.popupWindowFeatures;
search.sendToView(this._params["viewTarget"],additionalArgs,Splunk.util.normalizeBoolean(this._params["dispatchBeforeRedirect"]),openInPopup,options);}});;}catch(e){var err="The module 'Splunk.Module.ViewRedirector' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.ViewRedirector",err);});}try{i18n_register({"catalog":{"+-On":"On","+-Off":"Off"},"plural":function(n){return n==1?0:1;}});Splunk.Module.DisableRequiredFieldsButton=$.klass(Splunk.Module,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("DisableRequiredFields.js");
this.fd_checkbox=$('.fd_toggle_checkbox',this.container).iphoneStyle({'duration':75,'checkedLabel':_('On'),'uncheckedLabel':_('Off'),'resizeHandle':false,'resizeContainer':false});
this.fd_checkbox.attr('id',this.moduleId+'checkbox');
this.fd_label=$('.fd_toggle_label',this.container).attr('for',this.fd_checkbox.attr('id'));
$('.fd_toggle_container').tipTip({
content:$('.tooltip_content',container).html(),
defaultPosition:"bottom",
delay:300,
fadeOut:600,
maxWidth:"175px",
enter:function(){
$(document).mousemove(function(e){
if($("#tiptip_holder").is(":hidden")){
var pageY=e.pageY;
var pageX=e.pageX;
$("#tiptip_holder").css("marginTop",pageY+20+"px");
$("#tiptip_holder").css("marginLeft",pageX+"px");}});}});
this.sb_hide=$('.splIconicLink',this.container);
if($.browser.msie){
$('#tiptip_content').css('border-color','black');}
this._initEvents();},
_initEvents:function(){
var self=this;
var enabled=Splunk.util.normalizeBoolean(this.getParam('enabled',true));
this.fd_checkbox.attr('checked',enabled).change();
this.fd_checkbox.bind('change',function(){
if($(this).is(':checked')){
setTimeout(self.enableFieldExtraction.bind(self),10);}else{
setTimeout(self.disableFieldExtraction.bind(self),10);}});
this.sb_hide.bind('click',function(){
$('.sidebarControl a').click();});
this.container.css('visibility','visible');},
enableFieldExtraction:function(){
var context=this.getContext();
var search=context.get('search');
this.setParam('enabled',true);
if(search&&search.job&&search.job.getSID()&&!search.job.isDone()){
this.getRootAncestor().pushContextToChildren();}},
disableFieldExtraction:function(){
var context=this.getContext();
var search=context.get('search');
this.setParam('enabled',false);
if(search&&search.job&&search.job.getSID()&&!search.job.isDone()){
this.getRootAncestor().pushContextToChildren();}},
onBeforeJobDispatched:function(search){
if(!Splunk.util.normalizeBoolean(this.getParam('enabled'))){
this.logger.info('Disabling required fields');
search._requiredFieldList=[];
return;}
this.logger.info('Enabling required fields');}});;}catch(e){var err="The module 'Splunk.Module.DisableRequiredFieldsButton' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.DisableRequiredFieldsButton",err);});}try{i18n_register({"catalog":{"+-For the time being 'cancel' will not be able to restore settings until settings are resurrectable.":"For the time being 'cancel' will not be able to restore settings until settings are resurrectable."},"plural":function(n){return n==1?0:1;}});Splunk.Module.SubmitButton=$.klass(Splunk.Module,{
MAX_URI_LENGTH_IE:2048,
MAX_SUID_SUFFIX_LENGTH:38,
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("SubmitButton.js")
this._previouslyPushedSearch=false;
if(this._params.hasOwnProperty("label")){
this._submitButton=$("button.splButton-primary",this.container);}else{
this._submitButton=$("input.searchButton",this.container);}
this._submitButton.click(this.onClick.bind(this));
this._queuedRequest=null;
var self=this;
if(Splunk.util.normalizeBoolean(this._params["updatePermalink"])){
this._useHistory=true;
this._justpushed=false;
this._nopush=false;
this._historyQueue=[];
this._args={};
$script(Splunk.util.make_url('/static/js/contrib/jquery.history.js'),function(){
for(var i=0;i<self._historyQueue.length;i++){
var history=self._historyQueue[i];
History.pushState(history,document.title,'?'+Splunk.util.propToQueryString(history));}
self._historyQueue=null;
History.Adapter.bind(window,'statechange',function(){
var State=History.getState();
var data=State.data;
if(!data||!data.q){
$.each(self.getModulesInTree(),function(idx,mod){mod.reset();});
self._args={};
if(Splunk.toBeResurrected){
var search=Splunk.Search.resurrect(Splunk.toBeResurrected);
var context=new Splunk.Context();
context.set("search",search);
context.set("from_history","1");
var parent=self;
while(parent.parent){
parent=parent.parent;
parent.baseContext=context;
parent.onContextChange();}
self.pushContextToChildren(context,true);}
return;}
if(self._justpushed){
self._justpushed=false;
return;}
var range=new Splunk.TimeRange(data.earliest,data.latest);
var search=new Splunk.Search(data.q,range);
var context=new Splunk.Context();
context.set("search",search);
Splunk.Globals.ModuleLoader.chartingSettingsToContext(data,context);
var parent=self;
while(parent.parent){
parent=parent.parent;}
self._args=data;
context.set("from_history","1");
parent.baseContext=context;
parent.onContextChange();
parent.pushContextToChildren(context);});});}else{
this._useHistory=false;}},
updateHistory:function(){
var context=this.getContext();
if(this._useHistory&&this._args.q)
this.pushHistory(context,true);},
pushHistory:function(context,replace){
if(!this._useHistory||!this.isPageLoadComplete())
return;
if(context.has("from_history")&&!replace){
return;}
var search=context.get("search");
var q=Splunk.util.addLeadingSearchCommand(search.toString());
var args={};
args["q"]=q
var range=search.getTimeRange();
if(range){
if(range.getEarliestTimeTerms()){
args["earliest"]=range.getEarliestTimeTerms();}
if(range.getLatestTimeTerms()){
args["latest"]=range.getLatestTimeTerms();}
if(range.isAllTime()){
args["earliest"]=0;}}
var settingNameMap={'charting.chart':'c.chart','charting.chartTitle':'c.title','charting.chart.stackMode':'c.stack','charting.layout.splitSeries':'c.split','charting.chart.nullValueMode':'c.nulls','charting.legend.placement':'c.legend','charting.primaryAxisTitle.text':'c.x.title','charting.secondaryAxisTitle.text':'c.y.title','charting.secondaryAxis.minimumNumber':'c.y.min','charting.secondaryAxis.maximumNumber':'c.y.max','charting.secondaryAxis.scale':'c.y.scale','charting.chart.showMarkers':'c.markers'};
var settings={};
this.withEachDescendant(function(module){
var mc=module.getModifiedContext();
if(module.moduleId.indexOf("JSChart")!=0)
return;
if(!mc.has("charting.chart")||!$(module.container).is(":visible")){
return;}
for(var keyType in{'charting':null}){
var props=mc.getAll(keyType);
for(var key in props){
if(props.hasOwnProperty(key)&&props[key]!=null){
var propName=keyType+"."+key;
settings[settingNameMap[propName]||propName]=props[key];}}}});
$.extend(args,settings);
replace=false;
if(Splunk.util.objectSimilarity(args,this._args)){
return;}else{
if((Splunk.util.objectSimilarity(this._args.q,args.q)&&
Splunk.util.objectSimilarity(this._args.earliest,args.earliest)&&
Splunk.util.objectSimilarity(this._args.latest,args.latest))){
replace=true;}
if(!this._args.q&&Splunk.toBeResurrected&&!Splunk.toBeResurrected.job)
replace=true;
this._args=args;}
if(this._historyQueue instanceof Array){
if(replace){
if(this._historyQueue.length>0){
this._historyQueue[this._historyQueue.length-1]=args;}}else{
this._historyQueue.push(args);}}else{
this._justpushed=true;
var qs=Splunk.util.propToQueryString(args);
if(History.isInternetExplorer()){
var baseUri=document.location.href.split("#")[0],
uriSegments=baseUri.split("/"),
lastSegment=uriSegments[uriSegments.length-1],
preQsLength=(baseUri+"#"+lastSegment+"/?").length;
if((preQsLength+qs.length+this.MAX_SUID_SUFFIX_LENGTH)>this.MAX_URI_LENGTH_IE){
qs="";}}
if(replace){
History.replaceState(args,document.title,'?'+qs);}else{
History.pushState(args,document.title,'?'+qs);}}},
pushContextToChildren:function($super,explicitContext,force){
var context=explicitContext||this.getModifiedContext();
var search=context.get("search");
if(force||!this.isPageLoadComplete()||Splunk.util.normalizeBoolean(this._params["allowSoftSubmit"])){
$super(explicitContext);}},
onContextChange:function(){},
applyContext:function($super,context){
var search=context.get("search");
this._previouslyPushedSearch=search;
return $super(context);},
_fireDispatch:function($super,dispatchedSearch){
if(this.dispatchAlreadyInProgress==true){
this._queuedRequest=dispatchedSearch;}
$super(dispatchedSearch);},
_fireDispatchSuccessHandler:function(dispatchedSearch){
this.logger.debug("success - context dispatched for search=",dispatchedSearch.toString());
var context=this.getContext();
context.set("search",dispatchedSearch);
this.pushContextToChildren(context,true);
this.pushHistory(context);
this._removeLastSearch();
this._lastSuccessfulDispatchedSearch=dispatchedSearch;
this.dispatchAlreadyInProgress=false;
if(this._queuedRequest){
this._fireDispatch(this._queuedRequest);
this._queuedRequest=null;}},
onClick:function(event){
var context=this.getContext();
this.pushContextToChildren(null,true);},
onCancelClick:function(event){
var messenger=Splunk.Messenger.System.getInstance();
messenger.send('info','splunk.search',_("For the time being 'cancel' will not be able to restore settings until settings are resurrectable."));}});;}catch(e){var err="The module 'Splunk.Module.SubmitButton' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.SubmitButton",err);});}try{i18n_register({"catalog":{"+-(now)":"(now)","+-All dates after":"All dates after","+-All time":"All time","+-Invalid relative string":"Invalid relative string","+-Custom Time Range":"Custom Time Range","+-Error: Failed to load configured time ranges.":"Error: Failed to load configured time ranges.","+-Custom time...":"Custom time...","+-Earliest time must be before latest time":"Earliest time must be before latest time","+-Custom time":"Custom time","+-Invalid time string":"Invalid time string","+-Date range":"Date range","+-All dates before":"All dates before"},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.TimeRangePicker=$.klass(Splunk.Module,{
EARLIEST_TIME_ATTR:'earliest_time',
LATEST_TIME_ATTR:'latest_time',
ALL_TIME_LABEL:_('All time'),
CUSTOM_TIME_LABEL:_('Custom time'),
DATEPICKER_CLASS:'customDateTime',
DATE_RANGE_ERROR_MSG:_('Earliest time must be before latest time'),
DATE_RANGE_TEXT:_('Date range'),
DATES_BEFORE_TEXT:_('All dates before'),
DATES_AFTER_TEXT:_('All dates after'),
CUSTOM_DATE_SEAM:500,
_timeZone:null,
_selectedRange:null,
_menu:null,
_activator:null,
_haveMovedPopupDom:false,
_customEarliestDate:null,
_customLatestDate:null,
_earliestTime:null,
_latestTime:null,
_datePickerMode:false,
_customDateTimePopup:false,
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("time_range_picker.js");
this._timeZone=new splunk.time.SplunkTimeZone(Splunk.util.getConfigValue("SERVER_ZONEINFO"));
this._activator=$('.timeRangeActivator',this.container)
var FALLBACK_MENU_DICT=[{"style":"timeRangePreset","attrs":{},"label":_("Error: Failed to load configured time ranges.")}];
try{
this._menuDict=this._params.timeRangeJson;}catch(e){
this.logger.error(e+", "+e.message);}
if(!this._menuDict){
this._menuDict=FALLBACK_MENU_DICT;}
var cust=this._buildCustomDateItem();
this._menuDict.push(cust);
this._customDateTimePopup=$('.trpCustomDateTime',this.container);
this._customDateTimePopupObj=null;
this._setupCustomDateTime();
this._menu=new Splunk.MenuBuilder({
containerDiv:this.container,
menuDict:this._menuDict,
activator:this._activator.parent('.timeRangeActivatorWrapper'),
menuClasses:'splMenu-primary timeRangeMenu'});
var selectedLabel=this.getParam('selected');
if(this._params.hasOwnProperty("default")){
selectedLabel=this.getParam('default');}
var menuReference=this._menu.getMenu();
menuReference.click(this._onMenuClick.bind(this));
var matchedSomePreset=false;
if(selectedLabel){
var moduleInstance=this;
menuReference.find('.timeRangePreset a').each(function(){
var thisText=moduleInstance._getRawLabel($(this).text()).toLowerCase();
if(thisText==selectedLabel.toLowerCase()){
matchedSomePreset=true;
moduleInstance._activator.text($(this).text());
moduleInstance._setSelectedRangeToPreset($(this));}});}
if(!matchedSomePreset){
if(selectedLabel){
this.logger.error(this.moduleType," specified a selected timeRange in its config, (",selectedLabel,") but that is not a valid option");
this._activator.text(this.ALL_TIME_LABEL);}else{
this._activator.text(this.ALL_TIME_LABEL);}}
this._menu.hideSubMenus();},
_getRawLabel:function(translatedTime){
for(var key in this._menuDict){
if(this._menuDict.hasOwnProperty(key)){
if(this._menuDict[key].hasOwnProperty("items")){
var subMenu=this._menuDict[key]["items"];
for(var subKey in subMenu){
if(translatedTime==subMenu[subKey]['label']){
return subMenu[subKey]['rawLabel'];}}}
else{
if(translatedTime==this._menuDict[key]['label']){
return this._menuDict[key]['rawLabel'];}}}}
return'';},
_setupCustomDateTime:function(){
var context=this;
$('.rangeType input[type="radio"]',this._customDateTimePopup).click(function(){
var justSelected='.'+$(this).val();
$('.visibleDateTimePanel',context._customDateTimePopup).removeClass('visibleDateTimePanel').fadeOut('fast',function(){
$('.dateTimePanel',context._customDateTimePopup).css('display','none');
$(justSelected,context._customDateTimePopup).fadeIn('fast').addClass('visibleDateTimePanel');});});
this._setupDateRangeMode();
this._setupRelativeMode();
this._setupRealtimeMode();
this._setupAdvancedMode();
$('.trpApply',this._customDateTimePopup).click(this._onApplyClick.bind(this));
$('.trpCancel',this._customDateTimePopup).click(this._onCancelClick.bind(this));},
_setupDateRangeMode:function(){
$('.earliestSpecificDateRadio',this._customDateTimePopup).click(function(){
this._enableDateTime('.earliestDateTime');}.bind(this));
$('.earliestDateRadio',this._customDateTimePopup).click(function(){
this._disableDateTime('.earliestDateTime');}.bind(this));
$('.latestSpecificDateRadio',this._customDateTimePopup).click(function(){
this._enableDateTime('.latestDateTime');}.bind(this));
$('.nowDateRadio',this._customDateTimePopup).click(function(){
this._disableDateTime('.latestDateTime');}.bind(this));
var module=this;
var dateFormat=$.datepicker._defaults['dateFormat'];
var defaultDate=new Date();
$('.latestDate',this._customDateTimePopup).val($.datepicker.formatDate(dateFormat,defaultDate));
defaultDate.setDate(defaultDate.getDate()-1);
$('.earliestDate',this._customDateTimePopup).val($.datepicker.formatDate(dateFormat,defaultDate));
$(this._customDateTimePopup).find('.earliestDate').datepicker({
currentText:'',
defaultDate:defaultDate,
prevText:'',
nextText:''});
$(this._customDateTimePopup).find('.latestDate').datepicker({
currentText:'',
prevText:'',
nextText:''});
this._earliestTime=new Splunk.TimeSpinner($('.earliestTime',this._customDateTimePopup));
this._latestTime=new Splunk.TimeSpinner($('.latestTime',this._customDateTimePopup));},
_setupRelativeMode:function(){
var module=this;
$('.relativeMode select.relativeUnit',this._customDateTimePopup).change(function(){
if($('.relativeSnap option:selected',this._customDateTimePopup).val()!='none'){
var selectedVal=$('.relativeUnit option:selected',module._customDateTimePopup).val();
$('.relativeSnap',module._customDateTimePopup).val(selectedVal);}
module._setRelativeDisplays();});
$('.relativeMode select.relativeSnap',this._customDateTimePopup).change(function(){
module._setRelativeDisplays();});
$('.relativeMode input',this._customDateTimePopup).keyup(function(){
this.value=this.value.replace(/[^0-9\.]/g,'');
module._setRelativeDisplays();});
this._setRelativeDisplays();},
_setRelativeDisplays:function(){
var relativeString=this._buildRelativeString();
this._setRelSearchLangEquivalent(relativeString);
this._setRelativeRealLangStringDisplay(relativeString);},
_buildRelativeString:function(){
var val=parseInt($('.relativeValue',this._customDateTimePopup).val(),10)||0;
var unit=$('.relativeUnit option:selected',this._customDateTimePopup).val()||'s';
var snap='';
if($('.relativeSnap option:selected',this._customDateTimePopup).val()!='none'){
snap='@'+$('.relativeSnap option:selected',this._customDateTimePopup).val();}
var relativeString='-'+val+unit+snap;
return relativeString;},
_setRelSearchLangEquivalent:function(relativeString){
$('.relativeEffectives .searchLangEquivalent',this._customDateTimePopup).html(relativeString);},
_setRelativeRealLangStringDisplay:function(relativeString){
$.getJSON(Splunk.util.make_url('/util/time/parser?ts='+relativeString),function(jsonObject){
var effectiveRange=_('Invalid relative string');
var effectiveIso='';
if(jsonObject[relativeString]){
effectiveRange=jsonObject[relativeString].localized+" - "+_('(now)');
effectiveIso=jsonObject[relativeString].iso;}
$('.relativeEffectives .effectiveRange',this._customDateTimePopup).html(effectiveRange).attr('title',effectiveIso);})},
_setupRealtimeMode:function(){
var module=this;
$('.realtimeMode select.rollingWindowUnit',this._customDateTimePopup).change(function(){
module._setRealtimeDisplays();});
$('.realtimeMode input',this._customDateTimePopup).keyup(function(){
this.value=this.value.replace(/[^0-9\.]/g,'');
module._setRealtimeDisplays();});
this._setRealtimeDisplays();},
_setRealtimeDisplays:function(){
var realtimeString=this._buildRealtimeString();
this._setRealtimeSearchLangEquivalent(realtimeString);},
_buildRealtimeString:function(){
var val=parseInt($('.rollingWindowSize',this._customDateTimePopup).val(),10)||0;
var unit=$('.rollingWindowUnit option:selected',this._customDateTimePopup).val()||'s';
var realtimeString='rt-'+val+unit;
return realtimeString;},
_setRealtimeSearchLangEquivalent:function(realtimeString){
$('.realtimeEffectives .searchLangEquivalent',this._customDateTimePopup).html(realtimeString);},
_setupAdvancedMode:function(){
var context=this;
var advancedStartTimer=null;
var advancedEndTimer=null;
$('.advancedStart',this._customDateTimePopup).bind('blur',function(){
clearTimeout(advancedStartTimer);
context._setAdvancedRealLanguage('start');}).bind('keyup',function(){
clearTimeout(advancedStartTimer);
advancedStartTimer=setTimeout(function(){context._setAdvancedRealLanguage('start')},1500);});
$('.advancedEnd',this._customDateTimePopup).bind('blur',function(){
clearTimeout(advancedEndTimer);
context._setAdvancedRealLanguage('end');}).bind('keyup',function(){
clearTimeout(advancedEndTimer);
advancedEndTimer=setTimeout(function(){context._setAdvancedRealLanguage('end')},1500);});},
_setAdvancedRealLanguage:function(whichAdvanced){
var advancedVal;
var toUpdate;
if(whichAdvanced=='start'){
advancedVal=Splunk.util.trim($('.advancedStart',this._customDateTimePopup).val());
toUpdate=$('.advancedEffectiveStart',this._customDateTimePopup);}else if(whichAdvanced=='end'){
advancedVal=Splunk.util.trim($('.advancedEnd',this._customDateTimePopup).val());
toUpdate=$('.advancedEffectiveEnd',this._customDateTimePopup);}else{
this.logger.error("TimeRangePicker: _setAdvancedRealLanguage called without a flag switch.");
return;}
if(!advancedVal){
return;}
var url=Splunk.util.make_url('/util/time/parser?ts='+encodeURIComponent(advancedVal));
$.getJSON(url,function(jsonObject){
var effectiveVal=_('Invalid time string');
var effectiveIso='';
if(jsonObject[advancedVal]){
if(advancedVal.substr(0,2)=='rt'){
effectiveVal=jsonObject[advancedVal].iso;}
else{
effectiveVal=jsonObject[advancedVal].localized;}
effectiveIso=jsonObject[advancedVal].iso;}
toUpdate.html(effectiveVal).attr('title',effectiveIso);})},
_buildCustomDateItem:function(){
var customDateItem={"label":_('Custom time...'),"style":"customDateItem","callback":function(){this._popCustomDateTime()}.bind(this)};
return customDateItem;},
_popCustomDateTime:function(){
if(!this._haveMovedPopupDom){
this._customDateTimePopup.appendTo('body');
this._haveMovedPopupDom=true;}
this._customDateTimePopupObj=new Splunk.Popup(this._customDateTimePopup,{
title:_('Custom Time Range'),
pclass:'trpCustom',
inlineMode:true,
onDestroy:this._onPopupDestroy.bind(this)});
$('input:visible:enabled:first',this._customDateTimePopup).focus();},
_onPopupDestroy:function(){
this._customDateTimePopupObj=null;},
_enableDateTime:function(el){
$(el,this._customDateTimePopup).find('.customDate').datepicker('enable');
$(el,this._customDateTimePopup).find('input').prop('disabled',false);
$(el,this._customDateTimePopup).removeClass('dateTimeDisabled');},
_disableDateTime:function(el){
$(el,this._customDateTimePopup).find('.customDate').datepicker('disable');
$(el,this._customDateTimePopup).find('input').prop('disabled',true);
$(el,this._customDateTimePopup).addClass('dateTimeDisabled');},
_onApplyClick:function(){
if(this._applyCustomDateTime()){
this._customDateTimePopupObj.destroyPopup();}},
_onCancelClick:function(){
this._customDateTimePopupObj.destroyPopup();},
_applyCustomDateTime:function(){
var toDate=null;
var fromDate=null;
var errMsg=null;
var mode=$('.rangeType input[type="radio"]:checked',this._customDateTimePopup).val();
switch(mode){
case'relativeMode':
var relativeString=this._buildRelativeString();
this._fireCustom(relativeString,'now');
return true;
break;
case'realtimeMode':
var realtimeString=this._buildRealtimeString();
this._fireCustom(realtimeString,'rt');
return true;
break;
case'advancedMode':
var earliest=$('.advancedStart',this._customDateTimePopup).val()||null;
var latest=$('.advancedEnd',this._customDateTimePopup).val()||null;
this._fireCustom(earliest,latest);
return true;
break;
default:
if(!$('.earliestDateTime',this._customDateTimePopup).is('.dateTimeDisabled')){
fromDate=this._getDateWithTime('.earliestDate','.earliestTime');}
if(!$('.latestDateTime',this._customDateTimePopup).is('.dateTimeDisabled')){
toDate=this._getDateWithTime('.latestDate','.latestTime');}
if(fromDate&&toDate&&(fromDate>toDate)){
this._showDatepickerError(this.DATE_RANGE_ERROR_MSG);
return false;}else{
this._clearDatepickerErrors();
this._datePickerMode=true;
this._customEarliestDate=fromDate;
this._customLatestDate=toDate;
this._setActivatorText(fromDate,toDate);
this._fireAbsolute(fromDate,toDate);
return true;}
break;}},
_fireCustom:function(earliest,latest){
this._selectedRange=new Splunk.TimeRange(earliest,latest);
$('body').trigger('menuOpening');
if(Splunk.util.normalizeBoolean(this.getParam('searchWhenChanged'))){
this.pushContextToChildren();}else{
this.setChildContextFreshness(false);}
this._activator.text(this.CUSTOM_TIME_LABEL);},
_fireAbsolute:function(fromDate,toDate){
var f=Splunk.util.getConfigValue("SEARCH_RESULTS_TIME_FORMAT");
var earliestEpochTime=null;
if(fromDate)
{
var earliestDateTime=new splunk.time.DateTime(fromDate.strftime(f));
earliestDateTime.setTimeZone(this._timeZone);
earliestEpochTime=earliestDateTime.getTime();}
var latestEpochTime=null;
if(toDate)
{
var latestDateTime=new splunk.time.DateTime(toDate.strftime(f));
latestDateTime.setTimeZone(this._timeZone);
latestEpochTime=latestDateTime.getTime();}
this._selectedRange=new Splunk.TimeRange(earliestEpochTime,latestEpochTime);
$('body').trigger('menuOpening');
if(Splunk.util.normalizeBoolean(this.getParam('searchWhenChanged'))){
this.pushContextToChildren();}else{
this.setChildContextFreshness(false);}},
_getDateWithTime:function(datepicker,timefield){
dateWithTime=$(datepicker,this._customDateTimePopup).datepicker('getDate');
t=$(timefield,this._customDateTimePopup);
var hours=t.find('.hours').val()||0;
var minutes=t.find('.minutes').val()||0;
var seconds=t.find('.seconds').val()||0;
var milliseconds=t.find('.milliseconds').val()||0;
dateWithTime.setHours(hours,minutes,seconds,milliseconds);
return dateWithTime;},
getResults:function($super){
this._selectedRange=null;
return $super()},
renderResults:function(xmlDoc){
responseDict=JSON.parse(xmlDoc.toString());
var earliestEpochTime=responseDict["earliestEpochTime"]||null;
var latestEpochTime=responseDict["latestEpochTime"]||null;
var earliestOffset=null;
var latestOffset=null;
if(responseDict["earliestOffset"]){
earliestOffset=parseInt(responseDict["earliestOffset"][0],10);}
if(responseDict["latestOffset"]){
latestOffset=parseInt(responseDict["latestOffset"][0],10);}
this._selectedRange=new Splunk.TimeRange(earliestEpochTime,latestEpochTime,earliestOffset,latestOffset);
$('body').trigger('menuOpening');
if(Splunk.util.normalizeBoolean(this.getParam('searchWhenChanged'))){
this.pushContextToChildren();}else{
this.setChildContextFreshness(false);}},
getResultParams:function(){
var f=Splunk.util.getConfigValue("SEARCH_RESULTS_TIME_FORMAT")
var params={};
if(this._customEarliestDate)params["earliest"]=this._customEarliestDate.strftime(f);
if(this._customLatestDate)params["latest"]=this._customLatestDate.strftime(f);
return params;},
_showDatepickerError:function(errMsg){
this._clearDatepickerErrors();
$('.datepickerErrMsg',this._customDateTimePopup).append('<p>'+errMsg+'</p>');},
_clearDatepickerErrors:function(){
$('.datepickerErrMsg',this._customDateTimePopup).empty();},
_setActivatorText:function(fromDate,toDate){
var newText=null;
var hasFromDate=(fromDate instanceof Date);
var hasToDate=(toDate instanceof Date);
var isFromDay=(hasFromDate&&(fromDate.getHours()==0)&&(fromDate.getMinutes()==0)&&(fromDate.getSeconds()==0)&&(fromDate.getMilliseconds()==0));
var isToDay=(hasToDate&&(toDate.getHours()==0)&&(toDate.getMinutes()==0)&&(toDate.getSeconds()==0)&&(toDate.getMilliseconds()==0));
if(hasFromDate&&hasToDate)
{
if(isFromDay&&isToDay)
{
var toDatePrev=new Date(toDate.getFullYear(),toDate.getMonth(),toDate.getDate()-1);
if(fromDate.getTime()<toDatePrev.getTime())
newText=format_date(fromDate,"medium")+" - "+format_date(toDatePrev,"medium");
else
newText=format_date(fromDate,"medium");}}
else if(hasFromDate)
{
if(isFromDay)
newText=this.DATES_AFTER_TEXT+" "+format_date(fromDate,"medium");}
else if(hasToDate)
{
if(isToDay)
newText=this.DATES_BEFORE_TEXT+" "+format_date(toDate,"medium");}
if(!newText)
newText=this.CUSTOM_TIME_LABEL;
this._activator.text(newText);},
getModifiedContext:function(){
var range=null;
if(this._selectedRange){
range=this._selectedRange;}else{
this.logger.error("Assertion Failed - we have no selected range.  If this occurs with the calendar-pickers its a possible race condition.");
range=new Splunk.TimeRange();}
var context=this.getContext();
var search=context.get("search");
search.abandonJob();
search.setTimeRange(range);
context.set("search",search);
return context;},
onContextChange:function(){
if(!this.getContext().has("from_history"))
return;
var search=this.getContext().get("search");
var range=search.getTimeRange();
if(range&&!(range._constructorArgs[0]==null&&range._constructorArgs[1]==null)){
this._datePickerMode=false;
this._insertNewMenuItem(range);}},
applyContext:function(context){
var search=context.get("search");
var range=search.getTimeRange();
var RECONCILE_TIME_INTENTIONS=false;
if(RECONCILE_TIME_INTENTIONS){
var timeIntentionToString=function(search,intentionName){
var intention=search.getIntentionReference(intentionName);
if(intention){
var arg=intention["arg"];
return Splunk.TimeRange.relativeArgsToString(arg["count"],arg["unit"],arg["snapUnit"]);}
return false;}
var earliestIntentionTerm=timeIntentionToString(search,"earliesttime");
var latestIntentionTerm=timeIntentionToString(search,"latesttime");
var needToRenormalize=earliestIntentionTerm||latestIntentionTerm;
if(needToRenormalize){
var earliestArg=earliestIntentionTerm||range.getEarliestTimeTerms();
var latestArg=latestIntentionTerm||range.getLatestTimeTerms();
range=new Splunk.TimeRange(earliestArg,latestArg);}}
var earliest=range.getEarliestTimeTerms()||null;
var latest=range.getLatestTimeTerms()||null;
if(!this.isPageLoadComplete()){
if(earliest||latest){
var moduleInstance=this;
var foundAMatch=false;
var self=this;
this._menu.getMenu().find('.timeRangePreset a').each(function(){
var thisEarliest=$(this).attr(self.EARLIEST_TIME_ATTR)||null;
var thisLatest=$(this).attr(self.LATEST_TIME_ATTR)||null;
var thisRange=new Splunk.TimeRange(thisEarliest,thisLatest);
if(range.equalToRange(thisRange)){
moduleInstance._activator.text($(this).text())
moduleInstance._datePickerMode=false;
moduleInstance._selectedRange=range;
foundAMatch=true;
return true;}});
if(foundAMatch){
return;}
else{
this._insertNewMenuItem(range);
return;}}
this._selectedRange=new Splunk.TimeRange();
this._activator.text(this.ALL_TIME_LABEL);}else if(range&&!(range._constructorArgs[0]==null&&range._constructorArgs[1]==null)){
this._datePickerMode=false;
this._insertNewMenuItem(range);
this.baseContext=null;
this.pushContextToChildren();}
return false;},
_insertNewMenuItem:function(timeRange){
var newOption={};
var link=$("<a>").attr(this.EARLIEST_TIME_ATTR,timeRange.getEarliestTimeTerms()).attr(this.LATEST_TIME_ATTR,timeRange.getLatestTimeTerms()).text(timeRange.toConciseString())
if($(".customTimeRange",this.container).size()==3){
$(".customTimeRange:first",this.container).remove();}
$("<li>").addClass("timeRangePreset customTimeRange").append(link).appendTo($(".innerMenuWrapper",this.container)[0]);
this._selectedRange=timeRange;
if(timeRange.getDuration()==-1){
this._activator.text(timeRange.toConciseString());}else{
this._activator.text(this.CUSTOM_TIME_LABEL);}},
_onMenuClick:function(evt){
var t=evt.target;
if($(t).parent('li').hasClass('timeRangePreset')){
this._setSelectedRangeToPreset($(t));
this.setParam('default',this._getRawLabel($(t).text()));
if(Splunk.util.normalizeBoolean(this.getParam('searchWhenChanged'))){
this.pushContextToChildren();}else{
this.setChildContextFreshness(false);}
$('.timeRangeActivator',this.container).text($(t).text());}},
_setSelectedRangeToPreset:function(presetElement){
var earliest=presetElement.attr(this.EARLIEST_TIME_ATTR);
var latest=presetElement.attr(this.LATEST_TIME_ATTR);
this._selectedRange=new Splunk.TimeRange(earliest,latest);}});;}catch(e){var err="The module 'Splunk.Module.TimeRangePicker' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.TimeRangePicker",err);});}try{i18n_register({"catalog":{"+-About Splunk":"About Splunk","+-Done":"Done"},"plural":function(n){return n==1?0:1;}});
Splunk.Module.AppBar=$.klass(Splunk.Module,{
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.NEVER_ALLOW;
this.parentEnforcement=Splunk.Module.NEVER_ALLOW;
this.logger=Splunk.Logger.getLogger("Splunk.Module.AppBar");
var menuData=[];
var unitTestListing=[];
try{
menuData=this.parseNavConfig(this._params.menuData);}catch(e){
this.logger.error("Unable to parse JSON navConfig for appbar menu",e);}
unitTestListing=this._params.unitTestListing;
this.unitTestMenu=null;
this.mainMenus=[];
this.generateMainMenus(menuData);
this.generateUnitTestMenu(unitTestListing);
this.bindEventListeners();},
onViewDataChange:function(event,data){
if(data.navConfig){
try{
var menuData=this.parseNavConfig(data.navConfig);}catch(e){
this.logger.error("Unable to parse JSON navConfig for appbar menu",e);
return;}
this.removeMainMenus();
this.generateMainMenus(menuData);
this.logger.info("onViewDataChange fired, successfully reloaded main menu data in AppBar");}},
removeMainMenus:function(){
for(var i=0;i<this.mainMenus.length;i++){
try{
this.mainMenus[i].removeMenu();}catch(e){
this.logger.error("Could not remove mainMenus item with an index of",i);}}
this.mainMenus=[];},
transposeMenuData:function(menu,viewLabel,options){
var output=[];
options=options||{};
isTop=(options.hasOwnProperty("isTop"))?options.isTop:false;
isActive=(options.hasOwnProperty("isActive"))?options.isActive:false;
for(var i=0;i<menu.length;i++){
var menuEntry=menu[i];
var replacement={};
if(menuEntry.hasOwnProperty("submenu")){
var transpose=this.transposeMenuData(menuEntry.submenu,viewLabel,{isActive:isActive});
var subnode=transpose.output;
var isActive=transpose.isActive;
replacement["items"]=subnode;
replacement["label"]=(menuEntry.hasOwnProperty("label"))?menuEntry.label:"";}else{
if(viewLabel==menuEntry.label){
isActive=true;}
replacement=menuEntry;
if(menuEntry['sharing']=='user'){
replacement['style']='splUserCreated';}}
if(isTop&&isActive){
replacement["isActive"]=true;}
output.push(replacement);}
return{output:output,isActive:isActive};},
parseNavConfig:function(navConfig){
var transpose=this.transposeMenuData(navConfig,Splunk.util.getCurrentViewConfig().app.label,{isTop:true});
var menuData={};
for(var i=0;i<transpose.output.length;i++){
if(transpose.output[i].hasOwnProperty("items")){
menuData["navmenu_"+i]=transpose.output[i].items;}else{
continue;}}
return menuData;},
generateMainMenus:function(menuData){
for(var key in menuData){
if(menuData.hasOwnProperty(key)){
this.mainMenus.push(
new Splunk.MenuBuilder({
containerDiv:this.container,
menuDict:menuData[key],
activator:$('#'+key),
menuClasses:'splMenu-primary '+key}));}}},
generateUnitTestMenu:function(menuData){
this.unitTestMenu=new Splunk.MenuBuilder({
containerDiv:this.container,
menuDict:menuData,
activator:$('#appBarUnitTests'),
menuClasses:'splMenu-primary'});},
bindEventListeners:function(){
$('a.aboutLink').unbind('click');
$('a.aboutLink').click(function(event){
Splunk.Popup.AboutPopup($('.aboutPopupContainer'));});}});;}catch(e){var err="The module 'Splunk.Module.AppBar' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.AppBar",err);});}try{i18n_register({"catalog":{"+-(No apps available)":"(No apps available)","+-Manage apps...":"Manage apps..."},"plural":function(n){return n==1?0:1;}});
Splunk.Module.AccountBar=$.klass(Splunk.Module,{
MAX_URI_LENGTH_IE:2048,
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.NEVER_ALLOW;
this.parentEnforcement=Splunk.Module.NEVER_ALLOW;
var appList=this.getParam('appList')||[{'label':_('(No apps available)'),'uri':'','id':''}];
var launcherApp=this.getParam('launcherApp');
var canInstallApps=this.getParam('canInstallApps');
if(appList.length==0){
this.logger.error('Unable to construct app list; no apps found');}
appList.push({'divider':'splDivider'});
if(launcherApp){
appList.push(launcherApp);}
appList.push({'label':_('Manage apps...'),'uri':Splunk.util.make_url('manager',Splunk.util.getCurrentApp(),'apps','local')});
if(canInstallApps){
appList.push({'label':_('Find more apps...'),'uri':Splunk.util.make_url('manager',Splunk.util.getCurrentApp(),'apps','remote')});}
if($('#applicationsMenuActivator',this.container).length){
var appsMenu=new Splunk.MenuBuilder({
containerDiv:this.container,
menuDict:appList,
activator:$('#applicationsMenuActivator',this.container),
menuClasses:'splMenu-secondary'});}
$('.alerts_opener',container).click(function(){
Splunk.window.openAerts(this.href);
return false;});
$('.job_manager_opener',container).click(function(){
Splunk.window.openJobManager();
return false;});
var self=this;
$('.user_options_opener',container).click(function(){
var path=window.location.href.replace(/https?:\/\/[^\/]+\/[^\/]+/,"");
if(/authentication\/changepassword/.exec(path))
return false;
var redirectUrl=this.href+'&redirect_override='+encodeURIComponent(path);
if($.browser.msie&&redirectUrl.length>self.MAX_URI_LENGTH_IE){
redirectUrl=this.href+'&redirect_override='+encodeURIComponent(path.split("#")[0]);}
window.location=redirectUrl;
return false;});
$('.wall_opener',container).click(function(){
Splunk.Popup.Wall();
return false;});
$('.splIcon-close',container).click(function(){
window.close();
return false;});
var cancelJobsOnLogoClick=Splunk.util.normalizeBoolean(this._params.cancelJobsOnLogoClick);
if(cancelJobsOnLogoClick){
$('.appLogo',container).click(function(event){
var target_uri=$(this).attr("href");
var jobs=Splunk.Globals.Jobber.listJobs(function(job){
return(job.canBeAutoCancelled());});
if(jobs.length>0){
jobs.cancel(function(){
if(target_uri){
document.location=target_uri;
return true;}});
if(target_uri){
event.preventDefault();
return false;}}});}}});;}catch(e){var err="The module 'Splunk.Module.AccountBar' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.AccountBar",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.NullModule=$.klass(Splunk.Module,{
initialize:function($super,container){
$super(container);
this.hide(this.HIDDEN_MODULE_KEY);}});;}catch(e){var err="The module 'Splunk.Module.NullModule' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.NullModule",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.Module.Message=$.klass(Splunk.Module,{
EXCLUDE_LEVELS:[],
EXTERNAL_LINK_REX:/\[(\!?)(\w+\:\/\/[^\s]+)\s+([^\]]+)\]/g,
INTERNAL_LINK_REX:/\[\[(\!?)([^\|]+)\|([^\]]+)\]\]/g,
TARGET_BLANK_TOKEN_REX:/#~#!#~#/g,
TARGET_SAME_TOKEN_REX:/\s*#~##~#/g,
SERVER_DELETE_RESOURCE:Splunk.util.make_url("/api/messages/delete"),
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("message.js");
this.displayedMessages=[];
this.allMessages=[];
if(this._params['filter']=="*"){
this.maxQueueSize=20;
this.defaultDisplaySize=3;}else{
this.maxSize=parseInt(this._params['maxSize'],10);
this.defaultDisplaySize=this.maxSize;
this.maxQueueSize=this.maxSize;}
this.selectedDisplaySize=this.defaultDisplaySize;
this.clearOnJobDispatch=Splunk.util.normalizeBoolean(this._params['clearOnJobDispatch']);
this.defaults=this._params['default']||[];
this.filter=this._params['filter'];
this.levels={};
switch((""+this._params['level']).toLowerCase()){
case'*':
this.levels=null;
break;
default:
case'debug':
this.levels['debug']=1;
case'info':
this.levels['info']=1;
case'warn':
this.levels['warn']=1;
case'error':
this.levels['error']=1;
case'fatal':
this.levels['fatal']=1;}
this.list=$(".MessageList",this.container);
var self=this;
$("a.remove",this.container).live('click',function(){
var message_id=$(this).attr("data-id");
if($(this).hasClass("splunkd")){
$.ajax({
type:"POST",
url:self.SERVER_DELETE_RESOURCE,
dataType:"text",
data:"message_id="+message_id,
error:function(){self.onMessageDeleted(message_id);},
success:function(){self.onMessageDeleted(message_id);}});}else{
self.onMessageDeleted(message_id);}
return false;});
$("a.showall",this.container).live('click',function(){
self.onShowAll();});
$("a.hide",this.container).live('click',function(){
self.onHide();});
this.messenger=Splunk.Messenger.System.getInstance();
this.messenger.receive(this.filter,this.unshift.bind(this),undefined,true);
this.sendDefaults();
if(this.clearOnJobDispatch){
$(document).bind('jobDispatched',this.onJobDispatched.bind(this));}},
onServerMessagesError:function(data){
alert("Could not delete message: ");},
clear:function(){
var levels=arguments[0]||[];
var allMessages=[];
this.logger.warn("Clearing messages with the exclusion of levels",levels);
for(var i=0;i<this.allMessages.length;i++){
var message=this.allMessages[i];
if($.inArray(message.level,levels)!=-1){
allMessages.push(message);}}
this.allMessages=allMessages;
this.displayedMessages=this.allMessages.slice(0,this.selectedDisplaySize);
this.list.html(this.getHTMLTransform());
$(document).trigger("messageClear",this.container);},
handleControlMessage:function(message){
switch(message.content){
case'CLEAR':
this.clear();
break;
default:
break;}},
onJobDispatched:function(event,context){
this.clear(this.EXCLUDE_LEVELS);},
getHTMLTransform:function(){
var html=[];
for(var i=0;i<this.displayedMessages.length;i++){
var message=this.displayedMessages[i];
html.push('<li class="message '+message.level+'">');
html.push('<div style="float:left">');
html.push(this.getWikiTranform(message.content));
html.push('</div>');
var myClass='';
if(isNaN(message.id)){
myClass='splunkd';
html.push('<div style="float:right"><a href="#" data-id="'+Splunk.util.escapeHtml(message.id)+'" class="remove '+myClass+'">x</a></div>');}
var dataId=Splunk.util.escapeHtml(message.id||"");
html.push('<div style="clear:both"/>');
html.push('</li>');}
var numhiddenmessages=this.allMessages.length-this.selectedDisplaySize;
if(numhiddenmessages>0){
var content=""+numhiddenmessages+" messages not shown.";
html.push('<li class="info">');
html.push(this.getWikiTranform(content));
html.push('<a href="#" class="showall"> Show all </a>');
html.push('</li>');}
if(this.selectedDisplaySize==this.maxQueueSize&&this.allMessages.length>this.defaultDisplaySize){
html.push('<li class="info"> <a href="#" class="hide">Hide messages</a> </li>');}
return html.join('');},
getWikiTranform:function(str){
var text=Splunk.util.escapeHtml(str);
text=text.replace(this.EXTERNAL_LINK_REX,'<a href="$2" #~#$1#~#>$3</a>');
text=text.replace(this.INTERNAL_LINK_REX,this._generateInternalLink);
text=text.replace(this.TARGET_BLANK_TOKEN_REX,'target="_blank"');
text=text.replace(this.TARGET_SAME_TOKEN_REX,'');
return text;},
_generateInternalLink:function(str,blank_token,url,text){
url=Splunk.util.make_url(url);
return'<a href="'+url+'"#~#'+blank_token+'#~#>'+text+'</a>';},
sendDefaults:function(){
for(var i=0;i<this.defaults.length;i++){
var level=this.defaults[i].level||null;
var content=this.defaults[i].content||null;
var className=this.defaults[i].className||null;
if(level&&content&&className){
this.messenger.send(level,className,content);}else{
this.logger.error("Invalid default settings for entry with level:",level,"content:",content,"className:",className);}}},
onMessageDeleted:function(message_id){
for(var j=0;j<this.allMessages.length;j++){
var id=this.allMessages[j].id;
if(message_id==id){
this.allMessages.splice(j,1);
j--;}}
this.displayedMessages=this.allMessages.slice(0,this.selectedDisplaySize);
this.list.html(this.getHTMLTransform());
$(document).trigger("messageUnshift",this.container);},
onShowAll:function(){
this.selectedDisplaySize=this.maxQueueSize;
this.displayedMessages=this.allMessages.slice(0,this.selectedDisplaySize);
this.list.html(this.getHTMLTransform());
$(document).trigger("messageUnshift",this.container);},
onHide:function(){
this.selectedDisplaySize=this.defaultDisplaySize;
this.displayedMessages=this.allMessages.slice(0,this.selectedDisplaySize);
this.list.html(this.getHTMLTransform());
$(document).trigger("messageUnshift",this.container);},
unshift:function(){
var previousMessages=[].concat(this.allMessages);
for(var i=arguments.length-1;i>-1;i--){
var message=arguments[i];
if(message.control){
this.handleControlMessage(message);
continue;}
if(this.levels&&!(message.level.toLowerCase()in this.levels)){
continue;}
for(var j=0;j<this.allMessages.length;j++){
var content=this.allMessages[j].content;
var level=this.allMessages[j].level;
if(message.content==content&&message.level==level){
this.allMessages.splice(j,1);
j--;}}
this.allMessages=[{level:message.level,content:message.content,id:message.id}].concat(this.allMessages);}
this.allMessages.splice(this.maxQueueSize,this.allMessages.length-this.maxQueueSize);
this.displayedMessages=this.allMessages.slice(0,this.selectedDisplaySize);
if(!Splunk.util.objectSimilarity(previousMessages,this.displayedMessages)){
this.list.html(this.getHTMLTransform());
$(document).trigger("messageUnshift",this.container);}
return $("li",this.list).length;}});;}catch(e){var err="The module 'Splunk.Module.Message' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.Message",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.TabSwitcher=$.klass(Splunk.Module.AbstractSwitcher,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("TabSwitcher.js");
this.messenger=Splunk.Messenger.System.getInstance();
this._lockMessages=[];
if(this._mode=="serializeAll"){
$("ul",this.container).hide();}},
onLoadStatusChange:function($super,statusInt){
$super(statusInt);
if(!this._alreadyDealtWithTabs&&!this.isPageLoadComplete()&&statusInt>=Splunk.util.moduleLoadStates.WAITING_FOR_CONTEXT){
if(this._mode=="serializeAll"){
$("ul li:last-child",this.container).remove();
$("ul",this.container).show();}
this._alreadyDealtWithTabs=true;}},
addChild:function($super,child){
$super(child);
var childIndex=this._children.length-1;
var childTitle=this._titles[childIndex];
var childAltTitle=this._altTitles[childIndex];
this.logger.debug(this.container.attr('id')+' - adding option "'+childTitle+'"');
var liElement=$("<li/>").click(function(evt){
this.onTabClick(childIndex);}.bind(this)).append(this.createTabElement(childTitle,childAltTitle)).appendTo($("ul",this.container));
var activeChildTitle=this._params["selected"]||this._titles[0];
if(childTitle==activeChildTitle){
liElement.addClass("selected");
this._activeChildIndex=childIndex;}},
createTabElement:function(childTitle,childAltTitle){
var child=$("<a/>").text(childTitle);
if(childAltTitle){
child.attr("title",childAltTitle);}
return child;},
onTabClick:function(childIndex){
if(this.isDisabled())return false;
if(this.isChildLocked(childIndex)){
if(this._lockMessages[childIndex]){
var message=this._lockMessages[childIndex].message;
var messageTarget=this._lockMessages[childIndex].messageTarget;
this.messenger.send('info',messageTarget,message);}
return false;}else{
delete this._lockMessages[childIndex];}
this.setActiveChild(childIndex);
if(this._mode!="serializeAll"){
this.pushContextToChildren();}},
getChildTab:function(childIndex){
var tabNodes=$("li",this.container);
return $(tabNodes[childIndex])},
setActiveChild:function($super,childIndex){
$("li.selected",this.container).removeClass("selected");
this.getChildTab(childIndex).addClass("selected");
$super(childIndex);},
makeLastChildAlwaysVisible:function($super){
this.getChildTab(this._children.length-1).remove();
$super();},
isChildLocked:function(childIndex){
return this.getChildTab(childIndex).hasClass("disabled");},
lockChild:function(childIndex,message,messageTarget){
this.getChildTab(childIndex).addClass("disabled");
this._lockMessages[childIndex]={message:message,messageTarget:messageTarget};},
unlockChild:function(childIndex){
this.getChildTab(childIndex).removeClass("disabled");}});;}catch(e){var err="The module 'Splunk.Module.TabSwitcher' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.TabSwitcher",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.ShowHideHeader=$.klass(Splunk.Module.AbstractSwitcher,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("ShowHideHeader.js");
this.container.click(this.onClick.bind(this));},
onLoadStatusChange:function($super,statusInt){
$super(statusInt);
if(Splunk.util.normalizeBoolean(this._params["hideChildrenOnLoad"])){
this.setActiveChild(1);}},
setActiveChild:function($super,childIndex){
if(childIndex==0){
$("h2",this.container).removeClass("closed");}else if(childIndex==1){
$("h2",this.container).addClass("closed");}
else{
this.logger.error("Error. Since it is only for showing and hiding a single branch of the tree, ",this.moduleType," can only have 2 switchable children.")}
$super(childIndex);},
onClick:function(){
this.setActiveChild((this._activeChildIndex+1)%2);
if(this._mode!="serializeAll"){
this.pushContextToChildren();}}});;}catch(e){var err="The module 'Splunk.Module.ShowHideHeader' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.ShowHideHeader",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.Paginator=$.klass(Splunk.Module.DispatchingModule,{
EVENTS_ENTITY_NAME:"events",
RESULTS_ENTITY_NAME:"results",
SETTINGS_MAP_ENTITY_NAME:"settings",
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("paginator.js");
this.mergeLoadParamsIntoContext("results",["count","maxPages"]);
this.entityName=this._params['entityName'];
this.length=0;
this.offset=0;
this.resultsContainer=$(".ResultsContainer",this.container);
if($("script",this.container).length)
this.template=doT.template($("script",this.container)[0].innerHTML);
this.bindUIEvents();},
validateHierarchy:function($super){
var context=this.getContext();
if(!context.has("results.upstreamPaginator")){
return $super();}},
onBeforeJobDispatched:function(search){
if(this.entityName==this.EVENTS_ENTITY_NAME){
search.setMinimumStatusBuckets(1);}},
bindUIEvents:function(){
this.container.bind("click",this.onUIEvent.bind(this));},
getEntityCount:function(){
var count;
var context=this.getContext();
var search=context.get("search");
switch(this.entityName){
case this.EVENTS_ENTITY_NAME:
count=search.getEventAvailableCount();
break;
case this.RESULTS_ENTITY_NAME:
count=search.job.getResultCount();
break;
case this.SETTINGS_MAP_ENTITY_NAME:
count=this.length;
break;
default:
this.logger.error("Invalid module entityName value of",this.entityName);
count=0;
break;}
return count;},
getModifiedContext:function(){
var context=this.getContext();
context.set("results.offset",this.offset);
if(this.entityName==this.SETTINGS_MAP_ENTITY_NAME){
context.set("results.totalCountCallback",function(length){
this.length=(length!=null)?length:this.length;
this.getResults();}.bind(this));}
context.set("results.upstreamPaginator",this);
return context;},
getResults:function(){
var context=this.getContext();
var options={
max_items_page:context.get('results.count'),
max_pages:context.get('results.maxPages'),
item_offset:this.offset};
var paginator=new Splunk.paginator.Google(this.getEntityCount(),options);
var render=this.template({p:paginator});
this.resultsContainer.html(render);},
hasCapacity:function(){
var context=this.getContext();
return($("li.page",this.container).length<context.get("results.maxPages"));},
onJobDone:function(event){
if(this.getEntityCount()==0){
this.resultsContainer.html("");}},
onJobProgress:function(event){
if(this.hasCapacity()&&this.getEntityCount()>0){
this.getResults();}},
onOffsetChange:function(element){
element=$(element);
var resource=element.attr("href");
var query=resource.split("#")[1];
try{
this.offset=parseInt(Splunk.util.queryStringToProp(query).offset,10);}catch(err){
this.logger.error("Could not parse offset from uri.",err);
return false;}
this.pushContextToChildren();
this.getResults();
return false;},
onContextChange:function(){
this.offset=0;
var context=this.getContext();
var search=context.get("search");
if(search.isJobDispatched()){
if(this.getEntityCount()==0){
this.resultsContainer.html('');}}
var hasUpstreamPaginator=context.has("results.upstreamPaginator");
if(hasUpstreamPaginator&&context.has("results.offset")){
this.offset=context.get("results.offset");}
if(this.offset!=0&&context.has("results.offset")&&parseInt(context.get("results.offset"),10)>this.offset){
this.offset=0;}
this.getResults();},
onUIEvent:function(event){
var eventType=event.type;
var eventTarget=event.target;
if((eventType==="click")&&$(eventTarget).is("a")){
if($(eventTarget).hasClass('disabled'))return false;
var context=this.getContext();
var upstreamPaginatorReference=context.get("results.upstreamPaginator");
if(upstreamPaginatorReference){
upstreamPaginatorReference.onOffsetChange(eventTarget);
$(window).scrollTop(Math.min($(window).scrollTop(),upstreamPaginatorReference.container.offset().top));}
return this.onOffsetChange(eventTarget);}},
renderResults:function($super,htmlFragment){
if(!htmlFragment){
this.resultsContainer.html("");}else{
$super(htmlFragment);}},
resetUI:function(){
this.offset=0;
this.length=0;
this.resultsContainer.html("");},
requiresDispatch:function($super,search){
var entityName=this.getParam('entityName');
if(entityName==this.SETTINGS_MAP_ENTITY_NAME)return false;
return $super(search);}});;}catch(e){var err="The module 'Splunk.Module.Paginator' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.Paginator",err);});}try{i18n_register({"catalog":{"+-Build report":"Build report","+-%s scanned event":"%s scanned event","+-Finalize search":"Finalize search","+-%s result":"%s result","+-&#8805; %s matching event":"&#8805; %s matching event","+-Resume search":"Resume search","+-Your search job has been backgrounded. To retrieve it, visit the Jobs page.":"Your search job has been backgrounded. To retrieve it, visit the Jobs page.","+-%s matching event":"%s matching event","+-auto-pausing in <strong>%s</strong> second":"auto-pausing in <strong>%s</strong> second","+-Your search is finalizing...":"Your search is finalizing...","+-Your search is pausing...":"Your search is pausing...","+-Auto-pause":"Auto-pause","+-%s%% complete":"%s%% complete","+-Your search is paused.":"Your search is paused.","+-Show report":"Show report"},"plural":function(n){return n==1?0:1;}});Splunk.Module.JobStatus=$.klass(Splunk.Module.DispatchingModule,{
ALERT_WIZARD_CLASS_NAME:"alertwizard",
BACKGROUND_CLASS_NAME:"background",
CANCEL_CLASS_NAME:"cancel",
CLOSE_CLASS_NAME:"close",
DASHBOARD_WIZARD_CLASS_NAME:"dashboardwizard",
FINALIZE_CLASS_NAME:"finalize",
OUTPUT_CLASS_NAME:"output",
PAUSE_CLASS_NAME:"pause",
UNPAUSE_CLASS_NAME:"unpause",
RESULTS_LINK_CLASS_NAME:"resultsLink",
SAVE_CLASS_NAME:"save",
SAVE_WIZARD_CLASS_NAME:"savewizard",
DISABLED_CLASS_NAME:"splButton-disabled",
FINALIZING_STATE:"finalizing",
RUNNING_STATE:"running",
COMPLETE_STATE:"complete",
EMPTY_STATE:"empty",
PAUSED_STATE:"paused",
SAVED_SEARCH_POPUP_SELECTOR:".savedsearchpopup",
SAVED_SEARCH_POPUP_TITLE:"Save Search",
SHARE_LINK_FORM_CONTAINER_CLASS:'.shareLinkForm',
SHARE_LINK_FORM_TITLE:"Save and Share Results",
DISABLED_CLASS:"disabled",
EVENTTYPE_FORM_CONTAINER_CLASS:'.eventtypeForm',
EVENTTYPE_FORM_TITLE:_('Save As Event Type'),
REPORTBUILDER_LINK_CLASS:"resultsLink",
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("Splunk.Module.JobStatus");
this.container.click(this.onUIEvent.bind(this));
this.currentState=this.EMPTY_STATE;
this.headerClass="";
this.links=$(".jobActions",this.container);
this.header=$(".splHeader",this.container);
this._autoPauseTimer=null;
this._isAutoPauseTriggered=false;
this.currentRealTimeSearchState=false;
this.alertLink=$("."+this.ALERT_WIZARD_CLASS_NAME,this.links);
this.backgroundLink=$("."+this.BACKGROUND_CLASS_NAME,this.links);
this.cancelLink=$("."+this.CANCEL_CLASS_NAME,this.links);
this.closeLink=$("."+this.CLOSE_CLASS_NAME,this.links);
this.dashboardLink=$("."+this.DASHBOARD_WIZARD_CLASS_NAME,this.links);
this.finalizeLink=$("."+this.FINALIZE_CLASS_NAME,this.links);
this.outputLink=$("."+this.OUTPUT_CLASS_NAME,this.links);
this.pauseLink=$("."+this.PAUSE_CLASS_NAME,this.links);
this.saveLink=$("."+this.SAVE_CLASS_NAME,this.links);
this.saveWizardLink=$("."+this.SAVE_WIZARD_CLASS_NAME,this.links);
this.unpauseLink=$("."+this.UNPAUSE_CLASS_NAME,this.links);
this.currentView=Splunk.util.getCurrentView();
this.canScheduleSearch=Splunk.util.normalizeBoolean($('input[name="can_schedule_search"]',this.container).attr('value'));
this.setupResultsLink();
$(document).bind('jobPaused',function(event,job){
this._controlStatus(event,job,'pause');}.bind(this));
$(document).bind('jobFinalized',function(event,job){
this._controlStatus(event,job,'finalize');}.bind(this));
$(document).bind('jobUnpaused',function(event,job){
this._controlStatus(event,job,'unpause');}.bind(this));
this.printBtn=$(".print",this.container);
this.printBtn.click(function(e){
if(this.printBtn.hasClass(this.DISABLED_CLASS_NAME)){
return false;}
$(document).trigger("PrintPage");
e.preventDefault();
return false;}.bind(this));
this.inspectorBtn=$(".inspector",this.container);
this.inspectorBtn.click(function(e){
if(this.inspectorBtn.hasClass(this.DISABLED_CLASS_NAME)){
return false;}
var context=this.getContext();
var search=context.get("search");
var searchId=search.job.getSearchId();
if(searchId){
Splunk.window.openJobInspector(search.job.getSearchId());}
return false;}.bind(this));
this.querys=Splunk.util.queryStringToProp(window.location.search);
this.messenger=Splunk.Messenger.System.getInstance();
this._filter=Splunk.util.normalizeBoolean(this.getParam("actionsMenuFilter"))||'flashtimeline';
if(this._filter=='dashboard'){
var viewObjectMode=Splunk.util.getCurrentViewConfig()['view']['objectMode'];
if(viewObjectMode=='SimpleDashboard'){
this._filter='dashboard-SimpleDashboard';}}
this.isEditReport=false;
if(typeof this.querys.s!=='undefined'&&this._filter=='reportformat'){
this.isEditReport=true;}
this.buildSaveMenu();
this.buildCreateMenu();},
buildSaveMenu:function(){
this.saveMenuItemsDict=[];
if(this.isEditReport){
this.saveMenuItemsDict.push({"label":_("Save report"),"style":"save-report",
callback:function(event){
var context=this.getContext();
var search=context.get("search");
var savedSearchName=search.getSavedSearchName();
this.onOverwriteReportClick(event,savedSearchName);}.bind(this),"showInFilter":['reportformat'],"enabled":["done","progress"]});
this.saveMenuItemsDict.push({"label":_("Save report as..."),"style":"save-report-as",
callback:function(event){
var context=this.getContext();
var search=context.get("search");
Splunk.Popup.SaveSearchWizard(search,{title:_("Save Report")});}.bind(this),"showInFilter":['reportformat'],"enabled":["done","progress"]});}else{
this.saveMenuItemsDict.push({"label":_("Save report..."),"style":"save-report",
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.SaveSearchWizard(search,{
title:_('Save Report'),
onDone:function(e){
var target=$(e.target);
if(!target.is('a')){
target=target.closest('a');}
var searchName=target.data('searchname');
Splunk.util.redirect_to(
('app'+'/'+Splunk.util.getCurrentApp()+'/'+'report_builder_display'),
{'s':encodeURIComponent(searchName)});}});}.bind(this),"showInFilter":['reportformat','reportview'],"enabled":["done","progress"]});}
this.saveMenuItemsDict.push({"label":_("Save search..."),"style":"save-search",
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.SaveSearchWizard(search);}.bind(this),"showInFilter":['flashtimeline','charting'],"enabled":["done","progress"]});
this.saveMenuItemsDict.push({"divider":"actionsMenuDivider","showInFilter":['flashtimeline','charting','reportformat','reportview'],"enabled":"*"});
this.saveMenuItemsDict.push({"label":_("Save results"),"style":"save-results",
callback:function(event){
if(this.baseContext){
var search=this.getContext().get("search");
var self=this;
search.job.save(
function(){
self.messenger.send("info","splunk.search",_("These search results have been saved. You can retrieve them later via the jobs manager."));},
function(){
self.messenger.send("error","splunk.search",_("Failed to save search results.  The search job may have expired."));});}}.bind(this),"showInFilter":['flashtimeline','charting','reportformat','reportview'],"enabled":["done","progress"]});
this.saveMenuItemsDict.push({"label":_("Save & share results..."),"style":"share-results",
callback:function(event){
var formContainer=$(this.SHARE_LINK_FORM_CONTAINER_CLASS)[0];
var title=this.SHARE_LINK_FORM_TITLE;
var search=this.getContext().get("search");
Splunk.Popup.createShareLinkForm(formContainer,title,search);}.bind(this),"showInFilter":['flashtimeline','charting','reportformat','reportview'],"enabled":["done","progress"]});
this.saveMenu=new Splunk.MenuBuilder({
menuDict:this.getEnabledMenuData(this.saveMenuItemsDict,"*"),
activator:$('.save',this.container),
menuClasses:'splMenu-primary',
filter:this._filter});},
buildCreateMenu:function(){
this.createMenuItemsDict=[];
if(this.isEditReport){
$('.create',this.container).hide();}
this.createMenuItemsDict.push({"label":_("Dashboard panel..."),"style":"create-dashboard-panel",
callback:function(){
var search=this.getContext().get("search");
var vizType="event";
if(search.job.areResultsTransformed()){
vizType="table";
this.withEachDescendant(function(module){
var mc=module.getModifiedContext();
if(module.moduleId.indexOf("JSChart")!=0)
return;
if(!mc.has("charting.chart")||!$(module.container).is(":visible"))
return;
vizType=mc.get("charting.chart");});}
Splunk.Popup.DashboardWizard(search,{panel_type:vizType});}.bind(this),"showInFilter":['flashtimeline','charting','reportformat'],"enabled":["done","progress"]});
if(this.canScheduleSearch){
this.createMenuItemsDict.push({"label":_("Alert..."),"style":"create-alert",
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.AlertWizard(search);}.bind(this),"showInFilter":['flashtimeline','charting'],"enabled":["done","progress"]});}
this.createMenuItemsDict.push({"label":_("Report..."),"style":"create-report","enabledWhen":"progress","callback":function(event){
return this.onBuildReport(event);}.bind(this),"showInFilter":['flashtimeline'],"enabled":["done","progress"]});
this.createMenuItemsDict.push({"label":_("Event type..."),"style":"create-event-type","alwaysEnabled":true,
callback:function(){
var context=this.getContext();
var search=context.get("search");
var formContainer=$(this.EVENTTYPE_FORM_CONTAINER_CLASS,this.container)[0];
Splunk.Popup.createEventtypeForm(formContainer,this.EVENTTYPE_FORM_TITLE,search);}.bind(this),"showInFilter":['flashtimeline','charting'],"enabled":"*"});
this.createMenuItemsDict.push({"label":_("Scheduled PDF..."),"style":"create-schedule-pdf","callback":this.schedulePDF.bind(this),"showInFilter":['dashboard','dashboard-SimpleDashboard'],"enabled":(Splunk.util.getCurrentViewConfig()['view']&&Splunk.util.getCurrentViewConfig()['view']['hasAutoRun'])?"*":[]});
if(this.canScheduleSearch){
this.createMenuItemsDict.push({"label":_("Scheduled search..."),"style":"create-schedule-digest",
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.ScheduleDigestWizard(search,{title:_("Create Scheduled Search")});}.bind(this),"showInFilter":['flashtimeline'],"enabled":["progress","done"]});
this.createMenuItemsDict.push({"label":_("Scheduled report..."),"style":"create-schedule-digest",
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.ScheduleDigestWizard(search,{title:_("Create Scheduled Report")});}.bind(this),"showInFilter":['charting','reportformat'],"enabled":["progress","done"]});}
this.createMenu=new Splunk.MenuBuilder({
menuDict:this.getEnabledMenuData(this.createMenuItemsDict,"*"),
activator:$('.create',this.container),
menuClasses:'splMenu-primary',
filter:this._filter});},
onOverwriteReportClick:function(event,savedSearchName){
var context=this.getContext();
var search=context.get("search");
var savedSearchName=search.getSavedSearchName();
if(!savedSearchName){
this.messenger.send('fatal','splunk.search',
sprintf(_('Tried to update "%s" but it was not loaded into the current view'),savedSearchName));
return;}
var viewstateId=search.getViewStateId();
if(!viewstateId){
this.messenger.send('fatal','splunk.search',
sprintf(_('Tried to update "%s" but it did not have an existing viewstate'),savedSearchName));
return;}
Splunk.Globals.ModuleLoader.commitViewParams(viewstateId,true);
this.messenger.send('info','splunk.search',
_('Successfully updated view settings'));},
getEnabledMenuData:function(menuData,enabled){
var wildCard="*";
var validEnabledValues=["progress","done",wildCard];
if($.inArray(enabled,validEnabledValues)==-1){
this.logger.warn("Invalid menu enabled value of",enabled,", setting default to wildCard");
enabled=wildCard;}
var newMenu=[];
for(var i=0;i<menuData.length;i++){
var oldMenuEntry=menuData[i];
if(!oldMenuEntry.hasOwnProperty("enabled")||wildCard==oldMenuEntry.enabled||$.inArray(enabled,oldMenuEntry.enabled)!=-1){
newMenu.push(oldMenuEntry);}else{
var newMenuEntry={"label":oldMenuEntry.label,"style":this.DISABLED_CLASS,"showInFilter":oldMenuEntry.showInFilter};
newMenu.push(newMenuEntry);}}
return newMenu;},
updateMenu:function(enabled){
if(this.lastEnabled&&this.lastEnabled==enabled){
return;}
this.lastEnabled=enabled;
var createMenuData=this.getEnabledMenuData(this.createMenuItemsDict,enabled);
this.createMenu.updateMenu(createMenuData);
var saveMenuData=this.getEnabledMenuData(this.saveMenuItemsDict,enabled);
this.saveMenu.updateMenu(saveMenuData);},
_controlStatus:function(event,job,action){
var jobSID=job.getSID();
var context=this.getContext();
if(!context)return;
var search=context.get('search');
if(!search||!search.job)return;
var sid=search.job.getSID();
if(sid==jobSID)this.onJobStatusChange(event,action);},
setState:function(state,optionalJob){
if(this.currentState!=state){
allLinks=this.links.find("a");
this.enableLinks(allLinks);
this.pauseLink.show();
this.unpauseLink.hide();
switch(state){
case this.EMPTY_STATE:
this.disableLinks(allLinks);
break;
case this.RUNNING_STATE:
break;
case this.PAUSED_STATE:
this.unpauseLink.show();
this.pauseLink.hide();
this.disableLinks(this.backgroundLink);
break;
case this.FINALIZING_STATE:
case this.COMPLETE_STATE:
this.disableLinks(this.pauseLink);
this.disableLinks(this.finalizeLink);
this.disableLinks(this.backgroundLink);
this.disableLinks(this.cancelLink);
break;
default:
break;}
if(this.currentRealTimeSearchState==true)
this.disableLinks(this.backgroundLink);}
this.currentState=state;
this.updateHeader(state,optionalJob||null);},
disableLinks:function(links){
links.addClass(this.DISABLED_CLASS_NAME);
links.attr('tabindex',"-1");},
enableLinks:function(links){
links.removeClass(this.DISABLED_CLASS_NAME);
links.removeAttr('tabindex');},
setRealTimeSearchState:function(bool){
if(bool&&this.currentRealTimeSearchState!=bool){
this.disableLinks(this.backgroundLink);}else if(this.currentRealTimeSearchState!=bool){
this.enableLinks(this.backgroundLink);}
this.currentRealTimeSearchState=bool;},
getHeaderFragment:function(name,job){
var returnDict={"name":name};
switch(name){
case"events":
var events=job.getEventCount();
if(job.isDone()){
returnDict["text"]=sprintf(ungettext('%s matching event','%s matching events',events),format_number(events));}else{
returnDict["text"]=sprintf(ungettext('&#8805; %s matching event','&#8805; %s matching events',events),format_number(events));}
break;
case"scanned":
var scanned=job.getScanCount();
returnDict["text"]=sprintf(ungettext('%s scanned event','%s scanned events',scanned),format_number(scanned));
break;
case"progress":
var progress=Math.round(job.getDoneProgress()*100);
returnDict["text"]=sprintf(_('%s%% complete'),progress);
break;
case"results":
var results=job.getResultCount();
returnDict["text"]=sprintf(ungettext('%s result','%s results',results),format_number(results));
break;
default:
this.logger.error("getHeaderFragment - unknown name provided - ",name);
returnDict["text"]="";
break;}
return returnDict;},
updateHeader:function(className,optionalJob){
var headers=[];
this.header.removeClass(this.headerClass);
var job=optionalJob||this.getContext().get("search").job;
switch(className){
case"finalizing":
headers.push({"name":"","text":_('Your search is finalizing...')});
this.headerClass="running";
break;
case"pausing":
headers.push({"name":"","text":_('Your search is pausing...')});
break;
case"paused":
headers.push({"name":"","text":_('Your search is paused.')});
this.headerClass="paused";
break;
case"running":
this.headerClass="running";
headers.push(this.getHeaderFragment("events",job));
headers.push(this.getHeaderFragment("scanned",job));
break;
case"complete":
this.headerClass="complete";
headers.push(this.getHeaderFragment("events",job));
break;
case"empty":
break;
default:
this.logger.warn("there should be no unspecified cases in this switch. className=",className);
break;}
this.header.addClass(this.headerClass);
this.header.html('');
if(headers.length>0){
h2=$("<h2>").html(headers[0]["text"]).addClass(headers[0]["name"]);
var onDeckCircle=$("<div>");
onDeckCircle.append(h2);
for(var i=1;i<headers.length;i++){
onDeckCircle.append($('<span class="splPipe">|</span>'));
emElement=$("<em>").addClass(headers[i]["name"]).text(headers[i]["text"]);
onDeckCircle.append(emElement);}
this.header.html(onDeckCircle.html());}},
onContextChange:function($super){
this.header.html('');
this.show();
this.setRealTimeSearchState(false);
var context=this.getContext();
var search=context.get("search");
var job=search.job;
var events=search.job.getEventCount();
if(job.isDone()){
this.setState(this.COMPLETE_STATE);}else if(job.isCanceled()){
this.setState(this.EMPTY_STATE);}else if(job.isPaused()){
this.setState(this.PAUSED_STATE);}else if(job.isFinalized()){
this.setState(this.COMPLETE_STATE);}else if(job.isRunning()){
this.setState(this.RUNNING_STATE);}else{
this.setState(this.EMPTY_STATE);}
if(
Splunk.util.normalizeBoolean(this.querys['auto_pause'])&&this._autoPauseTimer==null&&job.isRunning()&&this.getParam('autoPauseInterval')&&!this._isAutoPauseTriggered){
this._isAutoPauseTriggered=true;
this.startAutoPause();}
this.disableLinks(this.printBtn);
this.disableLinks(this.inspectorBtn);
$super();},
onBeforeJobDispatched:function(search){
var jobOverride=new Splunk.Job("*");
this.setState(this.RUNNING_STATE,jobOverride);
this.cancelAutoPause();},
onJobDone:function(event){
var context=this.getContext();
var search=context.get("search");
var events=search.job.getEventCount();
if(this._params["hideOnJobDone"]=="True"){
this.hide();
this.setState(this.EMPTY_STATE);}else{
this.setState(this.COMPLETE_STATE);}
this.cancelAutoPause();
this.updateMenu("done");
this.updateMenu("done");
this.enableLinks(this.printBtn);},
onJobProgress:function(){
var context=this.getContext();
var search=context.get("search");
if(!search.job.isPaused()&&!search.job.isFinalized()){
this.setState(this.RUNNING_STATE);
this.updateResultsLink(search.job.getSearchId());}
this.setRealTimeSearchState(search.job.isRealTimeSearch());
this.enableLinks(this.inspectorBtn);
this.updateMenu("progress");},
onJobStatusChange:function(event,status){
switch(status){
case"pause":
this.setState(this.PAUSED_STATE);
this.enableLinks(this.inspectorBtn);
break;
case"unpause":
this.setState(this.RUNNING_STATE);
break;
case"finalize":
this.setState(this.FINALIZING_STATE);
break;
case"cancel":
this.setState(this.EMPTY_STATE);
this.updateMenu("*");
this.disableLinks(this.inspectorBtn);
break;
default:
this.logger.warn("Job status change that is not being monitored.");
break;}
this.cancelAutoPause();},
onSave:function(event){
var formContainer=$(this.SAVED_SEARCH_POPUP_SELECTOR)[0];
var title=this.SAVED_SEARCH_POPUP_TITLE;
Splunk.Popup.createSavedSearchForm(formContainer,title,this.getContext().get("search"));
return false;},
onUIEvent:function(event){
var eventType=event.type;
var eventTarget=$(event.target);
for(var i=0;i<4;i++){
if(!eventTarget.is('a')){
eventTarget=eventTarget.parent();}else{
event.target=eventTarget;
break;}}
if((eventType==="click")&&eventTarget.is("a")){
if(eventTarget.hasClass(this.DISABLED_CLASS_NAME)){
return false;}
this.cancelAutoPause();
var context=this.getContext();
var search=context.get("search");
var job=search.job;
if(eventTarget.hasClass(this.PAUSE_CLASS_NAME)){
job.pause();
return false;}else if(eventTarget.hasClass(this.UNPAUSE_CLASS_NAME)){
job.unpause();
return false;}else if(eventTarget.hasClass(this.FINALIZE_CLASS_NAME)){
job.finalize();
return false;}else if(eventTarget.hasClass(this.CANCEL_CLASS_NAME)){
if(search.isJobDispatched()){
job.cancel();}
return false;}else if(eventTarget.hasClass(this.BACKGROUND_CLASS_NAME)){
job.save();
if(job.isPreviewable)job.setPreviewable(false);
$.each(this.getModulesInTree(),function(idx,module){
module.reset();});
var messenger=Splunk.Messenger.System.getInstance();
var app=job['_eai:acl']['app']||'search';
var view=job['_request']['ui_dispatch_view']||'flashtimeline';
var url=sprintf('/app/%s/%s?sid=%s',app,view,job.getSID());
messenger.send('info',"splunk.search.job",_('Your search job has been backgrounded. To retrieve it, visit [['+url+'| this page]]. Backgrounded jobs expire after 1 week.'));
return false;}else if(eventTarget.hasClass(this.CLOSE_CLASS_NAME)){
this.setState(this.EMPTY_STATE);
return false;}else if(eventTarget.hasClass(this.DASHBOARD_WIZARD_CLASS_NAME)){
Splunk.Popup.DashboardWizard(search);
return false;}else if(eventTarget.hasClass(this.ALERT_WIZARD_CLASS_NAME)){
Splunk.Popup.AlertWizard(search);
return false;}else if(eventTarget.hasClass(this.SAVE_WIZARD_CLASS_NAME)){
Splunk.Popup.SaveSearchWizard(search);
return false;}}
return true;},
resetUI:function(){
this.setState(this.EMPTY_STATE);
this.updateMenu("*");},
setupResultsLink:function(){
var paramDict=this._params[this.RESULTS_LINK_CLASS_NAME];
if(!paramDict){
return false;}
var link=$("."+this.RESULTS_LINK_CLASS_NAME,this.container);
link.find('.splIconicButtonLabel').text(paramDict["label"]);
if(paramDict.hasOwnProperty("popup")){
link.attr("rel","popup");}},
updateResultsLink:function(sid){
var context=this.getContext();
var search=context.get("search");
var link=$("."+this.RESULTS_LINK_CLASS_NAME,this.container);
var paramDict=this._params[this.RESULTS_LINK_CLASS_NAME];
if(link&&paramDict){
var viewTarget=paramDict["viewTarget"];
if(search.job.areResultsTransformed()&&paramDict.hasOwnProperty("transformedResultsViewTarget")){
viewTarget=paramDict["transformedResultsViewTarget"];
link.find('.splIconicButtonLabel').text(_("Show report"));}
else{
link.find('.splIconicButtonLabel').text(_("Build report"));}
var path=Splunk.util.make_url("/app/",Splunk.util.getCurrentApp(),viewTarget);
var url=path+"?"+$.param({"sid":sid});
link.attr("href",url);
link.show();}},
onBuildReport:function(event){
var eventTarget=$(event.target);
var viewTarget=this._params[this.RESULTS_LINK_CLASS_NAME]["viewTarget"];
var context=this.getContext();
var search=context.get("search");
var args={};
search.job.setAsAutoCancellable(false);
args["base_sid"]=search.job.getSearchId();
if(search.job.areResultsTransformed()){
if(this._params[this.RESULTS_LINK_CLASS_NAME].hasOwnProperty("transformedResultsViewTarget")){
viewTarget=this._params[this.RESULTS_LINK_CLASS_NAME]["transformedResultsViewTarget"];}}else{
var placeholderIntention={"name":"plot","arg":{"mode":"timechart","fields":[["count","__events"]]}};
search.abandonJob();
search.addIntention(placeholderIntention);}
search.sendToView(viewTarget,args,false,false,{autosize:true});
return false;},
startAutoPause:function(){
this._autoPauseInterval=this.getParam('autoPauseInterval')*1000;
$(".autoPauseStatus",this.container).show();
if(this._autoPauseInterval<1){
this.logger.warn(sprintf('invalid autoPauseInterval interval (%s); skipping auto-pause',this._autoPauseInterval));
return;}
this._autoPauseTimer=setTimeout(this.updateAutoPauseTimer.bind(this),100);
this._autoPauseStartTime=new Date();
$('.autoPauseToggle',this.container).click(function(){
this.cancelAutoPause();
return false;}.bind(this));},
cancelAutoPause:function(){
clearTimeout(this._autoPauseTimer);
this._autoPauseTimer=null;
$('.autoPauseText',this.container).html('');
$(".autoPauseStatus",this.container).hide();},
updateAutoPauseTimer:function(){
var elapsedTime=parseInt((new Date())-this._autoPauseStartTime,10);
var timeRemaining=Math.round((this._autoPauseInterval-elapsedTime)/1000);
if(timeRemaining<1){
this.cancelAutoPause();
this.openAutoPauseDialog();
return;}
$('.autoPauseText',this.container).html(sprintf(ungettext('Auto-pausing in <strong>%s</strong> second.','Auto-pausing in <strong>%s</strong> seconds.',
timeRemaining),
timeRemaining));
this._autoPauseTimer=setTimeout(this.updateAutoPauseTimer.bind(this),500);},
openAutoPauseDialog:function(){
var context=this.getContext();
var search=context.get("search");
if(search.job.isDone()){
return;}
search.job.pause();
var popupContents=$('.autoPause',this.container)[0];
var popupInstance=new Splunk.Popup(popupContents,{
title:_('Auto-pause'),
buttons:[
{
label:_('Resume search'),
type:'secondary',
callback:function(evt){
var context=this.getContext();
var search=context.get("search");
search.job.unpause();
return true;}.bind(this)},
{
label:_('Finalize search'),
type:'primary',
callback:function(evt){
var context=this.getContext();
var search=context.get("search");
search.job.finalize();
return true;}.bind(this)}]});
$('.splButton-primary',popupInstance.getPopup()).focus();},
schedulePDF:function(){
if(Splunk.util.getCurrentViewConfig()['view']['hasAutoRun']){
return Splunk.Popup.SchedulePDF($('.pdfPopup'),function(error){
this.messenger.send('error',this.moduleType,error);}.bind(this));}else{
return function(){};}}});;}catch(e){var err="The module 'Splunk.Module.JobStatus' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.JobStatus",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.SimpleResultsHeader=$.klass(Splunk.Module.DispatchingModule,{
initialize:function($super,container){
$super(container);
this._entityName=this._params["entityName"]||"(required entityName unset)";
this._headerFormat=this._params["headerFormat"]||"(required headerFormat unset) %s";
this._replacementTokens=Splunk.util.discoverReplacementTokens(this._headerFormat);},
requiresTransformedResults:function(){
return(this._entityName=="results");},
onBeforeJobDispatched:function(search){
if(this._entityName=="events")search.setMinimumStatusBuckets(1);},
onJobProgress:function(){
var search=this.getContext().get("search");
var count=this.getEntityCount(search);
this.setCountHeader(count,search.job.isDone());},
onContextChange:function(){
var search=this.getContext().get("search");
var newSID=search.job.getSearchId();
if(!this._previousSID||this._previousSID!=newSID){
this._previousSID=newSID;}
this.onJobProgress();},
getEntityCount:function(search){
switch(this._entityName){
case"events":
return search.getEventCount();
case"results":
return search.job.getResultCount();
case"scanned":
return search.job.getScanCount();
default:
this.logger.error("fell into default case of switch entityName=",this._entityName);
break;}},
setCountHeader:function(count,isDone){
var context=this.getContext();
var modifier=(isDone)?"":"≥ ";
var countStr=modifier+Splunk.util.getCommaFormattedNumber(count)
var finalStr=this._headerFormat;
if(finalStr.indexOf("%(count)s")!=-1){
finalStr=sprintf(finalStr,{count:countStr});}
for(var i=0;i<this._replacementTokens.length;i++){
var token=this._replacementTokens[i];
var replacer=new RegExp("\\$"+token+"\\$");
var value;
switch(token){
case"count":
value=countStr;
break;
case"time":
value=context.get("search").getTimeRange().toConciseString();
break;
default:
value=context.get(token);
break;}
finalStr=Splunk.util.replaceTokens(finalStr,replacer,value);}
$(".headerText",this.container).text(finalStr);},
resetUI:function(){
this.setCountHeader(0,true);
$(".headerText",this.container).text("")}});;}catch(e){var err="The module 'Splunk.Module.SimpleResultsHeader' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.SimpleResultsHeader",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.AbstractPagedModule=$.klass(Splunk.Module.DispatchingModule,{
initialize:function($super,container){
$super(container);
this.sortField=null;
this.sortAsc=null;
this.INTENTION_NEGATE_TERM="negateterm";
this.INTENTION_ADD_TERM="addterm";
this.INTENTION_CLEAR_TERM="clear";
this.MODIFIER_CUSTOM_MAP=[
{"userAgentRex":/Macintosh/,"negate":"altKey","replace":"metaKey"},
{"userAgentRex":/Linux.*Chrome/,"negate":"ctrlKey","replace":"shiftKey"},
{"userAgentRex":/Linux/,"negate":"ctrlKey","replace":"metaKey"},
{"userAgentRex":/Windows/,"negate":"altKey","replace":"ctrlKey"}];
this.MODIFER_DEFAULT={"userAgentRex":/.*/,"negate":"altKey","replace":"metaKey"};
var modifier=this.getModifier();
this.negateModifier=modifier.negate;
this.replaceModifier=modifier.replace;
this._PAGINATION_KEYS=["count","maxLines","offset"];
this._PAGINATION_KEY_NAMESPACE="results";
this._previousSID=null;
this.mergeLoadParamsIntoContext(this._PAGINATION_KEY_NAMESPACE,this._PAGINATION_KEYS);},
getResultParams:function($super){
var params=$super();
var context=this.getContext();
for(var i=0;i<this._PAGINATION_KEYS.length;i++){
var rawKey=this._PAGINATION_KEYS[i];
var namespacedKey=this._PAGINATION_KEY_NAMESPACE+"."+rawKey;
if(context.has(namespacedKey)){
params[rawKey]=context.get(namespacedKey);}}
var fields=this.getNormalizedFields();
if(fields.length>0){
params["field_list"]=fields;}
var INCONSISTENT_NAMES={"maxLines":"max_lines"};
for(var name in INCONSISTENT_NAMES){
if(params.hasOwnProperty(name)){
var patchedName=INCONSISTENT_NAMES[name];
params[patchedName]=params[name];
delete params[name];}}
var search=context.get("search");
var range=search.getTimeRange();
if(range.isSubRangeOfJob()){
params.earliest_time=range.getEarliestTimeTerms();
params.latest_time=range.getLatestTimeTerms();}
if(search.job.getEventSorting()=="realtime"&&this.getParam("entityName")=="events"&&!this.getSortField()){
var totalAvailable=search.getEventAvailableCount();
var reversedOffset=Math.max(totalAvailable-params.offset-params.count,0);
var reversedCount=Math.min(params.count,totalAvailable-params.offset);
params.offset=reversedOffset;
params.count=reversedCount;
params.reverse_order=1;}
return params;},
getSortField:function(){return this.sortField;},
setSortField:function(field){this.sortField=field;},
getSortAsc:function(){return this.sortAsc;},
setSortAsc:function(isAscending){this.sortAsc=isAscending;},
getNormalizedFields:function(){
var loadParamFields=this.getParam("fields");
var contextFields=this.getContext().get("results.fields")||[];
if(loadParamFields&&contextFields.length>0){
this.logger.error("Possible misconfiguration -  'fields' is both specified directly on ",this.moduleType," and specified upstream. Local param will be ignored.");}
if(contextFields.length>0){
return contextFields;}
else if(loadParamFields){
return Splunk.util.stringToFieldList(loadParamFields);}
return[];},
onContextChange:function(){
var context=this.getContext();
var search=context.get("search");
if(search.job.getSearchId()!=this._previousSID){
this.resetUI();
this._previousSID=search.job.getSearchId();}
if(search.isJobDispatched()&&(search.job.isDone()||(search.job.getEventCount()>0))){
this.getResults();}},
getModifier:function(){
var userAgent=navigator.userAgent||"";
var modifierMatch=null;
for(var i=this.MODIFIER_CUSTOM_MAP.length-1;i>-1;i--){
var modifier=this.MODIFIER_CUSTOM_MAP[i];
if(userAgent.search(modifier.userAgentRex)!=-1){
modifierMatch=modifier;}}
if(!modifierMatch){
this.logger.warn("Could not find matching MODIFIER_CUSTOM_MAP, reverting to MODIFER_DEFAULT.");
modifierMatch=this.MODIFER_DEFAULT;}
return modifierMatch;},
getIntentionName:function(event){
return(event[this.negateModifier])?this.INTENTION_NEGATE_TERM:this.INTENTION_ADD_TERM;},
getKeydownMutatedIntention:function(intention,event){
return(event[this.replaceModifier])?{arg:intention,name:this.INTENTION_CLEAR_TERM}:intention;},
passIntention:function(intention){
var context=new Splunk.Context();
var search=new Splunk.Search("*");
search.addIntention(intention);
context.set("search",search);
this.passContextToParent(context);}});
Splunk.Module.AbstractPagedModule.isAbstract=true;;}catch(e){var err="The module 'Splunk.Module.AbstractPagedModule' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.AbstractPagedModule",err);});}try{i18n_register({"catalog":{"+-%(statOpName)s of %(fieldName)s":"%(statOpName)s of %(fieldName)s","+-Frequency":"Frequency","+-%(statOpName)s of events":"%(statOpName)s of events"},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.YAxisTitleFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("y_axis_title_formatter.js");
this._formElement=$("input",this.container).bind("change",this.handleInputChange.bind(this));
this._contextKey="charting.secondaryAxisTitle.text";},
getGenericTitle:function(){
var context=this.getContext();
var search=context.get("search");
var plotIntention=search.popIntention("plot");
var title="";
if(plotIntention&&plotIntention["arg"].hasOwnProperty("mode")){
var mode=plotIntention["arg"]["mode"];
if(mode=="timechart"){
if(plotIntention["arg"].hasOwnProperty("fields")){
var fieldsList=plotIntention["arg"]["fields"];
if(fieldsList.length==1){
var statOpName=fieldsList[0][0];
var fieldName=fieldsList[0][1];
if(fieldName=="__events"){
return sprintf(_("%(statOpName)s of events"),{statOpName:statOpName});}else{
return sprintf(_("%(statOpName)s of %(fieldName)s"),{statOpName:statOpName,fieldName:fieldName});}}}}else if(mode=="top"||mode=="rare"){
if(plotIntention["arg"].hasOwnProperty("fields")){
title=_("Frequency");}else{
this.logger.error("top/rare mode, but no fields specified");}}}
return title;},
getModifiedContext:function(){
var context=this.getContext();
var value=this.escapePropertyManagerControlChars(this._formElement.val())
context.set(this._contextKey,value);
return context;},
onContextChange:function($super){
if(!this._formElement.val()||this._formElement.val()==this._lastGenericTitle){
var title=this.getGenericTitle();
this._lastGenericTitle=title;
this._formElement.val(title);
this.setParam("default",title);}
$super();},
isCompatibleWithContext:function(){
var context=this.getContext();
if(!context.has("charting.chart"))return true;
var incompatibleChartTypes={'radialGauge':1,'fillerGauge':1,'markerGauge':1,'pie':1,'ratioBar':1}
return!incompatibleChartTypes.hasOwnProperty(context.get('charting.chart'));}});;}catch(e){var err="The module 'Splunk.Module.YAxisTitleFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.YAxisTitleFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.SplitModeFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("SplitModeFormatter.js");
this._contextKey="charting.layout.splitSeries";
this._safeDefault="false";},
isCompatibleWithIntention:function(plotIntention){
return true;},
isCompatibleWithContext:function(){
var context=this.getContext();
if(!context.has("charting.chart"))return true;
var relevantChartTypes={"area":1,"bar":1,"column":1,"line":1};
return relevantChartTypes.hasOwnProperty(context.get("charting.chart"));}});;}catch(e){var err="The module 'Splunk.Module.SplitModeFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.SplitModeFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.AxisScaleFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("axis_scale_formatter.js");
this._contextKey="charting.secondaryAxis.scale";
this._safeDefault="";},
isCompatibleWithContext:function(){
var context=this.getContext();
if(!context.has("charting.chart"))return true;
var incompatibleChartTypes={'radialGauge':1,'fillerGauge':1,'markerGauge':1,'pie':1,'ratioBar':1}
if(incompatibleChartTypes.hasOwnProperty(context.get('charting.chart'))){
return false;}
if(!context.has("charting.chart.stackMode"))return true;
var value=context.get("charting.chart.stackMode");
if(value=="stacked"||value=="stacked100"){
return false;}else{
return true;}}});;}catch(e){var err="The module 'Splunk.Module.AxisScaleFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.AxisScaleFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.StackModeFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("StackModeFormatter.js");
this._contextKey="charting.chart.stackMode";
this._safeDefault="none";},
isCompatibleWithIntention:function(plotIntention){
if(plotIntention["arg"]["mode"]=="userEntered")return true;
if(plotIntention["arg"]["mode"]!="chart"&&plotIntention["arg"]["mode"]!="timechart")return false;
if(plotIntention["arg"]["splitType"]=="none")return false;
return true;},
isCompatibleWithContext:function(){
var context=this.getContext();
if(!context.has("charting.chart"))return true;
var relevantChartTypes={"area":1,"bar":1,"column":1};
return relevantChartTypes.hasOwnProperty(context.get("charting.chart"));}});;}catch(e){var err="The module 'Splunk.Module.StackModeFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.StackModeFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.XAxisTitleFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("x_axis_title_formatter.js");
this._formElement=$("input",this.container).bind("change",this.handleInputChange.bind(this));
this._contextKey="charting.primaryAxisTitle.text";},
getGenericTitle:function(){
var context=this.getContext();
var search=context.get("search");
var plotIntention=search.popIntention("plot");
var title="";
if(plotIntention&&plotIntention["arg"].hasOwnProperty("mode")){
var mode=plotIntention["arg"]["mode"];
if(mode=="timechart"){
title="time";}else if(mode=="top"||mode=="rare"){
if(plotIntention["arg"].hasOwnProperty("fields")){
title=plotIntention["arg"]["fields"];
if(typeof title=="object"&&title.hasOwnProperty('clauses')){
title=title['clauses'][0];}else if(typeof title=="object"){
title='';}}else{
this.logger.error("top/rare mode, but no fields specified");}}}
return title;},
getModifiedContext:function(){
var context=this.getContext();
var value=this.escapePropertyManagerControlChars(this._formElement.val())
context.set(this._contextKey,value);
return context;},
onContextChange:function($super){
if(!this._formElement.val()||this._formElement.val()==this._lastGenericTitle){
var title=this.getGenericTitle();
this._lastGenericTitle=title;
this._formElement.val(title);
this.setParam("default",title);}
$super();},
isCompatibleWithContext:function(){
var context=this.getContext();
if(!context.has("charting.chart"))return true;
var incompatibleChartTypes={'radialGauge':1,'fillerGauge':1,'markerGauge':1,'pie':1,'ratioBar':1}
return!incompatibleChartTypes.hasOwnProperty(context.get('charting.chart'));}});;}catch(e){var err="The module 'Splunk.Module.XAxisTitleFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.XAxisTitleFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.LegendFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("legend_formatter.js");
this._contextKey="charting.legend.placement";},
isCompatibleWithContext:function(){
var context=this.getContext();
if(!context.has("charting.chart"))return true;
var incompatibleChartTypes={'radialGauge':1,'fillerGauge':1,'markerGauge':1,'pie':1}
return!incompatibleChartTypes.hasOwnProperty(context.get('charting.chart'));}});;}catch(e){var err="The module 'Splunk.Module.LegendFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.LegendFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.ChartTypeFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("chart_type_formatter.js");
this._contextKey="charting.chart";
this.optionCompatibilityKey="mode";
this.optionCompatibilityTable={"timechart":{"values":["line","area","column"],"default":"line"},"chart":{"values":["column","line","area","bar","ratioBar","pie","scatter","bubble","radialGauge","fillerGauge","markerGauge"],"default":"line"},"top":{"values":["column","bar","pie"],"default":"bar"},"rare":{"values":["column","bar","pie"],"default":"bar"}};},
setCompatibleDefaults:function(){
var context=this.getContext();
var search=context.get("search");
if(search.getViewStateId())return false;
var plotIntention=search.getIntentionReference("plot");
if(plotIntention&&plotIntention["arg"]){
var mode=plotIntention["arg"]["mode"];
switch(mode){
case'timechart':
var statOpsForColumn={"sum":1};
var fields=plotIntention["arg"]["fields"];
var statop=fields[0][0];
if(statOpsForColumn.hasOwnProperty(statop)){
this._formElement.val("column");}else if(this.optionCompatibilityTable[mode]['values'].indexOf(this._formElement.val())==-1){
this._formElement.val("line");}
break;
case'top':
case'rare':
this._formElement.val("bar");
break;
default:
break;}
this.setParam('default',this._formElement.val(),true);}},
applyContext:function(context){
this.setCompatibleDefaults();},
onContextChange:function($super){
this.withEachOption(function(i,element){
this.enableOption($(element));}.bind(this));
$super();
if(Splunk.util.normalizeBoolean(this.getParam("ensureCompatibleType"))){
var context=this.getContext();
var search=context.get("search");
var match=search.toString().match(/.*\|\s*(chart|timechart|stats|top|rare|ctable|contingency|table)/);
if(match){
var type=match[1];
if(this.optionCompatibilityTable.hasOwnProperty(type)){
var compat=this.optionCompatibilityTable[type];
var val=this.getParam("default");
var legalValues=compat["values"];
this.withEachOption(function(i,element){
if(legalValues.indexOf($(element).val())==-1){
this.disableOption($(element));
if($(element).val()==val){
this._formElement.val(compat["default"]);
this.setParam('default',this._formElement.val(),true);}}}.bind(this));}}}},
pushContextToChildren:function($super,explicitContext){
$super(explicitContext);
var parent=this.parent;
while(parent){
if(parent.updateHistory){
parent.updateHistory();}
parent=parent.parent;}},
enableCompatibleOptions:function(){
if(!this.isPageLoadComplete()){
this.setCompatibleDefaults()}
var context=this.getContext();
var search=context.get("search");
var plotIntention=search.getIntentionReference("plot");
if(plotIntention&&plotIntention["arg"]){
var defaultValue=false;
var key=this.optionCompatibilityKey;
var table=this.optionCompatibilityTable;
var keyValue=plotIntention["arg"][key];
if(table.hasOwnProperty(keyValue)){
defaultValue=table[keyValue]["default"];
var legalValues=table[keyValue]["values"];
this.withEachOption(function(i,element){
if(legalValues.indexOf($(element).val())!=-1){
this.enableOption($(element));}else{
this.disableOption($(element));}}.bind(this));}}else{
this.enableAllOptions();}
this.disableOption($("option[value='bubble']",this.container));},
withEachOption:function(callback){
this._formElement.find("option").each(function(i,element){
callback(i,element);});},
enableOption:function(element){
element.prop('disabled',false);},
disableOption:function(element){
element.prop("disabled",true);},
enableAllOptions:function(){
this.withEachOption(function(i,element){
this.enableOption($(element));}.bind(this))}});;}catch(e){var err="The module 'Splunk.Module.ChartTypeFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.ChartTypeFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.YAxisRangeMaximumFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("secondary_axis_range_maximum_formatter.js");
this._formElement=$("input",this.container).bind("change",this.handleInputChange.bind(this));
this._contextKey="charting.secondaryAxis.maximumNumber";},
isCompatibleWithContext:function(){
var context=this.getContext();
var relevantChartTypes={"area":1,"line":1,"bar":1,"column":1,"scatter":1};
return relevantChartTypes.hasOwnProperty(context.get("charting.chart"));}});;}catch(e){var err="The module 'Splunk.Module.YAxisRangeMaximumFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.YAxisRangeMaximumFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.YAxisRangeMinimumFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("secondary_axis_range_minimum_formatter.js");
this._formElement=$("input",this.container).bind("change",this.handleInputChange.bind(this));
this._contextKey="charting.secondaryAxis.minimumNumber";},
isCompatibleWithContext:function(){
var context=this.getContext();
var relevantChartTypes={"area":1,"line":1,"bar":1,"column":1,"scatter":1};
return relevantChartTypes.hasOwnProperty(context.get("charting.chart"));}});;}catch(e){var err="The module 'Splunk.Module.YAxisRangeMinimumFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.YAxisRangeMinimumFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.NullValueFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("null_value_formatter.js");
this._contextKey="charting.chart.nullValueMode";},
isCompatibleWithContext:function(){
var context=this.getContext();
if(!context.has("charting.chart"))return true;
var relevantChartTypes={"area":1,"line":1};
return relevantChartTypes.hasOwnProperty(context.get("charting.chart"));}});;}catch(e){var err="The module 'Splunk.Module.NullValueFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.NullValueFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.ChartTitleFormatter=$.klass(Splunk.Module.BaseChartFormatter,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("chart_title_formatter.js");
this._formElement=$("input",this.container).bind("change",this.handleInputChange.bind(this));
this._contextKey="charting.chartTitle";},
getModifiedContext:function(){
var context=this.getContext();
context.set(this._contextKey,this._formElement.val());
return context;}});;}catch(e){var err="The module 'Splunk.Module.ChartTitleFormatter' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.ChartTitleFormatter",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.JSChart=$.klass(Splunk.Module.DispatchingModule,{
LEADING_UNDERSCORE_PREFIX:"VALUE_",
DRILLDOWN_VISIBILITY_KEY:"JSChartInteractionValidity",
CATEGORY_LABEL_CUTOFF:80,
DEFAULT_MAX_SERIES:50,
MANUAL_RESIZE_EVENT:'ChartManualResize',
DISPLAY_REFLOW_EVENT:'Splunk.Events.REDRAW',
PANEL_DROP_EVENT:'Splunk.Events.PANEL_DROP',
initialize:function($super,container){
$super(container);
this._selection=null;
this._enableDrilldown=false;
this._isVisible=true;
this.renderMonitor=false;
this.updateId=-1;
this.sid=0;
this.resultsCount=1000;
this.pp=false;
this.customPPWasAdded=false;
this.offset=false;
this.properties={};
this.redrawNeeded=false;
this.legendFieldList=[];
this.legendFieldMap={};
this.currentData=false;
this.requestId=0;
this.chart=false;
this.resultsAreStale=false;
this.chartingLibLoaded=false;
this.hasPendingDraw=false;
if(Splunk.util.getConfigValue('JSCHART_TEST_MODE',false)===true){
this.properties['testMode']=true;}
this.drilldownPrefix=this.getParam("drilldownPrefix");
this.moduleId=$(container).attr('id');
this.$moduleElement=$('.JSChartContainer',$(container));
this.chartContainer=($('<div class="highcharts-placeholder"></div>').css({
height:'100%',
width:'100%'}).appendTo(this.$moduleElement))[0];
var jsBasePath=Splunk.util.make_url('/static/js');
var that=this;
$script([jsBasePath+'/contrib/highcharts.js',jsBasePath+'/js_charting.js'],'jschart_dependencies');
$script.ready('jschart_dependencies',function(){
that.chartingLibLoaded=true;
that.colorPalette=new Splunk.JSCharting.ListColorPalette();
if(that.hasPendingDraw){
that.draw(that.updateId);
that.hasPendingDraw=false;}});
if(Splunk.util.normalizeBoolean(this.getParam("enableResize"))){
this.enableResizable();}
Splunk.Legend.register(this.moduleId);
this.legendManager={
setLabels:function(labels){
Splunk.Legend.setLabels(this.moduleId,labels);}.bind(this),
getLabelIndex:function(label){
return Splunk.Legend.getLabelIndex(label);},
numLabels:function(){
return Splunk.Legend.numLabels();}};
Splunk.Legend.addEventListener("labelIndexMapChanged",function(){
if(this.chart&&this.chart.needsColorPalette){
this.applyColorsAndDraw(this.legendFieldList,this.pendingCallback);}}.bind(this));
this.setProperty("enableChartClick",this._enableDrilldown);
this.setProperty("enableLegendClick",this._enableDrilldown);
this.logger=Splunk.Logger.getLogger("js_chart.js");
$(document).bind("PrintStart",this.onPrintStart.bind(this));
$(document).bind("PrintEnd",this.onPrintEnd.bind(this));
$(document).bind(this.DISPLAY_REFLOW_EVENT,this.onDisplayReflow.bind(this));
this.onDisplayReflow();
$(document).bind(this.PANEL_DROP_EVENT,function(event,data){
if($.contains(data.droppedElement,this.container[0])){
this.onPanelDrop();}}.bind(this));
this.sniffCssStyles();},
onLoadStatusChange:function($super,statusInt){
$super(statusInt);
if(statusInt==Splunk.util.moduleLoadStates.WAITING_FOR_HIERARCHY){
this.hideDescendants(this.DRILLDOWN_VISIBILITY_KEY+"_"+this.moduleId);}},
onPrintStart:function(){
this.resize();},
onPrintEnd:function(){
this.resize();},
requiresTransformedResults:function(){
return true;},
enableResizable:function(){
if(!($.browser.safari&&$.browser.version<"526")){
this.$moduleElement.resizable({
autoHide:true,
helper:"ui-resizable-helper",
handles:"s",
stop:this.onResizeStop.bind(this)});
this.$moduleElement.mouseup(
function(event){
$(this).width('100%');});}},
onResizeStop:function(event,ui){
$(this.chartContainer).height(ui.size.height);
this.resize();
$(event.target).width('100%');
$(document).trigger(this.MANUAL_RESIZE_EVENT);
this.setParam('height',ui.size.height+"px");},
onDisplayReflow:function(){
var newChartHeight,
parentMaxHeight=this.container.parent().css('max-height');
if(parentMaxHeight==='none'){
if(!this.previousChartHeight){
return;}
newChartHeight=this.previousChartHeight;
this.previousChartHeight=undefined;}
else{
if(!this.previousChartHeight){
this.previousChartHeight=$(this.chartContainer).height();}
newChartHeight=parentMaxHeight;}
this.container.css({'max-height':parentMaxHeight});
$(this.chartContainer).height(newChartHeight);
this.resize();
if(this.chart&&this.chart.hcChart){
var self=this;
$(this.chartContainer).bind('mouseover.postReflowNudge',function(){
$(self.chart.hcChart.container).focus().trigger('click');
$(self).unbind('.postReflowNudge');});}},
onPanelDrop:function(){
if(this.chart&&$.browser.msie&&$.browser.version in{"6.0":true,"7.0":true,"8.0":true}){
this.updateId++;
this.pushDataToChart(this.updateId);}},
addChild:function($super,child){
this._enableDrilldown=true;
this.setProperty("enableChartClick",true);
this.setProperty("enableLegendClick",true);
return $super(child);},
getResultParams:function($super){
var params=$super();
var context=this.getContext();
var search=context.get("search");
if(!this.sid){
this.logger.error(this.moduleType,"Assertion Failed. getResultParams was called, but searchId is missing from my job.");}
params.sid=this.sid;
params.count=this.resultsCount;
params.showOffset=1;
params.segmentation='raw';
params.output_mode='json_cols';
if(this.pp){
params.search=this.pp;}
if(this.offset){
params.offset=this.offset;}
return params;},
getResultURL:function(params){
var context=this.getContext();
var search=context.get("search");
var uri=Splunk.util.make_url('/splunkd/search/jobs/',this.sid,
(search.job.isDone())?'/results':'/results_preview');
uri+='?'+Splunk.util.propToQueryString(params);
return uri;},
renderResults:function(response){
this.updateId++;
if(response){
if(this.requestID!=this.properties['jobID']){
this.destroyChart();
this.requestID=this.properties['jobID'];}
this.response=response;
if(this.response.columns.length>this.DEFAULT_MAX_SERIES){
this.response.columns=response.columns.slice(0,this.DEFAULT_MAX_SERIES);
this.response.fields=response.fields.slice(0,this.DEFAULT_MAX_SERIES);
this.response.numSeriesTruncated=true;}
if(this.resultsAreTopOrRare(this.response)){
if(this._params["maxRowsForTop"]){
var maxRowsForTop=parseInt(this._params["maxRowsForTop"],10);
if(!isNaN(maxRowsForTop)){
this.response=this.sliceResultsBySeriesLength(this.response,maxRowsForTop);}}
this.setProperty("fieldHideList",["percent"]);}
else{
this.setProperty("fieldHideList",null);}}
if(!this.chart||this.redrawNeeded){
this.draw(this.updateId);}
else{
this.pushDataToChart(this.updateId);}},
resultsAreTopOrRare:function(response){
for(var i=0;i<response.fields.length;i++){
if(response.fields[i]==="_tc"){
return true;}}
return false;},
sliceResultsBySeriesLength:function(response,howMany){
var sliced=$.extend(true,{},response);
for(var i=0;i<response.columns.length;i++){
sliced.columns[i]=response.columns[i].slice(0,howMany);}
return sliced;},
onContextChange:function(){
$('.messageContainer',this.container).hide().html('');
this.hideDescendants(this.DRILLDOWN_VISIBILITY_KEY+"_"+this.moduleId);
this._selection=null;
var context=this.getContext();
var search=context.get("search");
var sid=context.get('charting.data.jobID')||search.job.getSearchId();
this.extractPropertiesFromContext(context,search,sid);
var resultCount=search.job.getResultCount();
var searchIsRealTime=search._range._relativeArgs.latest.isRealTime;
var sidHasChanged=false;
var shouldRedraw=(resultCount>0);
if(this.sid!=sid){
if(this.sid!=0){
this.destroyChart();
this.response=false;}
this.sid=sid;
shouldRedraw=false;
sidHasChanged=true;}
if(this.resultsAreStale&&(resultCount||searchIsRealTime)){
this.getResults();
this.resultsAreStale=false;}
else if(shouldRedraw){
this.updateId++;
setTimeout(function(){
this.redrawIfNeeded(this.updateId);}.bind(this),0);}},
extractPropertiesFromContext:function(context,search,sid){
if(context.get('charting.data.offset')){
var offset=parseInt(context.get('charting.data.offset'),10);
if(!isNaN(offset)){
this.offset=offset;}}
if(context.get('charting.data.count')){
var count=parseInt(context.get('charting.data.count'),10);
if(!isNaN(count)){
this.resultsCount=count;}}
if(sid!=null){
this.setProperty("jobID",encodeURIComponent(encodeURIComponent(sid)));}
else{
this.setProperty("jobID",sid);}
if(search.job.isDone()){
if(!this.renderMonitor){
this.renderMonitor=Splunk.Globals['PageStatus'].register(this.moduleType+' - rendering final data - '+this.container.attr('id'));}
if(search.job.getResultCount()==0){
this.showStatusMessage('results','nodata',sid);}else{
this.hideStatusMessage();}}
var pp=search.getPostProcess();
if(pp){
this.pp=pp;}
else{
this.pp=false;}
var propertyManagerHash=context.getAll("charting");
this.setProperty("enableLegendClick",(propertyManagerHash["chart"]!="pie"));
var plotIntention=search.getIntentionReference("plot");
var isTopOrRare=(plotIntention&&plotIntention["arg"]["mode"]in{"top":1,"rare":1});
if(this._params["maxRowsForTop"]&&isTopOrRare&&(propertyManagerHash["chart"]!="pie")){
this.setProperty("resultsCount",this._params["maxRowsForTop"]);
this.resultsCount=Math.min(this.resultsCount,this._params["maxRowsForTop"]);}else{
this.setProperty("resultsCount",this.getParam('maxResultCount'));
this.resultsCount=Math.min(this.resultsCount,this.getParam('maxResultCount'));}
if(plotIntention&&plotIntention["arg"]["mode"]=="chart"){
this.determineAxisType(plotIntention["arg"]);}
if(propertyManagerHash&&propertyManagerHash.hasOwnProperty('chartTitle')&&propertyManagerHash['chartTitle']){
$('.chartTitle',this.container).text(propertyManagerHash['chartTitle']).show();}else{
$('.chartTitle',this.container).hide();}
for(var key in propertyManagerHash){
if(propertyManagerHash.hasOwnProperty(key)){
this.setProperty(key,this.resolveStaticURL(key,propertyManagerHash[key]));}}},
getModifiedContext:function(){
var context=this.getContext();
if(this._selection){
for(key in this._selection){
context.set(this.drilldownPrefix+"."+key,this._selection[key]);}
var searchModified=false;
var search=context.get("search");
var searchRange=search.getTimeRange();
if(this._selection.timeRange){
search.setTimeRange(this._selection.timeRange);
searchModified=true;}else if(!searchRange.isAbsolute()&&!searchRange.isAllTime()){
var job=this.getContext().get("search").job;
search.setTimeRange(job.getTimeRange());
searchModified=true;}
if(searchModified)context.set("search",search);}
return context;},
isReadyForContextPush:function($super){
if(!this._selection){
return Splunk.Module.CANCEL;}
return $super();},
resolveStaticURL:function(propertyName,propertyValue){
if(propertyName&&propertyValue&&(propertyValue.substring(0,8)=="/static/"))
{
var lastDotIndex=propertyName.lastIndexOf(".");
if(lastDotIndex>0)
{
propertyName=propertyName.substring(lastDotIndex+1,propertyName.length);
if((propertyName=="source")||(propertyName=="sourcePath"))
{
var hadTrailingSlash=(propertyValue.charAt(propertyValue.length-1)=="/");
propertyValue=Splunk.util.make_url(propertyValue);
var hasTrailingSlash=(propertyValue.charAt(propertyValue.length-1)=="/");
if(hasTrailingSlash!=hadTrailingSlash)
propertyValue=hadTrailingSlash?propertyValue+"/":propertyValue.substring(0,propertyValue.length-1);}}}
return propertyValue;},
determineAxisType:function(intentionArg){
var fieldNames=[];
var splitBy=intentionArg["splitby"];
if(splitBy)fieldNames.push(splitBy);
var args={
field_list:fieldNames,
top_count:0,
min_freq:0};
var search;
var qsDict=Splunk.util.queryStringToProp(document.location.search);
if(qsDict.hasOwnProperty("base_sid")){
search=Splunk.Search.resurrectFromSearchId(qsDict["base_sid"]);}else{
search=this.getContext().get("search");}
$.get(search.getUrl('summary',args),function(resultXML){
var eventCount=parseInt($(resultXML).find("summary").attr("c"),10);
var moduleInstance=this;
$.each($(resultXML).find("field"),function(index){
var fieldElt=$(this);
var isNumeric=(fieldElt.attr("nc")>fieldElt.attr("c")/2);});}.bind(this));},
onJobProgress:function(){
if(!this._isVisible){
return;}
var context=this.getContext();
var search=context.get("search");
var resultCount=search.job.getResultCount();
var searchIsRealTime=search._range._relativeArgs.latest.isRealTime;
var searchIsTransforming=search.job.areResultsTransformed();
var postProcess=search.getPostProcess();
if(!searchIsTransforming&&!postProcess){
this.showStatusMessage('results','nontransforming',null);}
else if(resultCount==0&&search.job.isDone()){
this.showStatusMessage('results','nodata',search.job.getSearchId());}
else if(resultCount==0&&!searchIsRealTime){
this.showStatusMessage('results','waiting',search.job.getSearchId());
this.destroyChart();}
else{
this.hideStatusMessage();
if(search.job.isPreviewable()&&context.get('charting.data.preview')!=='false'){
this.getResults();}}
if(search.job.isDone()){
if(!this.renderMonitor){
this.renderMonitor=Splunk.Globals['PageStatus'].register(this.moduleType+' - rendering final data - '+this.container.attr('id'));}}},
onJobDone:function($super){
$super();
if(!this._isVisible){
return;}
var context=this.getContext();
var search=context.get("search");
var searchIsTransforming=search.job.areResultsTransformed();
var postProcess=search.getPostProcess();
if(!searchIsTransforming&&!postProcess){
this.showStatusMessage('results','nontransforming',null);}
else if(search.job.getResultCount()==0){
this.showStatusMessage('results','nodata',search.job.getSearchId());}
else{
this.hideStatusMessage();
this.getResults();}},
stripUnderscoreFieldPrefix:function(fieldName){
if(fieldName.indexOf(this.LEADING_UNDERSCORE_PREFIX)!=-1){
return fieldName.replace(this.LEADING_UNDERSCORE_PREFIX,"_");}
return fieldName;},
onDataUpdated:function(event){
var context=this.getContext();
var search=context.get("search");
if(search.isJobDispatched()&&search.job.isDone()){
if(this.renderMonitor&&(event.updateCount>=this.updateId)){
this.renderMonitor.loadComplete();
this.renderMonitor=false;}}},
_changeVisibility:function(){
var visible=true;
for(var mode in this._invisibilityModes){
if(this._invisibilityModes.hasOwnProperty(mode)){
visible=false;}}
if(visible){
this.resultsAreStale=true;
this.container.show();
this._isVisible=true;}
else{
this.container.hide();
this._isVisible=false;}},
onLegendClicked:function(event){
var seriesStr=event.text;
this._selection={};
this._selection.name2=this.stripUnderscoreFieldPrefix(event.text);
event.ctrlKey=(event.domEvent.ctrlKey||event.domEvent.metaKey);
if(this._selection&&event.ctrlKey){
this._selection.modifierKey=event.ctrlKey;}
this.showDescendants(this.DRILLDOWN_VISIBILITY_KEY+"_"+this.moduleId);
this.pushContextToChildren();},
onChartClicked:function(event){
var data=event.data;
var fields=event.fields;
this.showDescendants(this.DRILLDOWN_VISIBILITY_KEY+"_"+this.moduleId);
this._selection=null;
for(var i=0;i<fields.length;i++){
if(!this._selection)this._selection={};
var name=fields[i];
if(data.hasOwnProperty(name)){
if(i==0){
this._selection.name=name;
this._selection.value=data[name];}
else if(i==1){
this._selection.name2=this.stripUnderscoreFieldPrefix(name);
this._selection.value2=data[name];}else{
this.logger.error("we only support 2-d drilldown at the moment.");
this.logger.error(fields);
this.logger.error(data);}}
else{
this.logger.message("Assertion failed - received a click event but there was a field in fields that was not in the data.");}}
if(this._selection.name=="_time"){
if(data["_span"]){
var duration=parseFloat(data["_span"]);
var startTime=parseInt(this._selection.value,10);
var endTime=startTime+duration;
this._selection.timeRange=new Splunk.TimeRange(startTime,endTime);}}
event.ctrlKey=(event.domEvent.ctrlKey||event.domEvent.metaKey);
if(this._selection&&event.ctrlKey){
this._selection.modifierKey=event.ctrlKey;}
this.pushContextToChildren();},
showStatusMessage:function(entity_name,msg,sid){
this.statusEnabled=true;
if(msg==="nontransforming"){
$('.messageContainer',this.container).hide();
$('.nonTransformingWarning',this.container).show();}
else{
$('.nonTransformingWarning',this.container).hide();
var self=this;
var getArgs={
entity_name:entity_name,
msg:msg,
sid:sid};
$('.messageContainer',this.container).load(
Splunk.util.make_url('/module/search/JSChart/statusMessage')
+'?'+Splunk.util.propToQueryString(getArgs),
function(){
if(self.statusEnabled){$(this).show();}});}},
hideStatusMessage:function(){
this.statusEnabled=false;
$('.messageContainer',this.container).hide().html('');
$('.nonTransformingWarning',this.container).hide();},
showInlineMessage:function(){
$('.inlineMessageContainer',this.container).show();},
hideInlineMessage:function(){
$('.inlineMessageContainer',this.container).hide();},
sniffCssStyles:function(){
var $mockFlashChart=$('<div class="FlashChart" style="display: none"></div>').insertAfter(this.container);
this.properties.backgroundColor=$mockFlashChart.css('backgroundColor')||"#ffffff";
this.properties.foregroundColor=$mockFlashChart.css('borderLeftColor')||"#000000";
this.properties.fontColor=$mockFlashChart.css('color')||"#000000";
$mockFlashChart.remove();},
redrawIfNeeded:function(updateCount){
if(this.redrawNeeded){
this.draw(updateCount);}
else{
this.onDataUpdated({updateCount:updateCount});}},
draw:function(updateCount){
if(!this.chartingLibLoaded){
this.hasPendingDraw=true;
return;}
var i,newFieldList,
fieldInfo=Splunk.JSCharting.extractFieldInfo(this.response),
data=this.getChartReadyData(this.response,fieldInfo,this.properties),
drawCallback=function(chartObject){
this.redrawNeeded=false;
this.onDataUpdated({updateCount:updateCount});
this.updateGlobalReference(chartObject);}.bind(this);
this.destroyChart();
this.chart=Splunk.JSCharting.createChart(this.chartContainer,this.properties);
this.chart.addEventListener('chartClicked',this.onChartClicked.bind(this));
this.chart.addEventListener('legendClicked',this.onLegendClicked.bind(this));
this.chart.prepare(data,fieldInfo,this.properties);
if(this.chart.needsColorPalette){
newFieldList=this.chart.getFieldList();
this.applyColorsAndDraw(newFieldList,drawCallback);}
else{
this.chart.draw(drawCallback);}},
pushDataToChart:function(updateCount){
var newFieldList,
fieldInfo=Splunk.JSCharting.extractFieldInfo(this.response),
data=this.getChartReadyData(this.response,fieldInfo,this.properties),
successCallback=function(chartObject){
this.onDataUpdated({updateCount:updateCount});
this.updateGlobalReference(chartObject);}.bind(this);
this.chart.setData(data,fieldInfo);
if(this.chart.needsColorPalette){
newFieldList=this.chart.getFieldList();
this.applyColorsAndDraw(newFieldList,successCallback);}
else{
this.chart.draw(successCallback);}},
getChartReadyData:function(response,fieldInfo,properties){
var adjustedResponse;
this.hideInlineMessage();
this.properties['axisLabelsX.hideCategories']=false;
if(properties.chart in{pie:true,scatter:true,radialGauge:true,fillerGauge:true,markerGauge:true}){
adjustedResponse=response;}
var actualPointsPerSeries=response.columns[0].length,
maxColumnPoints=($.browser.msie&&$.browser.version in{"6.0":true,"7.0":true,"8.0":true})?1000:1200,
maxLinePoints=2000,
maxPoints=(properties.chart in{line:true,area:true})?maxLinePoints:maxColumnPoints,
numSeries=fieldInfo.fieldNames.length,
pointsAllowedPerSeries=Math.floor(maxPoints/numSeries);
if(actualPointsPerSeries>pointsAllowedPerSeries){
adjustedResponse=this.sliceResultsBySeriesLength(response,pointsAllowedPerSeries);
this.showInlineMessage();}
else{
adjustedResponse=response;}
if(!this.resultsAreTopOrRare(response)&&!fieldInfo.isTimeData){
var numCategories=adjustedResponse.columns[0].length;
if(numCategories>this.CATEGORY_LABEL_CUTOFF){
this.properties['axisLabelsX.hideCategories']=true;}}
if(response.numSeriesTruncated&&!(properties.chart in{pie:true,scatter:true,radialGauge:true,fillerGauge:true,markerGauge:true})){
this.showInlineMessage();}
return Splunk.JSCharting.extractChartReadyData(adjustedResponse,fieldInfo);},
updateGlobalReference:function(chartObject){
Splunk.Module.JSChart.setChartById(this.moduleId,chartObject);},
applyColorsAndDraw:function(fieldList,callback){
var i,loopLabel,masterIndex,localIndex,colorIndex,colorHex,
colors=[],
shouldNotifyMaster=false,
legendTotalSize=this.legendManager.numLabels();
this.legendFieldList=fieldList;
for(i=0;i<this.legendFieldList.length;i++){
loopLabel=this.legendFieldList[i];
masterIndex=this.legendManager.getLabelIndex(loopLabel);
localIndex=this.legendFieldMap[loopLabel];
if(masterIndex===-1){
shouldNotifyMaster=true;}
else{
this.legendFieldMap[loopLabel]=masterIndex;}}
if(shouldNotifyMaster){
this.legendManager.setLabels(this.legendFieldList);
this.pendingCallback=callback;}
else{
for(i=0;i<this.legendFieldList.length;i++){
colorIndex=this.legendFieldMap[this.legendFieldList[i]];
colorHex=this.colorPalette.getColor(this.legendFieldList[i],colorIndex,legendTotalSize);
colors.push(Splunk.JSCharting.ColorUtils.colorFromHex(colorHex));}
this.chart.setColors(colors);
this.chart.draw(callback);}},
resize:function(){
if(this.chart){
var currentWidth=this.chart.chartWidth,
currentHeight=this.chart.chartHeight,
newWidth=$(this.chartContainer).width(),
newHeight=$(this.chartContainer).height();
if(currentWidth!=newWidth||currentHeight!=newHeight){
this.chart.resize(newWidth,newHeight);}}},
setProperty:function(propertyName,value){
if(this.properties[propertyName]!==value){
this.properties[propertyName]=value;
this.onPropertyChanged(propertyName,value);}},
getProperty:function(propertyName){
return this.properties[propertyName];},
onPropertyChanged:function(name,value){
if(name=='jobID'){
this.legendIndexMap={};
this.globalLegendSize=0;
this.localLegendSize=0;
return;}
if(name=='chartTitle'){
return;}
if(name=='chart'||name=='layout.splitSeries'){
this.destroyChart();}
this.redrawNeeded=true;},
destroyChart:function(){
if(this.chart){
this.chart.destroy();
$(this.chartContainer).empty();
this.chart=false;}},
chartIsAGauge:function(){
return(this.properties.chart in{radialGauge:1,fillerGauge:1,markerGauge:1});}});
Splunk.Module.JSChart.chartByIdMap={};
Splunk.Module.JSChart.getChartById=function(moduleId){
return this.chartByIdMap[moduleId];};
Splunk.Module.JSChart.setChartById=function(moduleId,chart){
this.chartByIdMap[moduleId]=chart;};;}catch(e){var err="The module 'Splunk.Module.JSChart' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.JSChart",err);});}try{i18n_register({"catalog":{"+-1 bar = 1 second":"1 bar = 1 second","+-1 bar = 1 minute":"1 bar = 1 minute","+-The timeline can not zoom in to a single millisecond.":"The timeline can not zoom in to a single millisecond.","+-minute":"minute","+-year":"year","+-hour":"hour","+-month":"month","+-seconds":"seconds","+-1 bar = 1 day":"1 bar = 1 day","+-1 bar = 1 hour":"1 bar = 1 hour","+-months":"months","+-1 bar = %s millisecond":"1 bar = %s millisecond","+-Open as image":"Open as image","+-1 bar = 1 year":"1 bar = 1 year","+-years":"years","+-minutes":"minutes","+-second":"second","+-days":"days","+-1 bar = 1 month":"1 bar = 1 month","+-hours":"hours","+-day":"day"},"plural":function(n){return n==1?0:1;}});Splunk.namespace("Module");
Splunk.Module.FlashTimeline=$.klass(Splunk.Module.DispatchingModule,{
LINEAR_SCALE_LABEL:_("Linear scale"),
LOG_SCALE_LABEL:_("Log scale"),
HIDE_TOGGLE_LABEL:_("Hide"),
SHOW_TOGGLE_LABEL:_("Show timeline"),
CUSTOM_DATE_FORMATS:{"EEE MMM d":{"day_before_month":"EEE d MMM","ja_JP":"EEE MMM d\u65e5","ko_KR":"EEE MMM d\uc77c","zh_CN":"EEE MMM d\u65e5","zh_TW":"EEE MMM d\u65e5"},"MMMM":{},"yyyy":{"ja_JP":"yyyy\u5e74","ko_KR":"yyyy\ub144","zh_CN":"yyyy\u5e74","zh_TW":"yyyy\u5e74"}},
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("FlashTimeline.js");
this._prevSID=null;
this.updateId=-1;
this.renderMonitor=null;
this.isEntireRangeSelected=true;
_("Open as image");
_("year");
_("years");
_("month");
_("months");
_("day");
_("days");
_("hour");
_("hours");
_("minute");
_("minutes");
_("second");
_("seconds");
var Menu={
containerDiv:this.container,
menuDict:[
{
label:_("Linear scale"),
callback:this.linScale.bind(this),
style:"linScale"},
{
label:_("Log scale"),
callback:this.logScale.bind(this),
style:"logScale"}],
activator:".linLogToggle"};
this.menu=new Splunk.MenuBuilder(Menu);
this.zoomInLink=$("a.zoomIn",this.container).click(this.zoomIn.bind(this));
this.zoomOutLink=$("a.zoomOut",this.container).click(this.zoomOut.bind(this));
this.selectAllLink=$("a.selectAll",this.container).click(this.selectAll.bind(this));
this.toggleLabel=$("a.hideshow .splIconicLinkLabel",this.container);
$("a.hideshow",this.container).click(this.onToggle.bind(this));
$(".TimelineContainer",this.container).append("<div class=\"messageContainer\"></div>");
switch(this.getParam("renderer"))
{
case"canvas":
this.renderer="canvas";
break;
case"flash":
this.renderer="flash";
break;
default:
this.renderer=this._hasCanvas()?"canvas":"flash";
break;}
switch(this.renderer)
{
case"canvas":
this._timeline=new this.CanvasTimeline(this);
break;
case"flash":
this._timeline=new this.FlashTimeline(this);
break;}
if(this._timeline)
this._timeline.initialize(container);
if(Splunk.util.normalizeBoolean(this.getParam("minimized")))
this.minimize(false);
else
this.maximize(false);},
update:function(){
if(this._timeline)
this.updateId=this._timeline.update();},
onToggle:function(evt){
if(Splunk.util.normalizeBoolean(this.getParam("minimized"))){
this.maximize(true);}else{
this.minimize(true);}
evt.preventDefault();},
minimize:function(save){
if(save){
this.setParam("minimized",true);}
this.hideContent("minimize");
$(".TimelineContainer",this.container).hide();
$(".controlLinks",this.container).addClass("minimized");
this.toggleLabel.html(this.SHOW_TOGGLE_LABEL);
return false;},
maximize:function(save){
if(save){
this.setParam("minimized",false);}
$(".TimelineContainer",this.container).show();
this.showContent("minimize");
$(".controlLinks",this.container).removeClass("minimized");
this.toggleLabel.html(this.HIDE_TOGGLE_LABEL);
return false;},
zoomIn:function(evt){
if(this.zoomInLink.hasClass('splIconicLinkDisabled'))return false;
var range=this.getSelectionRange();
if(!range||(range&&range.equalToRange(this.getTimelineRangeFromUTC()))){
if(range.getDuration()==1){
var messenger=Splunk.Messenger.System.getInstance();
messenger.send("info","splunk",_("The timeline can not zoom in to a single millisecond."));
this._passTimeRangeToParent(range);
return;}
this._passTimeRangeToParent(range.zoomIn());}else{
this._passTimeRangeToParent(range);}
this.selectAll();
if(evt.preventDefault)
evt.preventDefault();},
zoomOut:function(evt){
if(this.zoomOutLink.hasClass('splIconicLinkDisabled'))return false;
var timelineRange=this.getTimelineRangeFromUTC();
if(timelineRange){
this._passTimeRangeToParent(timelineRange.zoomOut());}else{
this.logger.error(this.moduleType," could not zoom out cause we had an undefined timelineRange");}
evt.preventDefault();},
selectAll:function(evt){
if(this.selectAllLink.hasClass('splIconicLinkDisabled'))return false;
var context=this.getContext();
var search=context.get("search");
$(".controlLinks",this.container).addClass("noSelection");
this.selectAllLink.addClass("splIconicLinkDisabled");
this.zoomInLink.addClass("splIconicLinkDisabled");
this.clearSelectionRange();
if(search.isJobDispatched()){
this.pushContextToChildren();}
if(evt)evt.preventDefault();},
logScale:function(evt){
$(".linLogLabel",this.container).text(this.LOG_SCALE_LABEL);
if(this._timeline)
this._timeline.setScaleY("log");},
linScale:function(evt){
$(".linLogLabel",this.container).text(this.LINEAR_SCALE_LABEL);
if(this._timeline)
this._timeline.setScaleY("linear");},
showDataControls:function(show){
if(show){
$(".controlLinks",this.container).removeClass("noData");
this.zoomOutLink.removeClass("splIconicLinkDisabled");}else{
$(".controlLinks",this.container).addClass("noData");
this.zoomOutLink.addClass("splIconicLinkDisabled");}},
enableResizable:function(){
if(!($.browser.safari&&$.browser.version<"526")){
$("div.TimelineContainer",this.container).resizable({autoHide:true,handles:"s",stop:this.onResizeStop.bind(this)});
$("div.TimelineContainer").mouseup(
function(event){
$(this).width("100%");});}},
getCSSColor:function(specificity,cssProperty){
var color;
for(var i=0;i<specificity.length;i++){
var computedColor=specificity[i].css(cssProperty);
color=Splunk.util.normalizeColor(computedColor);
if(color){
return color;}}
return null;},
getModifiedContext:function(){
var context=this.getContext();
if(this.isEntireRangeSelected)
return context;
var selectedBuckets=this._timeline?this._timeline.getSelectedBuckets():null;
if(!selectedBuckets){
this.logger.warn(this.moduleType," Assertion failed - getModifiedContext was called but getSelectedBuckets is null.");
return context;}
var continueSummingAvailableEvents=true;
var numberOfBuckets=selectedBuckets.length;
var totalEvents=0;
var totalEventsAvailable=0;
for(var i=numberOfBuckets-1;i>-1;i--){
var b=selectedBuckets[i];
totalEvents+=b["eventCount"];
if(continueSummingAvailableEvents){
totalEventsAvailable+=b["eventAvailableCount"];}
if(b["eventAvailableCount"]<b["eventCount"]){
continueSummingAvailableEvents=false;}}
var search=context.get("search");
search.setSelectedEventAvailableCount(totalEventsAvailable);
search.setSelectedEventCount(totalEvents);
var range=this.getSelectionRange(selectedBuckets);
search.setTimeRange(range);
context.set("search",search);
return context;},
getTimelineRangeFromUTC:function(){
if(this._timeline)
{
try{
var earliestEpochTime=this._timeline.getViewMinimum();
var latestEpochTime=this._timeline.getViewMaximum();
if(Splunk.util.isInt(Math.floor(earliestEpochTime))&&Splunk.util.isInt(Math.floor(latestEpochTime))){
return new Splunk.TimeRange(earliestEpochTime,latestEpochTime);}else{
this.logger.error("undefined values "+earliestEpochTime+", "+latestEpochTime);}}catch(e){
this.logger.error(this.moduleType," exception getting earliest and latest selected times - "+e);}}
return new Splunk.TimeRange();},
getScaleDescription:function(){
var timelineScale=this._timeline?this._timeline.getTimelineScale():null;
if(!timelineScale)
return"";
var unit=timelineScale.unit;
var value=timelineScale.value;
if(parseFloat(value)<1){
if(unit=="second"){
value=value*1000;
unit="millisecond";}else{
this.logger.error("error - timelineScale has a fractional unit but not in seconds.");}}
if(unit=="millisecond"){
return sprintf(ungettext("1 bar = %s millisecond","1 bar = %s milliseconds",value),value);}else if(value==1){
switch(unit){
case"year":
return _("1 bar = 1 year");
case"month":
return _("1 bar = 1 month");
case"day":
return _("1 bar = 1 day");
case"hour":
return _("1 bar = 1 hour");
case"minute":
return _("1 bar = 1 minute");
case"second":
return _("1 bar = 1 second");
default:
this.logger.error("received uncaught unit of ",unit);
break;}}else{
this.logger.error("received a timelineScale that has >1 unit per bucket. ("+value+"). This should not happen");}
return"";},
getSelectionRange:function(selectedBuckets){
if(!selectedBuckets)
selectedBuckets=this._timeline?this._timeline.getSelectedBuckets():null;
var numberOfBuckets=selectedBuckets?selectedBuckets.length:0;
if(numberOfBuckets==0){
this.logger.error(this.moduleType," getSelectionRange returned an empty selectedBuckets. Returning 'All Time'");
return new Splunk.TimeRange();}
var earliestBucket=selectedBuckets[0];
var latestBucket=selectedBuckets[numberOfBuckets-1];
var range=new Splunk.TimeRange(earliestBucket["earliestTime"],latestBucket["latestTime"]);
range.setAsSubRangeOfJob(!this.isEntireRangeSelected);
return range;},
clearSelectionRange:function(){
this.isEntireRangeSelected=true;
if(this._timeline)
{
this._timeline.setSelectionMinimum(NaN);
this._timeline.setSelectionMaximum(NaN);}},
resetUI:function(){
if(this._timeline)
this._timeline.setJobID("");
this.update();
this.showDataControls(false);
this.hideStatusMessage();},
hideContent:function(key){
key=(key!=null)?String(key):"";
if(this._hideKeys)
{
this._hideKeys[key]=true;
return false;}
this._hideKeys={};
this._hideKeys[key]=true;
if(this._timeline)
this._timeline.hide();
return true;},
showContent:function(key){
if(!this._hideKeys)
return false;
key=(key!=null)?String(key):"";
delete this._hideKeys[key];
for(key in this._hideKeys)
{
if(this._hideKeys.hasOwnProperty(key))
return false;}
this._hideKeys=null;
if(this._timeline)
this._timeline.show();
return true;},
isContentVisible:function(){
return!this._hideKeys;},
showStatusMessage:function(msg,sid){
var str="";
str+="<p class=\"resultStatusMessage empty_results\">";
str+=msg;
if(sid)
{
str+=" <span class=\"resultStatusHelp\">";
str+="<a href=\"#\" onclick=\"Splunk.window.openJobInspector('"+sid.replace("'","")+"');return false;\" class=\"resultStatusHelpLink\">";
str+=_("Inspect ...");
str+="</a>";
str+="</span>";}
str+="</p>";
this.hideContent("showStatusMessage");
$(".messageContainer",this.container).html(str).show();},
hideStatusMessage:function(){
$(".messageContainer",this.container).hide().html("");
this.showContent("showStatusMessage");},
onBeforeJobDispatched:function(search){
search.setMinimumStatusBuckets(this._params["statusBuckets"]);},
onJobProgress:function(){
var context=this.getContext();
var search=context.get("search");
if(search.job.isDone()){
if(!this.renderMonitor){
this.renderMonitor=Splunk.Globals["PageStatus"].register(this.moduleType+" - rendering final data - "+this.container.attr("id"));}}
this.update();},
onContextChange:function(){
var context=this.getContext();
var search=context.get("search");
var sid=search.job.getSearchId();
this.showDataControls(false);
this.clearSelectionRange();
if(this._timeline)
{
if(sid!=this._prevSID)
{
this._prevSID=sid;
this.selectAll();}
if(sid!=null){
this._timeline.setJobID(encodeURIComponent(encodeURIComponent(sid)));}else{
this._timeline.setJobID(sid);}
this._timeline.setBucketCount(this.getParam("maxBucketCount"));}
if(sid&&(search.job.getStatusBuckets()<1)){
this.hideContent("statusBuckets");
$("#"+this.moduleId).hide();}else{
$("#"+this.moduleId).show();
this.showContent("statusBuckets");}
this.update();},
onDataUpdated:function(event){
var context=this.getContext();
var search=context.get("search");
if(search.isJobDispatched()&&search.job.isDone()){
if(this.renderMonitor&&(event.updateCount>=this.updateId)){
this.renderMonitor.loadComplete();
this.renderMonitor=false;}}
if(search.isJobDispatched()){
this.showDataControls(true);
$(".bucketSize",this.container).html(this.getScaleDescription());}},
onSelectionChanged:function(event){
var context=this.getContext();
var search=context.get("search");
this.isEntireRangeSelected=false;
this.selectAllLink.removeClass("splIconicLinkDisabled");
this.zoomInLink.removeClass("splIconicLinkDisabled");
if(search.isJobDispatched()){
this.pushContextToChildren();}},
onResizeStop:function(event,ui){
$(event.target).width("100%");
this.setParam("height",ui.size.height+"px");},
_passTimeRangeToParent:function(range){
var search=new Splunk.Search();
search.setTimeRange(range);
var context=new Splunk.Context();
context.set("search",search);
this.passContextToParent(context);},
_hasCanvas:function(){
var canvas=document.createElement("canvas");
if(!canvas)
return false;
if(typeof canvas.getContext!=="function")
return false;
var context=canvas.getContext("2d");
if(!context)
return false;
return true;},
formatTooltip:function(earliestTime,latestTime,earliestOffset,latestOffset,eventCount){
var range=new Splunk.TimeRange(earliestTime,latestTime);
var tooltip=_(sprintf(
ungettext("%(eventCount)s event %(timeRangeString)s","%(eventCount)s events %(timeRangeString)s",
eventCount),
{eventCount:format_decimal(eventCount),timeRangeString:range.toConciseString()}));
return tooltip;},
formatSimpleString:function(str){
return _(str);},
formatNumericString:function(strSingular,strPlural,num){
return sprintf(ungettext(strSingular,strPlural,num),this.formatNumber(num));},
formatNumber:function(num){
var pos=Math.abs(num);
if((pos>0)&&((pos<1e-3)||(pos>=1e9)))
return format_scientific(num,"##0E0");
return format_decimal(num);},
formatDate:function(time,timeZoneOffset,dateFormat){
if(dateFormat)
{
var customFormat=this.CUSTOM_DATE_FORMATS[dateFormat];
if(customFormat)
{
var localeName=locale_name();
if(customFormat[localeName])
dateFormat=customFormat[localeName];
else if(locale_uses_day_before_month()&&customFormat["day_before_month"])
dateFormat=customFormat["day_before_month"];}}
return format_date(this.epochToDateTime(time,timeZoneOffset),dateFormat);},
formatTime:function(time,timeZoneOffset,timeFormat){
if(timeFormat=="full")
return format_time_microseconds(this.epochToDateTime(time,timeZoneOffset),timeFormat);
return format_time(this.epochToDateTime(time,timeZoneOffset),timeFormat);},
formatDateTime:function(time,timeZoneOffset,dateFormat,timeFormat){
if(timeFormat=="full")
return format_datetime_microseconds(this.epochToDateTime(time,timeZoneOffset),dateFormat,timeFormat);
return format_datetime(this.epochToDateTime(time,timeZoneOffset),dateFormat,timeFormat);},
epochToDateTime:function(time,timeZoneOffset){
var date=new Date(Math.floor((time+timeZoneOffset)*1000));
var dateTime=new DateTime({
date:date,
year:date.getUTCFullYear(),
month:date.getUTCMonth()+1,
day:date.getUTCDate(),
hour:date.getUTCHours(),
minute:date.getUTCMinutes(),
second:date.getUTCSeconds(),
microsecond:date.getUTCMilliseconds()*1000});
dateTime.weekday=function(){
var d=this.date.getUTCDay()-1;
if(d<0)
d=6;
return d;};
return dateTime;},
CanvasTimeline:(function(){
var c=function(module){
this.module=module;};
c.prototype={
initialize:function(container){
var module=this.module;
this.scriptLoadMonitor=Splunk.Globals["PageStatus"].register(module.moduleType+" - loading script file - "+module.container.attr("id"));
$script(Splunk.util.make_url("/static/js/splunk_timeline.js"),this.onScriptLoaded.bind(this));
$(document).bind("PrintStart",this.onPrintStart.bind(this));},
update:function(){
if(!this._timeline)
return;
return this._timeline.update();},
setJobID:function(value){
if(!this._timeline)
return;
this._timeline.setJobID(value);},
setBucketCount:function(value){
if(!this._timeline)
return;
this._timeline.setBucketCount(value);},
setScaleY:function(value){
if(!this._timeline)
return;
this._timeline.setScaleY(value);},
setSelectionMinimum:function(value){
if(!this._timeline)
return;
this._timeline.setSelectionMinimum(value);},
setSelectionMaximum:function(value){
if(!this._timeline)
return;
this._timeline.setSelectionMaximum(value);},
getViewMinimum:function(){
if(!this._timeline)
return;
return this._timeline.getViewMinimum();},
getViewMaximum:function(){
if(!this._timeline)
return;
return this._timeline.getViewMaximum();},
getSelectedBuckets:function(){
if(!this._timeline)
return;
return this._timeline.getSelectedBuckets();},
getTimelineScale:function(){
if(!this._timeline)
return;
return this._timeline.getTimelineScale();},
hide:function(){
if(!this._timeline)
return;
$(this._timeline.element).css("display","none");},
show:function(){
if(!this._timeline)
return;
$(this._timeline.element).css("display","");
this._timeline.updateSize();
this._timeline.validate();},
onPrintStart:function(){
if(!this._timeline)
return;
this._timeline.updateSize();
this._timeline.validate();},
onScriptLoaded:function(){
var module=this.module;
this._timeline=new splunk.Timeline(Splunk.util.make_url("/splunkd"),"");
this._timeline.externalInterface.formatTooltip=module.formatTooltip.bind(module);
this._timeline.externalInterface.formatSimpleString=module.formatSimpleString.bind(module);
this._timeline.externalInterface.formatNumericString=module.formatNumericString.bind(module);
this._timeline.externalInterface.formatNumber=module.formatNumber.bind(module);
this._timeline.externalInterface.formatDate=module.formatDate.bind(module);
this._timeline.externalInterface.formatTime=module.formatTime.bind(module);
this._timeline.externalInterface.formatDateTime=module.formatDateTime.bind(module);
this._timeline.setTimeZone(Splunk.util.getConfigValue("SERVER_ZONEINFO"));
this._timeline.setEnableChartClick(true);
this._timeline.addEventListener("updated",module.onDataUpdated.bind(module));
this._timeline.addEventListener("selectionChanged",module.onSelectionChanged.bind(module));
this._timeline.addEventListener("chartDoubleClicked",module.zoomIn.bind(module));
this._timeline.appendTo($(".TimelineContainer",module.container)[0]);
var foregroundColor=module.getCSSColor([module.container],"border-left-color");
if(foregroundColor)
this._timeline.setForegroundColor(Number(foregroundColor.replace("#","0x")));
var seriesColor=module.getCSSColor([module.container],"border-right-color");
if(seriesColor)
this._timeline.setSeriesColor(Number(seriesColor.replace("#","0x")));
if(!module.isContentVisible())
$(this._timeline.element).css("display","none");
if(Splunk.util.normalizeBoolean(module.getParam("enableResize")))
module.enableResizable();
module.onContextChange();
module.update();
this.scriptLoadMonitor.loadComplete();}};
return c;})(),
FlashTimeline:(function(){
var c=function(module){
this.module=module;};
c.prototype={
initialize:function(container){
var module=this.module;
this.swfObjectId="swfObject_"+module.container.attr("id");
this.bridge=new Splunk.JABridge(this.swfObjectId);
this.minVersion=Splunk.util.getConfigValue("FLASH_MAJOR_VERSION")+"."+Splunk.util.getConfigValue("FLASH_MINOR_VERSION")+"."+Splunk.util.getConfigValue("FLASH_REVISION_VERSION");
this.swfLoadMonitor=Splunk.Globals["PageStatus"].register(module.moduleType+" - loading swf file - "+module.container.attr("id"));
this.initializeBridge();
if(swfobject.hasFlashPlayerVersion(this.minVersion)){
this.addObjectStructure();}else{
this.showFlashError();}
$(document).bind("PrintStart",this.onPrintStart.bind(this));
$(document).bind("PrintEnd",this.onPrintEnd.bind(this));},
update:function(){
return this.callBridgeMethod("update");},
setJobID:function(value){
this.setBridgeProperty("jobID",value);},
setBucketCount:function(value){
this.callBridgeMethod("setValue","data.count",value);},
setScaleY:function(value){
this.callBridgeMethod("setValue","axisY.scale",value);},
setSelectionMinimum:function(value){
this.setBridgeProperty("selectionMinimum",value);},
setSelectionMaximum:function(value){
this.setBridgeProperty("selectionMaximum",value);},
getViewMinimum:function(){
return this.getBridgeProperty("viewMinimum");},
getViewMaximum:function(){
return this.getBridgeProperty("viewMaximum");},
getSelectedBuckets:function(){
return this.callBridgeMethod("getSelectedBuckets");},
getTimelineScale:function(){
return this.getBridgeProperty("timelineScale");},
hide:function(){
var module=this.module;
module.logger.warn("closing down JABridge connection");
this.bridge.close();
$(this.bridge.getFlashElement(this.swfObjectId)).css("display","none");},
show:function(){
var module=this.module;
$(this.bridge.getFlashElement(this.swfObjectId)).css("display","");
module.logger.warn("bringing back JABridge connection");
this.connectBridge(true);},
onPrintStart:function(){
var module=this.module;
if($.browser.msie){
return;}
var snapshot=this.callBridgeMethod("getSnapshot");
if(snapshot){
var img=document.createElement("img");
img.setAttribute("width",snapshot.width);
img.setAttribute("height",snapshot.height);
module.hideContent("onPrintStart");
$(".TimelineContainer",module.container)[0].appendChild(img).src=snapshot.data;}},
onPrintEnd:function(){
var module=this.module;
if($.browser.msie){
return;}
$(".TimelineContainer img",module.container).remove();
module.showContent("onPrintStart");},
connectBridge:function(isReconnect){
if(!isReconnect)
isReconnect=false;
this.bridge.connect(function(){this.onConnect(isReconnect);}.bind(this),this.onClose.bind(this));},
initializeBridge:function(){
var module=this.module;
this.bridge.addMethod("formatTooltip",module.formatTooltip.bind(module),["earliestTime","latestTime","earliestOffset","latestOffset","eventCount"],"String");
this.bridge.addMethod("formatSimpleString",module.formatSimpleString.bind(module),["str"],"String");
this.bridge.addMethod("formatNumericString",module.formatNumericString.bind(module),["strSingular","strPlural","num"],"String");
this.bridge.addMethod("formatNumber",module.formatNumber.bind(module),["num"],"String");
this.bridge.addMethod("formatDate",module.formatDate.bind(module),["time","timeZoneOffset","dateFormat"],"String");
this.bridge.addMethod("formatTime",module.formatTime.bind(module),["time","timeZoneOffset","timeFormat"],"String");
this.bridge.addMethod("formatDateTime",module.formatDateTime.bind(module),["time","timeZoneOffset","dateFormat","timeFormat"],"String");},
onSWFReady:function(event){
var module=this.module;
if(event.success){
if(module.isContentVisible())
this.connectBridge(false);
else
$(this.bridge.getFlashElement(this.swfObjectId)).css("display","none");
if(Splunk.util.normalizeBoolean(module.getParam("enableResize"))){
module.enableResizable();}}else{
module.logger.error("The embedding of the SWF was unsuccessful.");}},
addObjectStructure:function(){
var module=this.module;
var targetId="TimelineContainer"+module.container.attr("id");
var swlUrl="";
if(module.getParam("swfFile").substring(0,1)=="/"){
swfUrl=Splunk.util.make_url(module.getParam("swfFile"));}else{
swfUrl=Splunk.util.make_url("/static/flash/"+module.getParam("swfFile"));}
var expressInstallUrl=false;
var staticPath=Splunk.util.make_url("/static");
if(staticPath.charAt(staticPath.length-1)=="/")
staticPath=staticPath.substring(0,staticPath.length-1);
var flashVars={"staticPath":staticPath,"hostPath":Splunk.util.make_url("/splunkd"),"basePath":""};
var params={
wmode:"opaque",
allowFullScreen:"true"};
var bgcolor=module.getCSSColor([module.container],"background-color");
if(bgcolor){
params["bgcolor"]=bgcolor;}
var attributes={
id:this.swfObjectId,
name:this.swfObjectId};
$(".TimelineContainer",module.container).append("<div id="+targetId+"></div>");
swfobject.embedSWF(swfUrl,targetId,"100%","100%",this.minVersion,expressInstallUrl,flashVars,params,attributes,this.onSWFReady.bind(this));},
showFlashError:function(){
var module=this.module;
var msg=_("Splunk requires a newer version of Flash.");
module.logger.warn(msg);
var target=$("div.TimelineContainer",module.container)[0];
target.innerHTML=sprintf('<p class="error">%s (Minimum version: %s.%s.%s) <a href="http://get.adobe.com/flashplayer/" target="_blank" class="spl-icon-external-link-xsm">Download Flash Player</a></p>',
msg,
Splunk.util.getConfigValue("FLASH_MAJOR_VERSION"),
Splunk.util.getConfigValue("FLASH_MINOR_VERSION"),
Splunk.util.getConfigValue("FLASH_REVISION_VERSION"));},
onClose:function(){
var module=this.module;
module.logger.warn("The JABridge connection was closed with an id of",this.bridge.id());
this._isBridgeConnected=false;},
onConnect:function(isReconnect){
var module=this.module;
this._isBridgeConnected=true;
this.setBridgeProperty("enableChartClick",true);
this.setBridgeProperty("enableOpenAsImage",!jQuery.browser.msie);
this.setBridgeProperty("timeZone",Splunk.util.getConfigValue("SERVER_ZONEINFO"));
this.addBridgeEventListener("chartDoubleClicked",module.zoomIn.bind(module));
this.addBridgeEventListener("selectionChanged",module.onSelectionChanged.bind(module));
this.addBridgeEventListener("updated",module.onDataUpdated.bind(module));
this.addBridgeEventListener("openAsImage",this.onOpenAsImage.bind(this));
this.setPresentation();
module.onContextChange();
module.update();
this.swfLoadMonitor.loadComplete();},
onOpenAsImage:function(event){
var snapshot=event.snapshot;
Splunk.window.open(snapshot.data,this.swfObjectId,{height:snapshot.height+16,width:snapshot.width+16});},
setPresentation:function(){
var module=this.module;
var seriesColors=module.getCSSColor([module.container],"border-right-color");
if(seriesColors){
this.callBridgeMethod("setValue","seriesColors","["+seriesColors.replace("#","0x")+"]");}
var styleMap=[
{css:"border-left-color",flash:"foregroundColor"},
{css:"color",flash:"fontColor"},
{css:"background-color",flash:"backgroundColor"}];
for(var i=0;i<styleMap.length;i++){
var styleMapAttributes=styleMap[i];
var value=module.getCSSColor([module.container],styleMapAttributes.css);
if(value){
this.callBridgeMethod("setValue",styleMapAttributes.flash,value.replace("#","0x"));}}},
getBridgeProperty:function(name){
if(!this._isBridgeConnected)
return undefined;
try{
return this.bridge.getProperty(name);}catch(e){
this.module.logger.error("externalInterface/jabridge exception on getProperty('",name,"')",e);
return undefined;}},
setBridgeProperty:function(name,value){
if(!this._isBridgeConnected)
return;
try{
this.bridge.setProperty(name,value);}catch(e){
this.module.logger.error("externalInterface/jabridge exception on setProperty('",name,"', '",value,"')",e);}},
callBridgeMethod:function(name){
if(!this._isBridgeConnected)
return undefined;
try{
return this.bridge.callMethod.apply(this.bridge,arguments);}catch(e){
this.module.logger.error("externalInterface/jabridge exception on callMethod('",name,"')",e);
return undefined;}},
addBridgeEventListener:function(name,listener){
if(!this._isBridgeConnected)
return;
try{
return this.bridge.addEventListener(name,listener);}catch(e){
this.module.logger.error("externalInterface/jabridge exception on addEventListener('",name,"')",e);}}};
return c;})()});;}catch(e){var err="The module 'Splunk.Module.FlashTimeline' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.FlashTimeline",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.Module.Export=$.klass(Splunk.Module.DispatchingModule,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("Splunk.Module.Export");
var exportBtn=$("a",this.container);
exportBtn.bind("click.export",function(){return false;});},
onContextChange:function(){
this.updateExportLink();
return;},
onJobDone:function(event){
this.updateExportLink();
return;},
updateExportLink:function(){
var context=this.getContext();
var search=context.get("search");
var jobDone=search.job.isDone()
var exportBtn=$("a",this.container);
var type=this.getParam('exportType');
if(jobDone){
var context=this.getContext();
var formContainer=$('.exportPopupContainer')[0];
var exportBtn=$("a",this.container);
exportBtn.unbind('click.export');
exportBtn.bind('click.export',function(){
var search=context.get("search");
if(typeof search=='undefined'||typeof search=='undefined'||search.job=='undefined'||!search.job){
return;}
Splunk.Popup.createExportResultsForm(formContainer,search.job,type);
return false;});
exportBtn.removeClass('splIconicLinkDisabled');}else{
exportBtn.addClass('splIconicLinkDisabled');
exportBtn.unbind('click.export');
exportBtn.bind('click.export',function(){return false;});}},
onJobProgress:function(event){}});;}catch(e){var err="The module 'Splunk.Module.Export' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.Export",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.Module.MaxLines=$.klass(Splunk.Module.DispatchingModule,{
CONTEXT_KEY:'maxLines',
CONTEXT_NAMESPACE:'results',
PARAM_KEY:'default',
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("MaxLines.js");
this.select=$("select[name='maxLines']",this.container);
if(this.select.length==0){
this.select=$("<select/>").appendTo(this.container);}
this.select.bind("change",this.handleSelectChange.bind(this));},
getModifiedContext:function(){
var context=this.getContext();
var namespacedKey=this.CONTEXT_NAMESPACE+"."+this.CONTEXT_KEY;
context.set(namespacedKey,this.getSelectedMaxLines());
return context;},
getSelectedMaxLines:function(){
var val=this.getParam(this.PARAM_KEY);
if(!val){
this.setParam(this.PARAM_KEY,this.select.val(),true);}
val=parseInt(this.getParam(this.PARAM_KEY),10);
if(isNaN(val)||val<0){
this.logger.error('getSelectedMaxLines - Invalid max lines value; defaulting to 10');
return 10;}
return val;},
handleSelectChange:function(evt){
this.setParam(this.PARAM_KEY,this.select.val());
this.logger.debug('handleSelectChange - changing maxLines='+this.getParam(this.PARAM_KEY));
this.pushContextToChildren();}});;}catch(e){var err="The module 'Splunk.Module.MaxLines' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.MaxLines",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.Module.EnablePreview=$.klass(Splunk.Module.DispatchingModule,{
CONF_KEY:'enable',
PREVIEW_AND_REAL_TIME_CONFLICT:'preview_is_completely_ignored_by_splunkd_when_in_realtime',
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("EnablePreview.js");
this.checkbox=$("input[name='enable']",this.container);
this.checkbox.bind("click",this.onEnablePreviewChange.bind(this));
this.previousSID=null;
if(!Splunk.util.normalizeBoolean(this.getParam("display"))){
this.hide(this.HIDDEN_MODULE_KEY);}},
onContextChange:function(){
var context=this.getContext();
var search=context.get("search");
var range=search.getTimeRange();
var currentSID=search.job.getSearchId();
if(range.isRealTime()){
this.hide(this.PREVIEW_AND_REAL_TIME_CONFLICT);}
else{
this.show(this.PREVIEW_AND_REAL_TIME_CONFLICT);
if(search.isJobDispatched()&&!search.job.isDone()&&currentSID!=this.previousSID){
search.job.setPreviewable(this.isChecked());}}
this.previousSID=currentSID;},
updatePreviewableState:function(){
var search=this.getContext().get("search");
var job=search.job;
if(job.isPreviewable()!=this.isChecked()){
job.setPreviewable(this.isChecked());}},
onEnablePreviewChange:function(evt){
this.setParam(this.CONF_KEY,this.isChecked());
this.logger.info("onEnablePreviewChange - isChecked="+this.getParam(this.CONF_KEY));
this.updatePreviewableState();},
isChecked:function(){
return Splunk.util.normalizeBoolean(this.checkbox.prop('checked'));}});;}catch(e){var err="The module 'Splunk.Module.EnablePreview' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.EnablePreview",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.DataOverlay=$.klass(Splunk.Module.DispatchingModule,{
PARAM_KEY:'default',
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("Splunk.Module.DataOverlay");
this.select=$("select[name='dataOverlayMode']",this.container);
this.select.bind("change",this.handleSelectChange.bind(this));},
getModifiedContext:function(){
var context=this.getContext();
context.set("results.dataOverlayMode",this.getSelectedDataOverlayMode());
return context;},
getSelectedDataOverlayMode:function(){
var val=this.getParam(this.PARAM_KEY);
if(!val){
this.setParam(this.PARAM_KEY,this.select.val(),true);}
return this.getParam(this.PARAM_KEY);},
handleSelectChange:function(evt){
this.setParam(this.PARAM_KEY,this.select.val());
this.pushContextToChildren();}});;}catch(e){var err="The module 'Splunk.Module.DataOverlay' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.DataOverlay",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.RowNumbers=$.klass(Splunk.Module.DispatchingModule,{
PARAM_KEY:"default",
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("Splunk.Module.RowNumbers");
this.checkbox=$("input[name='displayRowNumbers']",this.container);
this.checkbox.bind("click",this.onRowNumbers.bind(this));},
onRowNumbers:function(evt){
setTimeout(
function(){
this.setParam(this.PARAM_KEY,this.checkbox.prop("checked"));
this.pushContextToChildren();}.bind(this),
0);},
getModifiedContext:function(){
var context=this.getContext();
context.set("results.displayRowNumbers",this.isChecked());
return context;},
isChecked:function(){
if(this.getParam(this.PARAM_KEY)==null){
this.setParam(this.PARAM_KEY,this.checkbox.prop("checked"))}
return Splunk.util.normalizeBoolean(this.getParam(this.PARAM_KEY));}});;}catch(e){var err="The module 'Splunk.Module.RowNumbers' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.RowNumbers",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.Segmentation=$.klass(Splunk.Module.DispatchingModule,{
PARAM_KEY:"default",
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("Splunk.Module.Segmentation");
this.select=$("select[name='segmentation']",this.container);
this.select.bind("change",this.handleSelectChange.bind(this));},
getModifiedContext:function(){
var context=this.getContext();
context.set("results.segmentation",this.getSelectedSegmentation());
return context;},
getSelectedSegmentation:function(){
var val=this.getParam(this.PARAM_KEY);
if(!val){
this.setParam(this.PARAM_KEY,this.select.val(),true);}
return this.getParam(this.PARAM_KEY);},
handleSelectChange:function(evt){
this.setParam(this.PARAM_KEY,this.select.val());
this.pushContextToChildren();}});;}catch(e){var err="The module 'Splunk.Module.Segmentation' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.Segmentation",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.Count=$.klass(Splunk.Module,{
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("Count.js");
var options=this.getCountOptions();
var menuDict=[];
for(var i=0,len=options.length;i<len;i++){
var txt=options[i].text;
menuDict.push({"label":_(txt),
callback:(function(val,_this){return function(){
_this.onSelectChange.apply(_this,[val]);}})(txt,this)});}
var perPageMenu=new Splunk.MenuBuilder({
menuDict:menuDict,
activator:$('.perPageLabel',this.container),
menuClasses:'splMenu-primary CountMenu'});},
getCountOptions:function(){
return this.getParam('options')||[];},
getModifiedContext:function(){
var context=this.getContext();
context.set("results.count",this.getParam('default')||$('.perPagePlaceholder',this.container).html());
return context;},
onSelectChange:function(val){
if(isNaN(val)){
return;}
$('.perPagePlaceholder',this.container).text(val);
this.setParam('default',val);
var context=this.getContext();
var search=context.get("search");
if(search&&search.job&&search.job.isCanceled())
return;
this.pushContextToChildren();}});;}catch(e){var err="The module 'Splunk.Module.Count' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.Count",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.Module.SoftWrap=$.klass(Splunk.Module.DispatchingModule,{
CONTEXT_KEY:'results.softWrap',
CONF_KEY:'enable',
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("SoftWrap.js");
this.checkbox=$("input[name='enable']",this.container);
this.checkbox.bind("click",this.onSoftWrapChange.bind(this));},
onSoftWrapChange:function(evt){
setTimeout(
function(){
this.setParam(this.CONF_KEY,this.isChecked());
this.logger.info("onSoftWrapChange - isChecked=",this.getParam(this.CONF_KEY));
this.pushContextToChildren();}.bind(this),
0);},
getModifiedContext:function(){
var context=this.getContext();
context.set(this.CONTEXT_KEY,this.isChecked());
return context;},
isChecked:function(){
return Splunk.util.normalizeBoolean(
this.checkbox.prop('checked'));}});;}catch(e){var err="The module 'Splunk.Module.SoftWrap' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.SoftWrap",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});Splunk.Module.HiddenFieldPicker=$.klass(Splunk.Module.DispatchingModule,{
COMPULSORY_FIELD_LIST:["_raw","_time"],
_selectedFields:[],
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
var fieldParam=this.getParam('fields','')||[];
this.setSelectedFieldList(fieldParam,true);
this.hide(this.HIDDEN_MODULE_KEY);},
getSelectedFieldList:function(){
return this._selectedFields.concat();},
setSelectedFieldList:function(list,writeSessionOnly){
if(typeof(list)=='string'){
this._selectedFields=Splunk.util.stringToFieldList(list);}else if($.isArray(list)){
this._selectedFields=list.slice(0);}else{
throw new Error('Cannot set field list; value must be either string or array');}},
getModifiedContext:function(){
var context=this.getContext();
if(Splunk.util.normalizeBoolean(this.getParam('strictMode'))){
context.set('results.fields',this.getSelectedFieldList());}else{
context.set('results.fields',this.getSelectedFieldList().concat(this.COMPULSORY_FIELD_LIST));}
return context;}});;}catch(e){var err="The module 'Splunk.Module.HiddenFieldPicker' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.HiddenFieldPicker",err);});}try{i18n_register({"catalog":{"+-turn off auto-open":"turn off auto-open","+-turn on auto-open":"turn on auto-open"},"plural":function(n){return n==1?0:1;}});
Splunk.Module.SearchBar=$.klass(Splunk.Module.FieldSearch,{
TYPEAHEAD_PARAM_KEY:'useTypeahead',
ASSISTANT_PARAM_KEY:'useAssistant',
AUTO_FOCUS_KEY:'useAutoFocus',
AUTO_ASSIST_PARAM_KEY:'autoOpenAssistant',
SHOW_COMMAND_HELP_PARAM_KEY:'showCommandHelp',
SHOW_COMMAND_HISTORY_PARAM_KEY:'showCommandHistory',
SHOW_FIELD_INFO_PARAM_KEY:'showFieldInfo',
SUBMIT_BUTTON_PARAM_KEY:'useOwnSubmitButton',
MAX_SEARCH_BAR_HEIGHT_MULTIPLE:80,
MIN_WIDTH_FOR_TWO_COLUMNS:560,
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.ALWAYS_REQUIRE;
this.logger=Splunk.Logger.getLogger("SearchBar.js");
this.fieldName=false;
this.timer=false;
this.label=$('label',this.container);
this.searchFieldWrapperInner=$('.searchFieldWrapperInner',this.container);
this.initAssistant();
this.realBindEventListeners();
this.resize=new Splunk.TextareaResize(this.input,{max_lines:this.MAX_SEARCH_BAR_HEIGHT_MULTIPLE});
if(Splunk.util.normalizeBoolean(this._params[this.SUBMIT_BUTTON_PARAM_KEY])){
this.container.addClass(this.SUBMIT_BUTTON_PARAM_KEY);}
if(Splunk.util.normalizeBoolean(this._params[this.AUTO_FOCUS_KEY])){
$('textarea',this.container).focus();
this.activateSearchBar();}else{
this.deactivateSearchBar(true);}
this.onInputChange();},
initAssistant:function(){
this.assistantWrapper=$('.assistantWrapper',this.container);
this.assistantContainer=$('.assistantContainer',this.assistantWrapper);
this.assistantAutoOpener=$('.assistantAutoOpener',this.container);
this.assistantEnabled=false;
this.assistantRolloverEnabled=true;
this.assistantFillPending=false;
this.assistantNeedsUpdate=false;
this.assistantCursor=0;
this.assistantTimer=0;
this.assistantRolloverTimer=0;
if(this.getParam(this.AUTO_ASSIST_PARAM_KEY)==null){
this.setParam(this.AUTO_ASSIST_PARAM_KEY,true);}
if(this.getParam(this.SHOW_COMMAND_HELP_PARAM_KEY)==null){
this.setParam(this.SHOW_COMMAND_HELP_PARAM_KEY,true);}
if(this.getParam(this.SHOW_COMMAND_HISTORY_PARAM_KEY)==null){
this.setParam(this.SHOW_COMMAND_HISTORY_PARAM_KEY,true);}
if(this.getParam(this.SHOW_FIELD_INFO_PARAM_KEY)==null){
this.setParam(this.SHOW_FIELD_INFO_PARAM_KEY,true);}
this.assistantAutoOpener.bind('click',
function(evt){
this.setAssistantAutoOpen(!Splunk.util.normalizeBoolean(this.getParam(this.AUTO_ASSIST_PARAM_KEY)));
return false;}.bind(this));
this.setAssistantAutoOpen();},
resetUI:function(){
this.setInputField("");},
setInputField:function($super,str){
$super(str);
this.onInputChange();
this.resize._resizeSearchBar();
this.deactivateSearchBar(true);},
setAssistantHeight:function(newHeight){
this.assistantContainer.height(newHeight)
$('.saHelpWrapper',this.assistantContainer).css('min-height',newHeight);},
setAssistantWidth:function(){
assistantInner=$('.assistantInner',this.assistantContainer);
if(assistantInner.length&&(this.input.width()<this.MIN_WIDTH_FOR_TWO_COLUMNS)){
assistantInner.addClass('assistantInnerNarrow');}else{
assistantInner.removeClass('assistantInnerNarrow');}
return true;},
setAssistantAutoOpen:function(isEnabled){
if(typeof(isEnabled)=='undefined'){
isEnabled=Splunk.util.normalizeBoolean(this.getParam(this.AUTO_ASSIST_PARAM_KEY));}else{
this.setParam(this.AUTO_ASSIST_PARAM_KEY,isEnabled);}
this.updateAssistantAutoOpen();},
updateAssistantAutoOpen:function(){
var controlText=Splunk.util.normalizeBoolean(this.getParam(this.AUTO_ASSIST_PARAM_KEY))?_('turn off auto-open'):_('turn on auto-open');
this.assistantAutoOpener.text(controlText);},
openAssistant:function(){
if(!Splunk.util.normalizeBoolean(this.getParam(this.ASSISTANT_PARAM_KEY))){
return false;}
if(this.assistantFillPending)return false;
this.assistantEnabled=true;
$('.assTab',this.container).addClass('assistantEnabled');
this.assistantWrapper.addClass('assistantWrapperEnabled');
this.fillAssistant();
return true;},
closeAssistant:function(){
this.assistantContainer.hide();
this.assistantEnabled=false;
this.assistantFillPending=false;
$('.assTab',this.container).removeClass('assistantEnabled');
this.assistantWrapper.removeClass('assistantWrapperEnabled');
return true;},
toggleAssistant:function(){
this.input.focus();
if(this.assistantEnabled){
this.closeAssistant();}else{
this.openAssistant();}
return false;},
fillAssistant:function(){
if(!this.assistantEnabled)return false;
if(this.assistantFillPending){
this.assistantNeedsUpdate=true;
return false;}
var searchString=this._getUserEnteredSearch();
var namespace=Splunk.util.getCurrentApp();
this.assistantContainer.load(
Splunk.util.make_url('/api/shelper'),{'snippet':'true','namespace':namespace,'search':searchString,'useTypeahead':this.getParam(this.TYPEAHEAD_PARAM_KEY),'useAssistant':this.getParam(this.ASSISTANT_PARAM_KEY),'showCommandHelp':this.getParam(this.SHOW_COMMAND_HELP_PARAM_KEY),'showCommandHistory':this.getParam(this.SHOW_COMMAND_HISTORY_PARAM_KEY),'showFieldInfo':this.getParam(this.SHOW_FIELD_INFO_PARAM_KEY)},
this.fillAssistantCompleteCallback.bind(this));
this.assistantFillPending=true;
return true;},
fillAssistantCompleteCallback:function(){
this.assistantFillPending=false;
if(!this.assistantEnabled){
this.assistantNeedsUpdate=false;
return false;}
if(this.assistantNeedsUpdate){
this.assistantNeedsUpdate=false;
this.fillAssistant();}
this.setAssistantWidth();
this.assistantContainer.show().bgiframe().scrollTop(0);
this.setAssistantHeight(this.assistantContainer.height());
this.assistantKeywordCount=$('.sakeyword',this.assistantContainer).length;
this.assistantCursor=-1;
this.input.focus();
return true;},
selectNextKeyword:function(){
if(this.assistantCursor>=(this.assistantKeywordCount-1)){
this.assistantCursor=this.assistantKeywordCount-1;}else{
this.assistantCursor+=1;
this._highlightKeyword(this.assistantCursor);}
return true;},
selectPreviousKeyword:function(){
if(this.assistantCursor<=0){
this.assistantCursor=-1;
this.input.focus();}else{
this.assistantCursor-=1;}
this._highlightKeyword(this.assistantCursor);
return true;},
useSelectedKeyword:function(updateContents){
if(this.assistantCursor<0)return false;
var value=$('a.sakeyword',this.assistantContainer).slice(this.assistantCursor,this.assistantCursor+1).attr('replacement');
var newval=$.trim(value);
if(newval.substr(-1)!='=')newval+=' ';
this.setSearchTerm(newval);
if(updateContents)
this.fillAssistant();
return true;},
_highlightKeyword:function(keywordPosition){
var el=$('.sakeyword',this.assistantContainer).removeClass('saKeywordSelected').slice(keywordPosition,keywordPosition+1).addClass('saKeywordSelected');
if(el.length){
var win=this.assistantContainer;
var visibleWindowTop=win.scrollTop();
var visibleWindowBottom=win.scrollTop()+win.height();
var elementTop=el.position().top+visibleWindowTop;
var elementHeight=el.outerHeight();
if(elementTop<visibleWindowTop){
win.scrollTop(elementTop);}else if(elementTop+elementHeight>visibleWindowBottom){
win.scrollTop(elementTop+elementHeight-win.height());}
el.focus();}
return true;},
applyContext:function($super,context){
var search=context.get("search");
var stopPropagation=false;
if(this.isPageLoadComplete()){
if((search._intentions.length==1)&&(search._intentions[0]["name"]=="addterm")){
search._intentions[0]["name"]="toggleterm";}
var thisSearchStr=Splunk.util.trim(this._getUserEnteredSearch())||"*";
search.setBaseSearch(thisSearchStr);
context.set("search",search);
stopPropagation=true;}
var searchWasResurrected=!this.isPageLoadComplete();
search.clone().absorbIntentions(function(newQ){
this.setInputField(Splunk.util.stripLeadingSearchCommand(newQ));
if(searchWasResurrected){
this.setChildContextFreshness(false);}else{
this.pushContextToChildren();}}.bind(this));
search.clearIntentions();
context.set("search",search);
this.onInputChange();
return stopPropagation;},
isEmpty:function(){
return($.trim(this.input.attr('value')).length==0);},
_getUserEnteredSearch:function(){
var q=this.input.attr('value')||'*';
q=Splunk.util.addLeadingSearchCommand(q,true);
return q;},
setSearchTerm:function(terms){
this.input.attr('value',terms);
this.onInputChange();
this.input.focus();},
onContextChange:function(){
var context=this.getContext();
var search=context.get("search");
search.absorbIntentions(function(newQ){
this.setInputField(Splunk.util.stripLeadingSearchCommand(newQ));}.bind(this));},
getModifiedContext:function(){
var context=this.getContext();
if(!this.isEmpty()){
var search=context.get("search");
var searchTermStr=this._getUserEnteredSearch();
this.logger.info('getModifiedContext - got search=',searchTermStr);
if(this.baseContext)this.logger.warn(this.moduleType,"WARNING: clobbering base search.");
search.abandonJob();
search.setBaseSearch(searchTermStr);
context.set("search",search);}
return context;},
activateSearchBar:function(){
this.searchFieldWrapperInner.addClass('searchFieldActive');
this.assistantWrapper.show();
this.input.css('margin-top',0);
return true;},
deactivateSearchBar:function(blur){
this.searchFieldWrapperInner.removeClass('searchFieldActive');
this.assistantWrapper.hide();
if(this.resize.isMultiline())this.input.css('margin-top',-3);
if(blur)this.input.blur();
return false;},
bindEventListeners:function(){
this.searchForm.submit(this._onFormSubmit.bind(this));},
realBindEventListeners:function(){
this.input=$('textarea',this.container);
if(this.input.length==0){
this.input=$('<textarea>').appendTo(this.container);}
this.input.bind("focus",this.onInputFocus.bind(this));
this.input.bind("keyup",this.onInputCanonicalKeyUp.bind(this));
$('a.sakeyword',this.container).live("keyup",this.onKeywordCanonicalKeyUp.bind(this));
if($.browser.msie){
this.input.bind("keydown",this.onInputCanonicalKeyPress.bind(this));
this.input.bind("keypress",this.onInputErrantIEKeyPress.bind(this));
$('a.sakeyword',this.container).live("keydown",this.onKeywordCanonicalKeyPress.bind(this));}else if($.browser.safari){
this.input.bind("keydown",this.onInputCanonicalKeyPress.bind(this));
this.input.bind("keypress",this.onInputCanonicalKeyPress.bind(this));
$('a.sakeyword',this.container).live("keydown",this.onKeywordCanonicalKeyPress.bind(this));
$('a.sakeyword',this.container).live("keypress",this.onKeywordCanonicalKeyPress.bind(this));}else{
this.input.bind("keypress",this.onInputCanonicalKeyPress.bind(this));
$('a.sakeyword',this.container).live("keypress",this.onKeywordCanonicalKeyPress.bind(this));}
if(Splunk.util.normalizeBoolean(this.getParam(this.ASSISTANT_PARAM_KEY))){
$('div.assistantWrapper',this.container).show();
$('a.assistantActivator',this.container).css('display','block');
$('div.searchFieldWrapper',this.container).addClass('hasAssistant');
$('.assistantActivator',this.container).bind('click',this.toggleAssistant.bind(this));
this.assistantContainer.bind('click',
function(evt){
var target=evt.target;
if($(target).hasClass('assistantAutoOpener')){
this.setAssistantAutoOpen(!Splunk.util.normalizeBoolean(this.getParam(this.AUTO_ASSIST_PARAM_KEY)));}
if($(target).hasClass('salink')){
return true;}
for(var i=0;i<4;i++){
if(target.tagName!='A'){
target=target.parentNode;}else{
break;}}
if(target.tagName!='A'){
evt.stopImmediatePropagation();
return false;}
var searchString=$(target).attr('replacement');
if(searchString){
this.setSearchTerm(searchString);
this.fillAssistant();}
pos=this.input.attr('value').length;
if(this.input.get(0).setSelectionRange){
this.input.get(0).setSelectionRange(pos,pos);}else if(this.input.get(0).createTextRange){
var range=this.input.get(0).createTextRange();
range.collapse(true);
range.moveEnd('character',pos);
range.moveStart('character',pos);
range.select();}
return false;}.bind(this));
$(document).bind('keyup',
function(evt){
if(evt.keyCode==this.keys['ESCAPE'])this.closeAssistant();}.bind(this));
var searchBar=this;
$(document).bind('click',function(evt){
var target=$(evt.target);
if(target.attr('name')!='q'){
searchBar.closeAssistant();
searchBar.deactivateSearchBar(false);}}.bind(this));
$(".saHandle",this.container).mousedown(
function(evt){
var startY=evt.pageY;
var startHeight=searchBar.assistantContainer.height();
evt.preventDefault();
evt.stopPropagation();
$(this).bind("click.saActiveResize",
function(evt){
evt.preventDefault();
evt.stopPropagation();
return false;});
$(document).bind("mousemove.saActiveResize",
function(evt){
newHeight=startHeight-(startY-evt.pageY);
newHeight=newHeight<75?0:newHeight;
newHeight=Math.min(newHeight,500);
searchBar.setAssistantHeight(newHeight);
evt.preventDefault();
evt.stopPropagation();
return false;});
$(document).bind("mouseup.saActiveResize",
function(evt){
newHeight=startHeight-(startY-evt.pageY);
if(newHeight<75){
searchBar.closeAssistant();
searchBar.setAssistantHeight(startHeight);}
$(document).unbind(".saActiveResize");});
return false;});
$(window).bind("resize",this.setAssistantWidth.bind(this));}},
_onFormSubmit:function($super,event){
if(this.isEmpty()){
return false;}
this.baseContext=null;
return $super(event);},
onInputFocus:function(evt){
this.assistantCursor=-1;
this._highlightKeyword(this.assistantCursor);
this.activateSearchBar();
return true;},
onInputChange:function(){
if(this.isEmpty()){
this.label.show();
return true;}else{
this.label.hide();
return false;}},
onInputErrantIEKeyPress:function(evt){
if(evt.keyCode==this.keys['ENTER']){
if(evt.ctrlKey||evt.shiftKey){
return true;}
return false;}},
onInputCanonicalKeyPress:function(evt){
switch(evt.keyCode){
case this.keys['ESCAPE']:
return this.onEscape(evt);
case this.keys['TAB']:
this.closeAssistant();
this.deactivateSearchBar(false);
case this.keys['DOWN_ARROW']:
if(!evt.shiftKey)return this.onInputDownArrow(evt);
break;
case this.keys['ENTER']:
return this.onInputEnter(evt);
default:
break;}
this.setChildContextFreshness(false);
return true;},
onInputCanonicalKeyUp:function(evt){
switch(evt.keyCode){
case this.keys['ESCAPE']:
return this.onEscape(evt);
case this.keys['ENTER']:
return false;
default:
break;}
if(!this.assistantEnabled){
if(Splunk.util.normalizeBoolean(this.getParam(this.AUTO_ASSIST_PARAM_KEY))){
this.openAssistant();}}else{
clearTimeout(this.assistantTimer);
this.assistantTimer=setTimeout(this.fillAssistant.bind(this),parseInt(this.getParam('assistantDelay',200),10));}
this.onInputChange()
return true;},
onInputEnter:function(evt){
if(evt.ctrlKey||evt.shiftKey){
return true;}
if(this.assistantEnabled){
this.closeAssistant();}
this._onFormSubmit();
return false;},
onInputDownArrow:function(evt){
if(this.assistantEnabled&&this.assistantKeywordCount>0&&(!this.resize.isMultiline()||this.resize.caretIsLast())){
this.selectNextKeyword();
return false;}},
onKeywordCanonicalKeyPress:function(evt){
switch(evt.keyCode){
case this.keys['DOWN_ARROW']:
if(!evt.shiftKey)return this.onInputDownArrow(evt);
break;
case this.keys['UP_ARROW']:
return this.onKeywordUpArrow(evt);
case this.keys['TAB']:
case this.keys['ENTER']:
case this.keys['RIGHT_ARROW']:
case this.keys['SPACE_BAR']:
return this.onKeywordSelect(evt);
case this.keys['ESCAPE']:
return this.onEscape(evt);
default:
break;}
return true;},
onKeywordCanonicalKeyUp:function(evt){
switch(evt.keyCode){
case this.keys['ESCAPE']:
return this.onEscape(evt);
case this.keys['DOWN_ARROW']:
if(!evt.shiftKey)return false;
case this.keys['UP_ARROW']:
case this.keys['TAB']:
case this.keys['ENTER']:
case this.keys['LEFT_ARROW']:
case this.keys['RIGHT_ARROW']:
case this.keys['SPACE_BAR']:
return false;
default:
break;}
if(!this.assistantEnabled){
if(Splunk.util.normalizeBoolean(this.getParam(this.AUTO_ASSIST_PARAM_KEY))){
this.openAssistant();}}else{
clearTimeout(this.assistantTimer);
this.assistantTimer=setTimeout(this.fillAssistant.bind(this),parseInt(this.getParam('assistantDelay',200),10));}
return true;},
onKeywordDownArrow:function(evt){
if(this.assistantEnabled&&this.assistantKeywordCount>0){
this.selectNextKeyword();
return false;}},
onKeywordUpArrow:function(evt){
if(this.assistantEnabled&&(this.assistantKeywordCount>0)){
this.selectPreviousKeyword();
return false;}},
onKeywordSelect:function(evt){
if(this.assistantEnabled){
this.useSelectedKeyword(true);
var searchString=$(evt.target).attr('replacement');
if(searchString){
this.setSearchTerm(searchString);
this.fillAssistant();}
return false;}},
onEscape:function(evt){
this.closeAssistant();
return false;}});;}catch(e){var err="The module 'Splunk.Module.SearchBar' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.SearchBar",err);});}try{i18n_register({"catalog":{"+-Schedule for PDF delivery...":"Schedule for PDF delivery...","+-<p>Your user account does not have permission to schedule search jobs. Contact your Splunk administrator or see <a href=\"%(url)s\" target=\"_blank\">Configuring the PDF Report Server</a> for assistance.</p>":"<p>Your user account does not have permission to schedule search jobs. Contact your Splunk administrator or see <a href=\"%(url)s\" target=\"_blank\">Configuring the PDF Report Server</a> for assistance.</p>","+-Save Search":"Save Search","+-Create alert...":"Create alert...","+-Please run a search first.":"Please run a search first.","+-Failed to save search results.  The search job may have expired.":"Failed to save search results.  The search job may have expired.","+-OK":"OK","+-Get link to results...":"Get link to results...","+-Save results":"Save results","+-Save as event type...":"Save as event type...","+-<p>The PDF Report Server app is not currently installed and enabled on this server.</p><p>See <a href=\"%(url)s\" target=\"_blank\">Configuring the PDF Report Server</a> documentation if you wish to use a remote PDF server, or install the PDF Report Server app on this machine by browsing for it from the Launcher.</p>":"<p>The PDF Report Server app is not currently installed and enabled on this server.</p><p>See <a href=\"%(url)s\" target=\"_blank\">Configuring the PDF Report Server</a> documentation if you wish to use a remote PDF server, or install the PDF Report Server app on this machine by browsing for it from the Launcher.</p>","+-Edit dashboard...":"Edit dashboard...","+-Add to dashboard...":"Add to dashboard...","+-Save search...":"Save search...","+-Schedule for PDF Delivery":"Schedule for PDF Delivery","+-Get Link to Results":"Get Link to Results","+-Server Configuration":"Server Configuration","+-Save As Event Type":"Save As Event Type","+-Export results...":"Export results...","+-Print...":"Print...","+-Received an unexpected response '%s' while fetching the status of the PDF report server":"Received an unexpected response '%s' while fetching the status of the PDF report server","+-Build report...":"Build report...","+-<p>The PDF Report Server is installed on this server, but not currently configured for use.</p><p>Visit <b>System Settings</b>-&gt;<b>Email alert settings</b> in the manager to configure it now, or see <a href=\"%(url)s\" target=\"_blank\">Configuring the PDF Report Server</a> documentation for further details.</p>":"<p>The PDF Report Server is installed on this server, but not currently configured for use.</p><p>Visit <b>System Settings</b>-&gt;<b>Email alert settings</b> in the manager to configure it now, or see <a href=\"%(url)s\" target=\"_blank\">Configuring the PDF Report Server</a> documentation for further details.</p>","+-<p>The PDF Report Server is not currently configured for use.</p><p>Visit <b>System Settings</b>-&gt;<b>Email alert settings</b> in the manager to configure it now, or see <a href=\"%(url)s\" target=\"_blank\">Configuring the PDF Report Server</a> documentation for further details.</p>":"<p>The PDF Report Server is not currently configured for use.</p><p>Visit <b>System Settings</b>-&gt;<b>Email alert settings</b> in the manager to configure it now, or see <a href=\"%(url)s\" target=\"_blank\">Configuring the PDF Report Server</a> documentation for further details.</p>","+-Permission Denied":"Permission Denied","+-Inspect search job...":"Inspect search job...","+-These search results have been saved. You can retrieve them later via the jobs manager.":"These search results have been saved. You can retrieve them later via the jobs manager."},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.TitleBar=$.klass(Splunk.Module.DispatchingModule,{
SAVED_SEARCH_FORM_CONTAINER_CLASS:'.savedSearchForm',
SAVED_SEARCH_FORM_TITLE:_('Save Search'),
SHARE_LINK_FORM_CONTAINER_CLASS:'.shareLinkForm',
SHARE_LINK_FORM_TITLE:_('Get Link to Results'),
EVENTTYPE_FORM_CONTAINER_CLASS:'.eventtypeForm',
EVENTTYPE_FORM_TITLE:_('Save As Event Type'),
REPORTBUILDER_LINK_CLASS:"resultsLink",
DISABLED_CLASS:"disabled",
PDF_STATUS_ENDPOINT:"report/is_enabled",
requiresDispatch:function(search){return false},
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("Splunk.Module.TitleBar");
this.messenger=Splunk.Messenger.System.getInstance();
this.canScheduleSearch=Splunk.ViewConfig.app.can_alert;
this.lastEnabled=null;
$('.editPanel button.move',this.container).bind('click',function(){
Splunk.Globals.Viewmaster.openPanelFormHelper(Splunk.util.getCurrentView(),'move');});
$('.editPanel button.add',this.container).bind('click',function(){
Splunk.Globals.Viewmaster.openPanelFormHelper(Splunk.util.getCurrentView(),'add');});
this.actionsMenuItemsDict=[];
this.actionsMenuItemsDict.push({"label":_("Save search..."),
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.SaveSearchWizard(search);}.bind(this),"showInFilter":['search'],"enabled":["progress","done"]});
if(Splunk.util.getCurrentView()!="charting"){
this.actionsMenuItemsDict.push({"label":_("Build report..."),"enabledWhen":"progress",
callback:function(event){
this.buildReportLink();}.bind(this),"showInFilter":['search'],"enabled":["progress","done"]});}
this.actionsMenuItemsDict.push({"label":_("Add to dashboard..."),
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.DashboardWizard(search);}.bind(this),"showInFilter":['search'],"enabled":["progress","done"]});
if(this.canScheduleSearch){
this.actionsMenuItemsDict.push({"label":_("Create alert..."),
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.AlertWizard(search);}.bind(this),"showInFilter":['search'],"enabled":["progress","done"]});}
if(this.canScheduleSearch){
this.actionsMenuItemsDict.push({"label":_("Schedule search..."),
callback:function(){
var search=this.getContext().get("search");
Splunk.Popup.ScheduleDigestWizard(search);}.bind(this),"showInFilter":['search'],"enabled":["progress","done"]});
this.actionsMenuItemsDict.push({"label":_("Schedule for PDF delivery..."),"callback":this.schedulePDF.bind(this),"showInFilter":['search','dashboard','dashboard-SimpleDashboard'],"enabled":(Splunk.util.getCurrentViewConfig()['view']['hasAutoRun'])?"*":[]});}
this.actionsMenuItemsDict.push({"divider":"actionsMenuDivider","showInFilter":['search'],"enabled":"*"});
this.actionsMenuItemsDict.push({"label":_("Save as event type..."),"alwaysEnabled":true,
callback:this.onEventtypeForm.bind(this),"showInFilter":['search'],"enabled":"*"});
this.actionsMenuItemsDict.push({"divider":"actionsMenuDivider","showInFilter":['search'],"enabled":"*"});
this.actionsMenuItemsDict.push({"label":_("Inspect search job..."),"alwaysEnabled":true,
callback:function(event){
var context=this.getContext();
var search=context.get("search");
Splunk.window.openJobInspector(search.job.getSearchId());
return false;}.bind(this),"showInFilter":['search'],"enabled":"*"});
this.actionsMenuItemsDict.push({"divider":"actionsMenuDivider","showInFilter":['search'],"enabled":"*"});
this.actionsMenuItemsDict.push({"label":_("Save results"),
callback:function(event){
if(this.baseContext){
var search=this.getContext().get("search");
var self=this;
search.job.save(
function(){
self.messenger.send("info","splunk.search",_("These search results have been saved. You can retrieve them later via the jobs manager."))},
function(){
self.messenger.send("error","splunk.search",_("Failed to save search results.  The search job may have expired."));});}}.bind(this),"showInFilter":['search'],"enabled":["progress","done"]});
this.actionsMenuItemsDict.push({"label":_("Get link to results..."),
callback:function(event){
var formContainer=$(this.SHARE_LINK_FORM_CONTAINER_CLASS,this.container)[0]
var title=this.SHARE_LINK_FORM_TITLE;
var search=this.getContext().get("search");
Splunk.Popup.createShareLinkForm(formContainer,title,search);}.bind(this),"showInFilter":['search'],"enabled":["progress","done"]});
this.actionsMenuItemsDict.push({"label":_("Export results..."),
callback:function(event){
var formContainer=$('.exportPopupContainer',this.container)[0];
var context=this.getContext();
var search=context.get("search");
Splunk.Popup.createExportResultsForm(formContainer,search.job);}.bind(this),"showInFilter":['search'],"enabled":["done"]});
this.actionsMenuItemsDict.push({"label":_("Print..."),
callback:function(event){
$(document).trigger("PrintPage");
return false;}.bind(this),"showInFilter":['search','dashboard','dashboard-SimpleDashboard'],"enabled":"*"});
this.messenger=Splunk.Messenger.System.getInstance();
this._showActionsMenu=Splunk.util.normalizeBoolean(this._params["showActionsMenu"]);
this._filter=Splunk.util.normalizeBoolean(this.getParam("actionsMenuFilter"))||'search';
if(this._filter=='dashboard'){
var viewObjectMode=Splunk.util.getCurrentViewConfig()['view']['objectMode'];
if(viewObjectMode=='SimpleDashboard'){
this._filter='dashboard-SimpleDashboard';}}
if(this._showActionsMenu){
this.PERMALINK_SEARCH_CLASS="permalinkSearch";
this.PERMALINK_SID_CLASS="permalinkSID";
this.REPORTBUILDER_CLASS="reportBuilderLink";
this.actionsMenu=new Splunk.MenuBuilder({
containerDiv:this.container,
menuDict:this.getEnabledActionsMenuData(this.actionsMenuItemsDict,"*"),
activator:$('.actionsMenu',this.container),
menuClasses:'splMenu-primary',
filter:this._filter});
this._initEventListeners();}},
_initEventListeners:function(){
$(document).bind('jobDispatched',this.updatePermalinks.bind(this));},
applyContext:function($super,context){
var retVal=$super(context);
if(!this.isPageLoadComplete()){
this.updatePermalinks();}
return retVal;},
schedulePDF:function(){
if(Splunk.util.getCurrentViewConfig()['view']['hasAutoRun']){
return Splunk.Popup.SchedulePDF($('.pdfPopup'),function(error){
this.messenger.send('error',this.moduleType,error);}.bind(this));}else{
return function(){};}},
renderPDF:function(){
if(window.location.href.indexOf('output=pdf')>-1){
window.location.reload();}else{
if(window.location.href.indexOf('?')>-1){
window.location.href=window.location.href+'&output=pdf';}else{
window.location.href=window.location.href+'?output=pdf';}}},
updateActionsMenu:function(enabled){
if(this.lastEnabled&&this.lastEnabled==enabled||!this._showActionsMenu){
return;}
this.lastEnabled=enabled;
var menuData=this.getEnabledActionsMenuData(this.actionsMenuItemsDict,enabled);
this.actionsMenu.updateMenu(menuData);},
getEnabledActionsMenuData:function(menuData,enabled){
var wildCard="*";
var validEnabledValues=["progress","done",wildCard];
if($.inArray(enabled,validEnabledValues)==-1){
this.logger.warn("Invalid menu enabled value of",enabled,", setting default to wildCard");
enabled=wildCard;}
var newMenu=[];
for(var i=0;i<menuData.length;i++){
var oldMenuEntry=menuData[i];
if(!oldMenuEntry.hasOwnProperty("enabled")||wildCard==oldMenuEntry.enabled||$.inArray(enabled,oldMenuEntry.enabled)!=-1){
newMenu.push(oldMenuEntry);}else{
var newMenuEntry={"label":oldMenuEntry.label,"style":this.DISABLED_CLASS,"showInFilter":oldMenuEntry.showInFilter}
newMenu.push(newMenuEntry);}}
return newMenu;},
buildReportLink:function(){
var context=this.getContext();
var search=context.get("search");
var builderLink=$(".JobStatus a."+this.REPORTBUILDER_LINK_CLASS);
if(builderLink.length<1){
this.logger.error(this.moduleType," user clicked 'build report', but we could not find the 'Build report' link in this view.");
return false;}
if(search.isJobDispatched()){
builderLink.click();
return false;}else{
alert(_("Please run a search first."));}},
updatePermalinks:function(event){
var context=this.getContext();
var search=context.get("search");
var args={};
args["q"]=Splunk.util.addLeadingSearchCommand(search.toString());
var range=search.getTimeRange();
if(range){
if(range.getEarliestTimeTerms()){
args["earliest"]=range.getEarliestTimeTerms();}
if(range.getLatestTimeTerms()){
args["latest"]=range.getLatestTimeTerms();}}
$("li."+this.PERMALINK_SEARCH_CLASS+" a",this.container).attr("href","?"+Splunk.util.propToQueryString(args));
$("li."+this.PERMALINK_SID_CLASS+" a",this.container).attr("href","?sid="+encodeURIComponent(search.job.getSearchId()));},
exportPopupAccept:function(){
this.exportForm=$(this.exportPopupHandle).find(".exForm");
return this.exportForm.submit();},
exportPopupCancel:function(){
return true;},
onJobStatusChange:function(event,status){
switch(status){
case'cancel':
this.updateActionsMenu("*");
break;
default:
break;}},
resetUI:function(){
this.updateActionsMenu("*");},
onJobDone:function(){
this.updateActionsMenu("done");},
onJobProgress:function(){
this.updateActionsMenu("progress");},
onContextChange:function(){
var context=this.getContext();
var search=context.get("search");
var savedSearchName="";
if(search.getSavedSearchName()){
savedSearchName=": "+search.getSavedSearchName();}
$("em",this.container).text(savedSearchName);},
onSavedSearchForm:function(event){
var context=this.getContext();
var search=context.get("search");
var formContainer=$(this.SAVED_SEARCH_FORM_CONTAINER_CLASS,this.container)[0]
var title=this.SAVED_SEARCH_FORM_TITLE;
Splunk.Popup.createSavedSearchForm(formContainer,title,search);},
onEventtypeForm:function(event){
var context=this.getContext();
var search=context.get("search");
var formContainer=$(this.EVENTTYPE_FORM_CONTAINER_CLASS,this.container)[0];
Splunk.Popup.createEventtypeForm(formContainer,this.EVENTTYPE_FORM_TITLE,search);}});;}catch(e){var err="The module 'Splunk.Module.TitleBar' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.TitleBar",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.ConditionalSwitcher=$.klass(Splunk.Module.AbstractSwitcher,{
initialize:function($super,container){
$super(container);
this._locked=true;
this.hide(this.HIDDEN_MODULE_KEY);},
requiresDispatch:function($super,search){
try{
return!search.isJobDispatched();}catch(e){
return $super(search);}},
checkCondition:function(){
var conditionStr=this.getParam("condition");
var context=this.getContext();
var search=context.get("search");
var job=context.get("search").job;
var conditionResult=!!eval("("+this.getParam("condition")+")");
this.logger.debug(this.moduleType+" evaluating ("+conditionStr+") and its "+conditionResult);
return conditionResult;},
onJobStatusChange:function(){
this.onJobProgress();},
onJobProgress:function(){
var conditionStr=this.getParam("condition");
if(conditionStr.indexOf("job")!=-1){
var result=this.checkCondition();
if(result&&this._activeChildIndex!=0){
this.setActiveChild(0);
this.pushContextToChildren();}else if(!result&&this._activeChildIndex!=1){
this.setActiveChild(1);
this.pushContextToChildren();}}},
addChild:function($super,child){
if(this._children.length>1){
this.logger.error("ERROR - ConditionalSwitcher can only have 2 children. A third child will never be visible and never receive any data.");
return false;}
return $super(child);},
onContextChange:function($super){
$super();
try{
var result=this.checkCondition();
if(result){
this.setActiveChild(0);}else{
this.setActiveChild(1);}
this._locked=false;}catch(e){
this.logger.warn("the condition threw an exception "+e);
this._locked=true;}},
pushContextToChildren:function($super,explicitContext){
if(this._locked)return false;
return $super(explicitContext);}});;}catch(e){var err="The module 'Splunk.Module.ConditionalSwitcher' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.ConditionalSwitcher",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.LinkSwitcher=$.klass(Splunk.Module.TabSwitcher,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("link_switcher.js");},
createTabElement:function(childTitle){
return $("<a/>").text(childTitle);},
onLoadStatusChange:function($super,statusInt){
$super(statusInt);
if(!this.isPageLoadComplete()&&statusInt==Splunk.util.moduleLoadStates.HAS_CONTEXT){
$("ul li:not(:last-child)",this.container).append("<span class='linkSwitcherPipe'> | </span>");
$("ul li",this.container).append("<span class='linkSwitcherSelectedIcon'></span>");}}});;}catch(e){var err="The module 'Splunk.Module.LinkSwitcher' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.LinkSwitcher",err);});}try{i18n_register({"catalog":{},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.ButtonSwitcher=$.klass(Splunk.Module.TabSwitcher,{
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("button_switcher.js");
var label=this._params["label"];
if(label){
$("<label/>").text(label).prependTo(this.container);}},
createTabElement:function(childTitle,childAltTitle){
var child=$("<a/>").addClass(childTitle);
if(childAltTitle){
child.attr("title",childAltTitle);}
return child;},
setActiveChild:function($super,childIndex){
$super(childIndex);
this._params["selected"]=this._titles[childIndex];}});;}catch(e){var err="The module 'Splunk.Module.ButtonSwitcher' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.ButtonSwitcher",err);});}try{i18n_register({"catalog":{"+-%(fieldName)s is in %(percent)s%% of results":"%(fieldName)s is in %(percent)s%% of results","+-Selected fields (%s)":"Selected fields (%s)","+-(<em>n</em>)":"(<em>n</em>)","+-%(fieldName)s %(numericIndicator)s (%(optionalGreaterThanSymbol)s%(count)s)":"%(fieldName)s %(numericIndicator)s (%(optionalGreaterThanSymbol)s%(count)s)","+-Show only events with this field":"Show only events with this field"},"plural":function(n){return n==1?0:1;}});
Splunk.Module.MultiFieldViewer=$.klass(Splunk.Module.AbstractPagedModule,{
MOUSEOVER_HIGHLIGHT_CLASS:"mouseoverHighlight",
SELECTED_HIGHLIGHT_CLASS:"selected",
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.NEVER_ALLOW;
this._requestInProgress=false;
this.logger=Splunk.Logger.getLogger("MultiFieldViewer.js");
this.messenger=Splunk.Messenger.System.getInstance();
this._fieldLayerContainer=$(".fieldLayers",this.container);
this._fieldTabsContainer=$(".fieldTabs",this.container);
this._fieldHeaderText=_("%s selected fields");
var popupLayerTemplate=$('.popupContainer',this.container);
var reportLinkTarget=(this._params["link"])?this._params["link"]["view"]:false;
this.fieldSummaryLayer=new Splunk.Popup.FieldSummaryLayer(
popupLayerTemplate,
this._fieldLayerContainer,
reportLinkTarget);
$(document).click(this._onDocumentClick.bind(this));},
_onDocumentClick:function(evt){
if(!$(evt.target).is(".fieldTabs > div, .fieldTabs > div *")){
this.hideAll();}},
onContextChange:function(){
var context=this.getContext();
if(context.has("results.fields")){
this.getResults();}},
onBeforeJobDispatched:function(search){
search.setMinimumStatusBuckets(1);
var fields=this.getNormalizedFields();
if(fields.length>0){
search.setRequiredFields(fields);}},
onJobProgress:function(event){
this.getResults();},
getResultURL:function(params){
var search=this.getContext().get("search");
return search.getUrl('summary',params);},
getResultParams:function(){
var params={};
params["min_freq"]=0;
var fields=this.getNormalizedFields();
if(fields.length>0){
params["field_list"]=fields;}
return params;},
getResultsErrorHandler:function($super,xhr,textStatus,exception){
if(textStatus=='parsererror'){
return;}
return $super(xhr,textStatus,exception);},
updateHeader:function(fieldCount){
var fieldHeader=$(".inlineFieldHeader",this.container);
fieldHeader.html('')
$("<h4>").text(sprintf(this._fieldHeaderText,fieldCount)).appendTo(fieldHeader);},
renderResults:function(xmlDoc){
this._fieldTabsContainer.html('');
var moduleInstance=this;
var summaryNode=$(xmlDoc).find("summary");
var eventCount=summaryNode.attr("c");
var fieldNodes=$(xmlDoc).find("field");
var matchingFields=this.getMatchingFields(fieldNodes)
this.updateHeader(matchingFields.length);
$.each(matchingFields,function(index){
var fieldElt=$(this);
var fieldName=Splunk.util.escapeBackslash(fieldElt.attr("k"));
var count=fieldElt.attr("c");
var distinctCount=fieldElt.attr("dc");
var isExact=Splunk.util.normalizeBoolean(fieldElt.attr("exact"));
var isNumeric=(fieldElt.attr("nc")>count/2);
var tabAnchor=moduleInstance.addTab(fieldName,count,distinctCount,eventCount,isExact,isNumeric);
if(moduleInstance._openTabFieldName==fieldName){
if(moduleInstance._requestInProgress){
moduleInstance.logger.warn(moduleInstance.moduleType+" got a progress event with an open summaries layer, but we're still waiting for a previous request. TODO - This can lead to stale data being displayed.")}else{
moduleInstance.fieldSummaryLayer.refresh(
moduleInstance.onFieldSummaryLayerRender.bind(moduleInstance),
moduleInstance.onFieldValueClick.bind(moduleInstance),
moduleInstance.getContext().get("results.count"));}}});
$(".allFieldsLink",this.container).remove();
var fieldPicker=$(".FieldPicker");
var search=this.getContext().get("search");
var fieldPickerCount=search.job.getEventFieldCount();
if(fieldPicker&&fieldPickerCount){
var allFieldsLink=$("<a>").addClass("allFieldsLink").attr("href","#").click(function(evt){
$("a.fpActivate",fieldPicker).click();
return false;}).text(_("Edit"));
this.container.prepend(allFieldsLink);}},
getMatchingFields:function(fieldNodes){
return fieldNodes},
addTab:function(fieldName,count,distinctCount,eventCount,isExact,isNumeric){
var moduleInstance=this;
var tabContainer=$("<div/>").click(function(evt){
moduleInstance.openLayer($(this),fieldName,count,distinctCount,eventCount,isExact,isNumeric);
evt.preventDefault();}).append('<span class="splIcon splIcon-triangle-4-e"></span>');
var tabText=_("%(numericIndicator)s  <span class='fieldName'>%(fieldName)s</span> <span class='valueCount'>(%(optionalGreaterThanSymbol)s%(count)s)</span>");
var tabTextParams={
fieldName:Splunk.util.escapeHtml(Splunk.util.smartTrim(fieldName,this.getParam('maxDisplayLength'))),
numericIndicator:(isNumeric)?_("<span class='iconNumeric'>#</span>"):"<span class='iconString'>a</span>",
optionalGreaterThanSymbol:isExact?'':'≥',
count:distinctCount}
var anchor=$("<a href='#'></a>").html(sprintf(tabText,tabTextParams)).attr('title',fieldName);
if(this._openTabFieldName==fieldName){
tabContainer.addClass(this.SELECTED_HIGHLIGHT_CLASS);}
anchor.appendTo(tabContainer);
tabContainer.mouseover(function(event){
$(this).addClass(moduleInstance.MOUSEOVER_HIGHLIGHT_CLASS)}).mouseout(function(event){
$(this).removeClass(moduleInstance.MOUSEOVER_HIGHLIGHT_CLASS)})
this._fieldTabsContainer.append(tabContainer);
return anchor;},
resetUI:function(){
if(this.fieldSummaryLayer)this.fieldSummaryLayer.close();
this._fieldTabsContainer.html('');
$(".inlineFieldHeader",this.container).html('')
$(".allFieldsLink",this.container).remove();},
hideAll:function(){
this._setSelectedTab();
if(this.fieldSummaryLayer)this.fieldSummaryLayer.close();},
_setSelectedTab:function(tab,fieldName){
this._openTabFieldName=fieldName;
var previouslySelectedTab=$("."+this.SELECTED_HIGHLIGHT_CLASS,this.container);
previouslySelectedTab.removeClass(this.SELECTED_HIGHLIGHT_CLASS);
if(tab)tab.addClass(this.SELECTED_HIGHLIGHT_CLASS);},
openLayer:function(tab,fieldName,count,distinctCount,eventCount,isExact,isNumeric){
this._requestInProgress=true;
this._setSelectedTab(tab,fieldName);
var onCancelled=function(){
this._setSelectedTab();
this._openTabFieldName=false;}.bind(this);
var customLinks=this.getCustomLinks(fieldName,count,distinctCount,eventCount,isExact,isNumeric);
this.fieldSummaryLayer.setField(
this.getContext().get("search"),
fieldName,
count,
distinctCount,
eventCount,
isNumeric,
customLinks,
this);
this.fieldSummaryLayer.open(tab,onCancelled);
this.fieldSummaryLayer.refresh(
this.onFieldSummaryLayerRender.bind(this),
this.onFieldValueClick.bind(this),
this.getContext().get("results.count"));},
getCustomLinks:function(fieldName,count,distinctCount,eventCount,isExact,isNumeric){
var customLinks=[];
var frequencyText=_("Appears in %(percent)s%% of results");
var frequencyPercentage=Math.round(count/eventCount*100);
var frequencyArgs={fieldName:Splunk.util.escapeHtml(fieldName),percent:frequencyPercentage};
customLinks.push($("<h4>"+sprintf(frequencyText,frequencyArgs)+"</h4>"));
customLinks.push($('<a href="#"></a>').text(_("Show only events with this field")).click(this.narrowToSelected.bind(this)));
return customLinks;},
narrowToSelected:function(){
var fieldName=this.fieldSummaryLayer.fieldName;
var intentionArg={};
intentionArg[fieldName]="*"
var intention={name:"addterm",arg:intentionArg};
var search=new Splunk.Search();
search.addIntention(intention);
var context=new Splunk.Context();
context.set("search",search);
this.passContextToParent(context);
return false;},
onFieldSummaryLayerRender:function(){
this._requestInProgress=false;},
onFieldValueClick:function(evt,fieldName,fieldValue){
var intention={};
intention["name"]=(evt.altKey)?"negateterm":"addterm";
intention["arg"]={}
intention["arg"][fieldName]=fieldValue;
var search=new Splunk.Search();
search.addIntention(intention);
var context=new Splunk.Context();
context.set("search",search);
this.passContextToParent(context);}});;}catch(e){var err="The module 'Splunk.Module.MultiFieldViewer' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.MultiFieldViewer",err);});}try{i18n_register({"catalog":{"+-%(humanReadableTime)s (%(actualAbsoluteTime)s)":"%(humanReadableTime)s (%(actualAbsoluteTime)s)"},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.ResultsHeader=$.klass(Splunk.Module.SimpleResultsHeader,{
customTimeHeaders:[],
initialize:function($super,container){
$super(container);
this._eventCountHeader=$(".numberOfEvents",this.container);
this._entityLabelHeader=$(".entityLabelStr",this.container);
this._timeRangeHeader=$(".timeRangeStr",this.container);
this._entityLabel=this.getParam("entityLabel");
this._entityLabelSingular=this.getParam("entityLabelSingular");
if(!this._entityLabel){
this.logger.error(this.moduleType,".initialize Assertion failed. Required param entityLabel not set.");
this._entityLabel="events";}
if(this._params.hasOwnProperty("link")){
this._link=$("<a/>").hide().text(this._params["link"]["label"]).prependTo($(this.container));
if(this._params["link"]["popup"]){
this._link.attr("rel","popup");}
var moduleInstance=this;
this._link.click(function(event){
var search=this.getContext().get("search");
search.job.setAsAutoCancellable(false);
if($(this).attr("rel")=="popup"){
this._popupWindow=window.open($(this).attr("href"),moduleInstance._params["link"]["viewTarget"],"resizable=yes,status=no,scrollbars=yes,toolbar=no");
try{
this._popupWindow.focus();}catch(e){}
return false;}else{
return true;}})}
this.messenger=Splunk.Messenger.System.getInstance();
this.customTimeHeaders=this._params["customTimeHeaders"]||[];},
onContextChange:function(){
var context=this.getContext();
var search=context.get("search");
var newSID=search.job.getSearchId();
if(!this._previousSID||this._previousSID!=newSID){
this._previousSID=newSID;
this.resetUI();
if(this._link)this._link.hide();}
this.updateTimeHeader(search.getTimeRange());
var count=this.getEntityCount(search);
this.setCountHeader(count,search.job.isDone());},
getMatchingCustomHeader:function(range){
for(var i=0;i<this.customTimeHeaders.length;i++){
var item=this.customTimeHeaders[i];
var itemRange=new Splunk.TimeRange(item["earliest_time"],item["latest_time"]);
if(range.equalToRange(itemRange)){
if("header_label"in item){
return item["header_label"];}else if("label"in item){
var label=item["label"];
return label.slice(0,1).toLowerCase()+label.slice(1);}}}
return false;},
updateTimeHeader:function(range){
var header=this.getMatchingCustomHeader(range)||range.toConciseString();
var job=this.getContext().get("search").job;
var actualIndexRange=new Splunk.TimeRange(job["_searchEarliestTime"],job["_searchLatestTime"]);
if(!actualIndexRange.isAllTime()){
if(range.isAbsolute()){
if(!range.isSubRangeOfJob()&&!range.equalToRange(actualIndexRange)){
this.logger.warn("error - absolute search time range requested does not match the time range that was searched on disk. \nsearched=",range,"\nreturned=",actualIndexRange);}}else{
header=sprintf(_("%(humanReadableTime)s (%(actualAbsoluteTime)s)"),{humanReadableTime:header,actualAbsoluteTime:actualIndexRange.toConciseString()});}}
this._timeRangeHeader.text(header);},
onJobDone:function(){
var context=this.getContext();
var search=context.get("search");
var count=this.getEntityCount(search);
if(this._link&&count>0){
var path=Splunk.util.make_url("/app/",Splunk.util.getCurrentApp(),this._params["link"]["viewTarget"]);
var url=path+"?"+$.param({"sid":search.job.getSearchId()});
this._link.attr("href",url);
this._link.show().css({display:'inline'});}
this.updateTimeHeader(search.getTimeRange());},
setCountHeader:function(count,isDone){
var modifier=(isDone)?"":"&#8805; ";
this._eventCountHeader.html(modifier+Splunk.util.getCommaFormattedNumber(count));
if(this._entityLabelSingular){
this._entityLabelHeader.text(ungettext(_(this._entityLabelSingular),_(this._entityLabel),count));}else{
this._entityLabelHeader.text(_(this._entityLabel));}},
resetUI:function(){
this._eventCountHeader.html('');
this._entityLabelHeader.html('');
this._timeRangeHeader.html('');}});;}catch(e){var err="The module 'Splunk.Module.ResultsHeader' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.ResultsHeader",err);});}try{i18n_register({"catalog":{"+-Tag %(field_name)s=%(field_value)s":"Tag %(field_name)s=%(field_value)s","+-Could not load %(resource)s":"Could not load %(resource)s","+-Tag This Field":"Tag This Field","+-Getting search results...":"Getting search results...","+-Report on field":"Report on field","+-Tagging is currently unavailable.":"Tagging is currently unavailable.","+-Could not retrieve updated lines, try again?":"Could not retrieve updated lines, try again?","+-Retrieving updated lines...":"Retrieving updated lines..."},"plural":function(n){return n==1?0:1;}});Splunk.Module.EventsViewer=$.klass(Splunk.Module.AbstractPagedModule,{
EVENT_SELECTOR:"li.item",
LOADING_MESSAGE:_("Getting search results..."),
MENU_LOADER_CLASS_NAME:"loader",
FIELD_ACTIONS_RESOURCE:"/api/field/actions/%(app)s/%(sid)s/%(offset)s?maxLines=%(maxLines)s",
FIELD_ACTIONS_FIELD_NAME_WILDCARD:"*",
FIELD_ACTIONS_FIELD_VALUE_WILDCARD:"*",
FIELD_MENU_CLASSES:"splMenu-primary",
FIELD_MENU_CLASS_NAME:"fm",
FIELD_NAME_CLASS_NAME:"k",
FIELD_VALUE_CLASS_NAME:"v",
EVENT_ACTION_MENU_CLASSNAME:"actions",
RENDER_REFRESH_TIME_CONSTRAINT:1.5,
REPORT_LINK_INTENTION:'{"name": "plot", "arg": {"mode": "timechart", "fields": [["count", "__events"]], "splitby": "%(fieldName)s"}}',
RESULTS_CONTAINER_CLASS_NAME:"buffer",
SCROLLER_ENABLED_CLASS_NAME:"EventsViewerScroller",
SEGMENT_HOVER_CLASS_NAME:"h",
SHOW_INLINE_CLASS_NAME:"showinline",
SHOW_INLINE_LOADING_MESSAGE:_("Retrieving updated lines..."),
SHOW_INLINE_ERROR_MESSAGE:_("Could not retrieve updated lines, try again?"),
SHOW_SOURCE_CLASS_NAME:"showsrc",
SOFT_WRAP_CLASS_NAME:"EventsViewerSoftWrap",
STATUS_MESSAGE_SELECTOR:".resultStatusMessage .resultStatusHelp",
TAG_CLASS_NAME:"tg",
TAG_ERROR_MESSAGE:_("Tagging is currently unavailable."),
TAG_FIELD_POPUP_ACTION_CLASS_NAME:"tf",
TAG_FIELD_POPUP_TITLE:_("Tag This Field"),
TAG_FIELD_POPUP_SELECTOR:".tagfieldpopup",
TAG_INTENTION_PREFIX:"tag::",
TERM_CLASS_NAME:"t",
TIMESTAMP_CLASS_NAME:"time",
TIMESTAMP_EPOCH_TIME_ATTRIBUTE_NAME:"s:epoch",
UI_EVENT_TYPES:["click","mouseover","mouseout","change"],
initialize:function($super,container){
$super(container);
this.logger=Splunk.Logger.getLogger("events_viewer.js");
this.mergeLoadParamsIntoContext("results",["displayRowNumbers","segmentation","softWrap"]);
this.doc=$(document);
this.enableBehavior=Splunk.util.normalizeBoolean(this._params.enableBehavior);
this.enableEventActions=Splunk.util.normalizeBoolean(this._params.enableEventActions);
this.enableFieldActions=Splunk.util.normalizeBoolean(this._params.enableFieldActions);
this.enableTermSelection=Splunk.util.normalizeBoolean(this._params.enableTermSelection);
this.menu=null;
this.menuXHR=null;
this.maxLinesConstraint=parseInt(this._params.maxLinesConstraint,10);
this.messenger=Splunk.Messenger.System.getInstance();
this.reportFieldLink=this._params.reportFieldLink||null;
this.renderedCount=-1;
this.resultsContainer=$("."+this.RESULTS_CONTAINER_CLASS_NAME,this.container);
this.scrollerMinHeight=parseInt(this._params.scrollerMinHeight,10);
this.scrollerMaxHeight=parseInt(this._params.scrollerMaxHeight,10);
this.scroller=null;
if(Splunk.util.normalizeBoolean(this._params.scrollerEnable)){
this.scroller=new Splunk.scroller.YAxis(this.scrollerMinHeight,this.scrollerMaxHeight,this.container,this.SCROLLER_ENABLED_CLASS_NAME);}
if(this.enableBehavior){
this.bindEventListeners();}},
bindEventListeners:function(){
this.container.bind(this.UI_EVENT_TYPES.join(" "),this.onUIEvent.bind(this));},
closest:function(node,expression){
if($.browser.msie){
if(node.is(expression)){
return node;}else{
while(node.parent().length>0){
var parent=node.parent(expression);
if(parent.length>0){
return parent;}
node=node.parent();}
return $([]);}}else{
return node.closest(expression);}},
getAdjacentFieldName:function(element){
var selector="."+this.FIELD_NAME_CLASS_NAME+":first";
return element.siblings(selector).text();},
getAdjacentFieldValue:function(element){
var selector="."+this.FIELD_VALUE_CLASS_NAME+":first";
return element.siblings(selector).text();},
getRendererNamespace:function(target){
if(!target[0].SplunkRendererNamespace){
var parent=this.closest(target,this.EVENT_SELECTOR);
var namespace=(parent.length)?parent.attr("s:renderernamespace"):null;
if(namespace){
target[0].SplunkRendererNamespace=namespace;
return namespace;}else{
return"";}}else{
return target[0].SplunkRendererNamespace;}},
getResults:function($super){
var context=this.getContext();
var search=context.get("search");
if(search.isJobDispatched()){
this.menuGC([this.menu]);
$super();}},
getResultParams:function($super){
var params=$super();
var context=this.getContext();
var search=context.get("search");
params.display_row_numbers=(Splunk.util.normalizeBoolean(context.get("results.displayRowNumbers"))?1:0);
params.entity_name=this.getParam("entityName");
params.enable_event_actions=(this.enableEventActions)?1:0;
params.enable_field_actions=(this.enableFieldActions)?1:0;
params.segmentation=context.get("results.segmentation");
params.sid=search.job.getSearchId();
params.min_lines=params.max_lines;
params.max_lines_constraint=this.maxLinesConstraint;
if(
search.job.getEventSorting()=="realtime"&&this.getParam("entityName")=="events"&&!this.getSortField()){
params.offset=-(context.get("results.offset"))-context.get("results.count");}
if($.browser.msie){
params.replace_newlines=1;}
var postProcess=search.getPostProcess();
if(postProcess){
params.post_process=postProcess;}
if(search.job.getStatusBuckets()==0)params.entity_name='results_preview';
return params;},
getSegmentParent:function(element){
var parent=element.parentNode;
if(parent.childNodes[parent.childNodes.length-1]==element&&$(parent).hasClass(this.TERM_CLASS_NAME)){
element=parent;}
return $(element);},
menuGC:function(menus){
for(var i=0;i<menus.length;i++){
var menu=menus[i];
if(menu){
menu.removeMenu();
menu=null;}}},
onBeforeJobDispatched:function(search){
search.setMinimumStatusBuckets(1);
var fields=this.getNormalizedFields();
if(fields.length>0){
search.setRequiredFields(fields);}},
onContextChange:function($super){
$super();
this.renderedCount=-1;
var context=this.getContext();
if(context.has("results.softWrap")){
this.setSoftWrapClassName(Splunk.util.normalizeBoolean(context.get("results.softWrap")));}
if(context.has("results.scrollerEnable")){
if(context.get("results.scrollerEnable")&&!this.scroller){
this.scroller=new Splunk.scroller.YAxis(this.scrollerMinHeight,this.scrollerMaxHeight,this.container,this.SCROLLER_ENABLED_CLASS_NAME);}else if(this.scroller){
this.scroller.destroy();
this.scroller=null;}}
var search=context.get("search");
if(!search||!search.isJobDispatched()){
this.logger.error("Assertion failed - ",this.moduleType," extends DispatchingModule but has received an undispatched search");}
if(this.haveResultParamsChanged()&&(search.job.isDone()||(search.job.getEventAvailableCount()>0))){
this._pageComplete=false;
this.getResults();}},
onFieldSelect:function(event){
var element=$(event.target);
var name=this.getIntentionName(event);
var fieldName=this.getAdjacentFieldName(element);
var intention={
arg:{},
name:name};
intention.arg[fieldName]=element.text();
intention=this.getKeydownMutatedIntention(intention,event);
this.passIntention(intention);},
onJobProgress:function(event){
var context=this.getContext();
var search=context.get("search");
if(search.job.getEventSorting()=="desc"&&!search.getTimeRange().isRealTime()&&!search.job.isDone()){
var needMoreEvents=this.renderedCount<context.get("results.count");
var moreEventsAreAvailable=search.job.getEventAvailableCount()>this.renderedCount;
if(needMoreEvents&&moreEventsAreAvailable){
this.renderedCount=Math.min(search.job.getEventAvailableCount(),context.get("results.count"));
this.getResults();}}else{
this.getResults();}},
onMenuData:function(data,defaults){
if(data.status==200){
try{
var envelope=JSON.parse(data.responseText);}catch(e){
this.logger.error("Could not parse field menu",e);
this.menuGC([this.menu]);
return;}
if(envelope.success){
var menuData=[];
var fieldActions=Splunk.Module.EventsViewer.FieldAction.menuDataRemap(envelope.data);
var menuItems=defaults.concat(fieldActions);
for(var i=0;i<menuItems.length;i++){
var menuItem=menuItems[i];
if(menuItem.hasOwnProperty("callback")){
var callback=menuItem.callback;
if(this[callback]){
menuItem.callback=this[callback].bind(this);}else if(window[callback]){
menuItem.callback=window[callback];}else{
menuItem.callback=function(){
this.logger.info("No callback defined for this menu item.");}.bind(this);}
this.logger.info(callback);}
menuData.push(menuItem);}
if(this.menu){
try{
this.menu.updateMenu(menuData);
this.logger.info("Successfully loaded serialized field action menu items.");}catch(e){
this.logger.error("Could not instantiate field menu with data",JSON.stringify(menuData),e);
this.menuGC([this.menu]);}}else{
this.logger.warn("No menu instance exists, menu not updated.");}}else{
this.logger.warn("The field menu data is invalid",envelope);
this.menuGC([this.menu]);}}else{
this.logger.warn("Could not load field menu data.");
this.menuGC([this.menu]);}},
onPost:function(event){
var element=$(event.target);
var form=$('<form/>');
var target=element.attr("s:post.target");
if(target){
form.attr('target',target);}
var uri=element.attr("s:post.uri");
if(uri){
form.attr('action',uri);}
form.attr('method','post');
var payload=element.data('data');
if(payload){
for(var param in payload){
if(!payload.hasOwnProperty(param))continue;
var input=$('<input/>');
input.attr({'type':'hidden','name':param,'value':payload[param]});
form.append(input);}}
var appendedElement=this.container[0].appendChild(form[0]);
appendedElement.submit();
this.container[0].removeChild(appendedElement);
return false;},
onReportField:function(event){
var element=$(event.target);
var fieldName=element.attr("s:fieldname");
var intention=JSON.parse(sprintf(this.REPORT_LINK_INTENTION,{fieldName:fieldName}));
var context=this.getContext();
var search=context.get("search");
var baseSID=search.job.getSearchId();
search.abandonJob();
search.addIntention(intention);
search.sendToView(this.reportFieldLink,{base_sid:baseSID},true,true,{autosize:true});
return false;},
onShowInline:function(event){
var element=$(event.target);
var resource=element.attr("href");
var target=this.closest(element,this.EVENT_SELECTOR);
element.html(this.SHOW_INLINE_LOADING_MESSAGE);
$.ajax({
type:"GET",
url:resource,
dataType:"html",
error:function(){
this.logger.error(sprintf(_("Could not load %(resource)s"),{resource:resource}));}.bind(this),
complete:function(data,textStatus){
if(data.status==200){
target.html(data.responseText);}else{
element.html(this.SHOW_INLINE_ERROR_MESSAGE);}}.bind(this)});
return false;},
onShowSource:function(event){
var element=$(event.target);
Splunk.window.open(element.attr("href"),"showsource");
return false;},
onSearch:function(event){
var element=$(event.target);
var searchStr=element.attr("s:search.search_string");
var view=element.attr("s:search.view");
var app=element.attr("s:search.app");
var target=element.attr("s:search.target");
var preserve_tr=Splunk.util.normalizeBoolean(element.attr("s:search.preserve_timerange"));
var earliest=element.attr("s:search.earliest");
var latest=element.attr("s:search.latest");
var search=null;
if(preserve_tr){
var context=this.getContext();
search=context.get("search");
search.abandonJob();
search.setBaseSearch(searchStr);}else{
search=new Splunk.Search();
search.setBaseSearch(searchStr);}
if(earliest||latest){
var timerange=new Splunk.TimeRange(earliest,latest);
search.setTimeRange(timerange);}
var openPopup=(target=="_self")?false:true;
search.sendToView(view,{},false,openPopup,{'windowFeatures':'resizable=yes,status=no,scrollbars=yes,toolbar=yes'},app);
return false;},
onShowEventMenu:function(event){
this.onShowMenu(event,this.FIELD_ACTIONS_FIELD_NAME_WILDCARD,this.FIELD_ACTIONS_FIELD_VALUE_WILDCARD,[]);
return true;},
onShowFieldMenu:function(event){
var element=$(event.target);
var fieldName=this.getAdjacentFieldName(element);
var fieldValue=this.getAdjacentFieldValue(element);
var defaults=Splunk.Module.EventsViewer.FieldAction.fieldMenuDefaults(fieldName,fieldValue);
this.onShowMenu(event,fieldName,fieldValue,defaults);
return true;},
onShowMenu:function(event,fieldName,fieldValue,defaults){
event.preventDefault();
var element=$(event.target);
if(element[0].nodeName==="SPAN"){
element=element.parent();}
var context=this.getContext();
var search=context.get("search");
var max_lines=context.get("results.maxLines");
var appURIComponent=encodeURIComponent(Splunk.util.getCurrentApp());
var sidURIComponent=encodeURIComponent(search.job.getSearchId());
var resource=Splunk.util.make_url(sprintf(this.FIELD_ACTIONS_RESOURCE,{app:appURIComponent,sid:sidURIComponent,offset:this.closest(element,this.EVENT_SELECTOR).attr("s:offset"),maxLines:max_lines}));
var data={
view:Splunk.util.getCurrentView()};
if(fieldName!=this.FIELD_ACTIONS_FIELD_NAME_WILDCARD){
data.field_name=fieldName;}
if(fieldValue!=this.FIELD_ACTIONS_FIELD_VALUE_WILDCARD){
data.field_value=fieldValue;}
var timeRange=search.getTimeRange();
if(timeRange.isSubRangeOfJob()){
data.latest_time=timeRange.getLatestTimeTerms();}
this.menuGC([this.menu]);
this.menu=new Splunk.MenuBuilder({
containerDiv:this.container,
menuDict:[{
menuType:"htmlBlock",
element:$("."+this.MENU_LOADER_CLASS_NAME,this.container),
action:"clone"}],
activator:element,
menuClasses:this.FIELD_MENU_CLASSES,
showOnInit:true});
if(this.menuXHR){
this.logger.info("Existing XHR request canceled.");
try{
this.menuXHR.abort();}catch(e){}
this.menuXHR=null;}
this.menuXHR=$.ajax({
type:"GET",
url:resource,
data:data,
dataType:"text",
error:function(){
this.logger.error(sprintf(_("Could not load %(resource)s"),{resource:resource}));}.bind(this),
complete:function(data,textStatus){
this.onMenuData(data,defaults);}.bind(this)});},
onTagField:function(event){
var element=$(event.target);
var fieldName=element.attr("s:fieldname");
var fieldValue=element.attr("s:fieldvalue");
try{
new Splunk.Popup.createTagFieldForm($(this.TAG_FIELD_POPUP_SELECTOR),this.TAG_FIELD_POPUP_TITLE,element.attr("s:fieldname"),element.attr("s:fieldvalue"),this.getResults.bind(this));}catch(e){
this.logger.warn("Could not launch tag popup field form",e);}
return false;},
onTagSelect:function(event){
var element=$(event.target);
var name=this.getIntentionName(event);
var fieldName=this.TAG_INTENTION_PREFIX+this.getAdjacentFieldName(element);
var intention={
arg:{},
name:name};
intention.arg[fieldName]=element.text();
intention=this.getKeydownMutatedIntention(intention,event);
this.passIntention(intention);},
onTermHighlight:function(event){
var element=this.getSegmentParent(event.target);
element.addClass(this.SEGMENT_HOVER_CLASS_NAME);},
onTermBlur:function(event){
var element=this.getSegmentParent(event.target);
element.removeClass(this.SEGMENT_HOVER_CLASS_NAME);},
onTermSelect:function(event){
var element=this.getSegmentParent(event.target);
var name=this.getIntentionName(event);
if(element.hasClass("path")){
var val=element.text();
var key="";
var i=element;
var wcpart="";
while(!element.is("pre")){
var parent=element.parent();
var key_part=element.siblings(".PropName:first");
if(key_part&&key_part.hasClass("PropName")){
if(key=="")
key=key_part.text()+wcpart;
else
key=key_part.text()+wcpart+"."+key;
wcpart="";}else if(parent.hasClass("Array")){
wcpart=wcpart+"{}";}
element=parent;}
var context=new Splunk.Context();
var search=new Splunk.Search("*");
var escape_re=/(\\|\")/g;
key=key.replace(escape_re,"\\$1");
val=val.replace(escape_re,"\\$1");
var spath_intention={
name:"addcommand",
arg:{command:"spath",
args:'"'+key+'"'}};
var where_intention={
name:"addcommand",
arg:{command:"search",
args:'"'+key+'"="'+val+'"'}};
search.addIntention(spath_intention);
search.addIntention(where_intention);
context.set("search",search);
this.passContextToParent(context);
return;}
var intention={
arg:element.text(),
name:name};
intention=this.getKeydownMutatedIntention(intention,event);
this.passIntention(intention);},
onTimestampSelect:function(event){
var em=$(event.target);
var epoch=em.attr(this.TIMESTAMP_EPOCH_TIME_ATTRIBUTE_NAME);
if(epoch){
epoch=parseInt(epoch,10);
var context=new Splunk.Context();
var search=new Splunk.Search();
var range=new Splunk.TimeRange(epoch,epoch+1);
search.setTimeRange(range);
context.set("search",search);
this.passContextToParent(context);}else{
this.logger.error("received a click on a timestamp however there was no ",this.TIMESTAMP_EPOCH_TIME_ATTRIBUTE_NAME," attribute on the element so we cannot proceed.");}
return false;},
onUIEvent:function(event){
var eventType=event.type;
var eventTarget=$(event.target);
var rendererNamespace=this.getRendererNamespace(eventTarget);
if(rendererNamespace){
this.doc.trigger(rendererNamespace,[{"nativeEvent":event,"module":this}]);}
if(eventType==="click"){
eventTargetParent=eventTarget.parent();
if(eventTargetParent.hasClass(this.EVENT_ACTION_MENU_CLASSNAME)){
eventTarget=eventTarget.parent();}
if(eventTarget.hasClass(this.SHOW_INLINE_CLASS_NAME)){
return this.onShowInline(event);}else if(eventTarget.hasClass(this.TERM_CLASS_NAME)&&this.enableTermSelection){
return this.onTermSelect(event);}else if(eventTarget.hasClass(this.SHOW_SOURCE_CLASS_NAME)){
return this.onShowSource(event);}else if(eventTarget.hasClass(this.FIELD_VALUE_CLASS_NAME)&&this.enableTermSelection){
return this.onFieldSelect(event);}else if(eventTarget.hasClass(this.TAG_CLASS_NAME)&&this.enableTermSelection){
return this.onTagSelect(event);}else if(eventTarget.hasClass(this.FIELD_MENU_CLASS_NAME)){
return this.onShowFieldMenu(event);}else if(eventTarget.hasClass(this.EVENT_ACTION_MENU_CLASSNAME)){
return this.onShowEventMenu(event);}else if(eventTarget.hasClass(this.TIMESTAMP_CLASS_NAME)&&this.enableTermSelection){
return this.onTimestampSelect(event);}else if(eventTarget.hasClass("jsexpand")){
var elem=eventTarget[0];
var container=elem.nextSibling;
if(!container)return;
var disp="none";
if(container.style.display=="none"){
disp="inline";
elem.innerHTML='[-]';}else{
elem.innerHTML='[+]';}
container.style.display=disp;
return false;}}else if(eventType==="mouseover"&&this.enableTermSelection){
if(eventTarget.hasClass(this.TERM_CLASS_NAME)){
return this.onTermHighlight(event);}}else if(eventType==="mouseout"){
if(eventTarget.hasClass(this.TERM_CLASS_NAME)){
return this.onTermBlur(event);}}},
parseResults:function(html){
var chunkElement=null;
var listElement=null;
var buffer=[];
var tmpContainer=document.createElement("div");
tmpContainer.innerHTML=html;
for(var i=0;(child=tmpContainer.childNodes[i]);i++){
if(child.nodeName=="LI"&&child.className=="chunk"){
chunkElement=child;
break;}}
if(chunkElement){
for(var j=0;(child=chunkElement.childNodes[j]);j++){
if(child.nodeName=="OL"&&child.className=="list"){
listElement=child;
break;}}}
if(listElement){
var s;
for(var k=0;(child=listElement.childNodes[k]);k++){
s=(child.nodeName=="LI"&&child.className.indexOf("item")!=-1)?1:0;
switch(s){
case 1:
buffer.push(child);
break;
default:
break;}}}
return buffer;},
resetUI:function(){
this.offset=0;
this.resultsContainer.html("");},
renderResults:function($super,htmlFragment){
$super(htmlFragment,true);
this.renderedCount=$(this.EVENT_SELECTOR,this.container).length;
if(this.scroller){
this.scroller.reset();}},
setSoftWrapClassName:function(state){
if(state){
this.resultsContainer.addClass(this.SOFT_WRAP_CLASS_NAME);}else{
this.resultsContainer.removeClass(this.SOFT_WRAP_CLASS_NAME);}}});
Splunk.Module.EventsViewer.FieldAction={
menuDataRemap:function(data){
var menuData=[];
var logger=Splunk.Logger.getLogger("Splunk.Module.EventsViewer.FieldAction.menuDataRemap");
for(var i=0;i<data.length;i++){
var item=data[i];
if(item.hasOwnProperty("type")){
var type=item.type;
switch(type){
case"link":
var linkMenuItem=this.linkMenuItem(item);
if(linkMenuItem){
menuData.push(linkMenuItem);}
break;
case"search":
var searchMenuItem=this.searchMenuItem(item);
if(searchMenuItem){
menuData.push(searchMenuItem);}
break;
default:
logger.warn("Non-supported field action type",type);
break;}}}
return menuData;},
linkMenuItem:function(item){
var logger=Splunk.Logger.getLogger("Splunk.Module.EventsViewer.FieldAction.linkMenuItem");
var menuItem=null;
var requiredAttributes=["label","link.uri","link.method"];
for(var i=0;i<requiredAttributes.length;i++){
var requiredAttribute=requiredAttributes[i];
if(!item.hasOwnProperty(requiredAttribute)){
logger.info.warn("Missing required attribute",requiredAttribute);
return menuItem;}}
var method=item["link.method"];
switch(method){
case"GET":
menuItem={"label":item["label"],"uri":item["link.uri"]};
if(item.hasOwnProperty("link.target")){
menuItem["attrs"]={"target":item["link.target"]};}
break;
case"POST":
menuItem={"callback":"onPost","label":item["label"],"attrs":{"s:post.uri":item["link.uri"]}};
if(item.hasOwnProperty("link.payload")){
menuItem['data']=item["link.payload"];}
if(item.hasOwnProperty("link.target")){
menuItem.attrs["s:post.target"]=item["link.target"];}
break;
default:
logger.warn("Non-supported link.method".method);
break;}
return menuItem;},
searchMenuItem:function(item){
var logger=Splunk.Logger.getLogger("Splunk.Module.EventsViewer.FieldAction.searchMenuItem");
var menuItem=null;
var requiredAttributes=["label","search.target","search.search_string","search.app","search.view"];
for(var i=0,j=requiredAttributes.length;i<j;i++){
var requiredAttribute=requiredAttributes[i];
if(!item.hasOwnProperty(requiredAttribute)){
logger.info.warn("Missing required attribute",requiredAttribute);
return menuItem;}}
menuItem={"callback":"onSearch","label":item.label,"attrs":{"s:search.search_string":item["search.search_string"],"s:search.app":item['search.app'],"s:search.view":item['search.view'],"s:search.target":item['search.target']}};
if(item.hasOwnProperty("search.preserve_timerange")){
menuItem["attrs"]["s:search.preserve_timerange"]=item['search.preserve_timerange'];}
if(item.hasOwnProperty("search.earliest")){
menuItem["attrs"]["s:search.earliest"]=item["search.earliest"];}
if(item.hasOwnProperty("search.latest")){
menuItem["attrs"]["s:search.latest"]=item["search.latest"];}
return menuItem;},
fieldMenuDefaults:function(fieldName,fieldValue){
var menuData=[];
var tagMenuItem={"callback":"onTagField","label":sprintf(_("Tag %(field_name)s=%(field_value)s"),{"field_name":fieldName,"field_value":fieldValue}),"attrs":{"s:fieldname":fieldName,"s:fieldvalue":fieldValue}};
menuData.push(tagMenuItem);
var reportMenuItem={"callback":"onReportField","label":_("Report on field"),"attrs":{"s:fieldname":fieldName,"s:fieldvalue":fieldValue}};
menuData.push(reportMenuItem);
return menuData;}};;}catch(e){var err="The module 'Splunk.Module.EventsViewer' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.EventsViewer",err);});}try{i18n_register({"catalog":{"+-Waiting for search to complete...":"Waiting for search to complete..."},"plural":function(n){return n==1?0:1;}});
Splunk.namespace("Module");
Splunk.Module.SimpleResultsTable=$.klass(Splunk.Module.AbstractPagedModule,{
DRILLDOWN_VISIBILITY_KEY:"ResultsTableInteractionValidity",
LEADING_UNDERSCORE_PREFIX:"VALUE_",
RENDER_REFRESH_TIME_CONSTRAINT:1.5,
QUOTE_ESCAPE_REGEX:/\"/g,
BACKSLASH_ESCAPE_REGEX:/\\/g,
DEFAULT_SPARKLINE_SETTINGS:{type:'line',lineColor:'#008000',highlightSpotColor:null,minSpotColor:null,maxSpotColor:null,spotColor:null,fillColor:null},
initialize:function($super,container){
$super(container);
this.popupHandler=null;
this.menu=null;
this.entityName=this.getParam("entityName");
this.mergeLoadParamsIntoContext("results",["displayRowNumbers","dataOverlayMode"]);
this.drilldown=this.getParam("drilldown");
this.drilldownPrefix=this.getParam("drilldownPrefix");
this.fieldFormats=this.getParam('fieldFormats')||{};
if((this.drilldown!='none')&&this.displayMenu){
this.logger.error("You cannot enable both the new drilldown clicks and the old menu prototype.");
this.displayMenu=false;}
this.renderedCount=-1;
this.resultsContainer=this.container;
this.container.bind("mouseover",this.onRowMouseover.bind(this));
this.container.bind("mouseout",this.onRowMouseout.bind(this));
this.container.bind("click",this.onRowClick.bind(this));
this.container.bind("mousedown",function(evt){
if(this.getNormalizedCtrlKey(evt))evt.preventDefault();}.bind(this));
this.container.bind("selectstart",function(evt){
if(this.getNormalizedCtrlKey(evt))return false;}.bind(this));
this.setSortField(null);
this.setSortAsc(false);},
requiresTransformedResults:function(){
return(this.getInferredEntityName()=="results");},
onLoadStatusChange:function($super,statusInt){
$super(statusInt);
if(statusInt==Splunk.util.moduleLoadStates.LOADED){
var context=this.getContext();
if(context===null){
this.logger.warn('getContext could not retrieve a context object when called from SimpleResultsTable\'s onLoadStatusModule.');
return;}
if(context.get("results.dataOverlayMode")){
this.onResultsRendered();}}
else if(statusInt==Splunk.util.moduleLoadStates.WAITING_FOR_HIERARCHY){
this.hideDescendants(this.DRILLDOWN_VISIBILITY_KEY+"_"+this.moduleId);}},
onBeforeJobDispatched:function(search){
var fields=this.getNormalizedFields();
if(this.entityName!="results"){
search.setMinimumStatusBuckets(1);
if(fields.length>0){
search.setRequiredFields(fields);}}},
getColumnFieldCell:function(x,element){
return element.parents("table.simpleResultsTable").find("th:nth-child("+(x+1)+")");},
getColumnName:function(x,element){
return Splunk.util.trim(this.getColumnFieldCell(x,element).text());},
getRowFieldCell:function(element){
var tdNodes=$(element.parents("tr")[0]).find("td:not('.pos')");
if(tdNodes.length>0){
return $(tdNodes[0]);}
return element;},
getRowFieldValue:function(element){
return this.getRowFieldCell(element).text();},
getRowFieldName:function(el){
return Splunk.util.trim($(el.parents("table.simpleResultsTable").find("th:not('.pos')")[0]).text());},
getXYCoordinates:function(element){
var previousColumns=(element[0].tagName=="TD")?element.prevAll():$(element.parents().filter("td")[0]).prevAll();
var previousRows=$(element.parents().filter("tr")[0]).prevAll();
return{x:previousColumns.length,y:previousRows.length-1};},
getTimeRangeFromCell:function(rowCell){
var startTime=rowCell.attr("startTime");
var endTime=rowCell.attr("endTime");
if(!endTime){
startTime=parseInt(startTime,10);
endTime=startTime+1;}
return new Splunk.TimeRange(startTime,endTime);},
getInferredEntityName:function(){
try{
var context=this.getContext();}catch(err){
this.logger.error(err);
return this.entityName;}
var search=context.get('search');
if(!search||search.job.getStatusBuckets()==0){
return'results';}else if(this.entityName=="auto"){
return(search.job.areResultsTransformed())?"results":"events";}else{
return this.entityName;}},
getResultParams:function($super){
var params=$super();
var context=this.getContext();
var search=context.get("search");
var sid=search.job.getSearchId();
var timeRange=search.getTimeRange();
if(!sid)this.logger.error(this.moduleType,"Assertion Failed. getResultParams was called, but searchId is missing from my job.");
params.sid=sid;
params.entity_name=this.getInferredEntityName();
params.display_row_numbers=context.get("results.displayRowNumbers");
if(search.job.isPreviewable())params.show_preview="1";
var postprocess=search.getPostProcess()||"";
if(this.getSortField()){
var sortClause=[];
sortClause.push("| sort ");
var minimumRequiredOffset=params.offset+params.count;
if(Splunk.util.isInt(minimumRequiredOffset)){
sortClause.push(minimumRequiredOffset+" ");}
if(!this.getSortAsc()){
sortClause.push("- ");}
sortClause.push(sprintf('"%s"',this.getSortField().replace(this.BACKSLASH_ESCAPE_REGEX,'\\\\').replace(this.QUOTE_ESCAPE_REGEX,'\\\"')));
postprocess+=sortClause.join("");
params.sortField=this.getSortField();
if(this.getSortAsc())
params.sortDir="Asc";
else
params.sortDir="Desc";}
if(postprocess!="")
params.postprocess=postprocess;
if(!Splunk.util.normalizeBoolean(this.getParam('allowTransformedFieldSelect'))&&(search.job.areResultsTransformed())){
delete params["field_list"];}
if(this.drilldown!="none"||params.entity_name=="events"){
params["mark_interactive"]=1;}
return params;},
getModifiedContext:function(){
var context=this.getContext();
if(this._selection){
for(key in this._selection){
context.set(this.drilldownPrefix+"."+key,this._selection[key]);}
var search=context.get("search");
var searchRange=search.getTimeRange();
var searchModified=false;
if(this._selection.timeRange){
search.setTimeRange(this._selection.timeRange);
searchModified=true;}else if(!searchRange.isAbsolute()&&!searchRange.isAllTime()){
var job=this.getContext().get("search").job;
search.setTimeRange(job.getTimeRange());
searchModified=true;}
if(this.entityName=="events"&&search.job.areResultsTransformed()){
var eventSearch=search.job.getEventSearch();
search.abandonJob();
search.setBaseSearch(eventSearch);
searchModified=true;}
if(searchModified)context.set("search",search);}
context.set("results.offset",0);
context.set("results.upstreamPaginator",null);
return context;},
isReadyForContextPush:function($super){
if(!this._selection){
return Splunk.Module.CANCEL;}
return $super();},
getElementToHighlight:function(el){
if(!$(el).parent().length)return false;
if($(el).hasClass('pos'))return false;
if(el.tagName=='TD'&&$(el).find("div.mv").length>0)return false;
var row=$(el).parents().filter("tr")[0];
switch(this.drilldown){
case"all":
return $(el);
case"row":
return $(row);
default:
if(this.getInferredEntityName()=="events"){
return $(el);}}
return false;},
getNormalizedCtrlKey:function(evt){
if(!this.hasOwnProperty("isMac"))this.isMac=/mac/.test(navigator.userAgent.toLowerCase());
return(this.isMac)?evt.metaKey:evt.ctrlKey;},
getSelectionState:function(evt){
var el=$(evt.target);
var coordinates=this.getXYCoordinates(el);
var selection={};
var rowCell;
if(this.drilldown=="none"){
return false;}else if(this.drilldown=="all"){
if(!el.hasClass('d')&&!el.parent().hasClass('d'))return;
selection.element=el;
selection.name=this.getRowFieldName(el);
selection.value=this.getRowFieldValue(el);
selection.name2=this.getColumnName(coordinates.x,el);
selection.value2=el.text();}else if(this.drilldown=="row"){
rowCell=$($(el).parents("tr")[0]);
selection.element=rowCell;
selection.name=Splunk.util.trim($(el.parents("table.simpleResultsTable").find("th:not('.pos')")[0]).text());
selection.value=this.getRowFieldValue(el);
selection.name2=selection.name;
selection.value2=selection.value;}
selection.modifierKey=this.getNormalizedCtrlKey(evt);
if(selection.name=="_time"){
rowCell=this.getRowFieldCell(el);
selection.timeRange=this.getTimeRangeFromCell(rowCell);}
if(selection.name2&&selection.name2.indexOf(this.LEADING_UNDERSCORE_PREFIX)!=-1){
selection.name2=selection.name2.replace(this.LEADING_UNDERSCORE_PREFIX,"_");}
return selection;},
isSortingElement:function(el){
return el[0].tagName=='A'&&el.parent()[0].tagName=='TH'||(el[0].tagName=='TH');},
onRowMouseover:function(evt){
if($(evt.target).is('.empty_results, .resultStatusHelp a'))return false;
if(this.drilldown=='none'&&this.getInferredEntityName()!="events")return false;
var toHighlight=this.getElementToHighlight(evt.target);
if(toHighlight){
toHighlight.addClass('mouseoverHighlight');
if(this.drilldown=="all"){
this.getRowFieldCell(toHighlight).addClass('mouseoverHighlight');
var coordinates=this.getXYCoordinates(toHighlight);
this.getColumnFieldCell(coordinates.x,toHighlight).addClass('mouseoverHighlight');}}},
onRowMouseout:function(evt){
if($(evt.target).is('.empty_results, .resultStatusHelp a'))return false;
if(this.drilldown=='none'&&this.getInferredEntityName()!="events")return false;
var toHighlight=this.getElementToHighlight(evt.target);
if(toHighlight){
toHighlight.removeClass('mouseoverHighlight');
if(this.drilldown=="all"){
this.getRowFieldCell(toHighlight).removeClass('mouseoverHighlight');
var coordinates=this.getXYCoordinates(toHighlight);
this.getColumnFieldCell(coordinates.x,toHighlight).removeClass('mouseoverHighlight');}}},
onEventRowClick:function(evt){
var el=$(evt.target);
if(el.find("div.mv").length>0){
return;}
if(this._selection&&this._selection.element){
this._selection.element.removeClass("selected");}
this._selection={};
el.addClass("selected");
this._selection.element=el;
var name=this.getIntentionName(evt);
var coordinates=this.getXYCoordinates(el);
var fieldName=this.getColumnName(coordinates.x,el);
if(fieldName=="_time"){
var context=new Splunk.Context();
var search=new Splunk.Search("*");
var range=this.getTimeRangeFromCell(el);
search.setTimeRange(range);
context.set("search",search);
this.passContextToParent(context);}else{
var intention={
arg:{},
name:name};
intention.arg[fieldName]=el.text();
intention=this.getKeydownMutatedIntention(intention,evt);
this.passIntention(intention);}},
getCurrentSelectedText:function(){
var selectedText="";
var range;
if(window.getSelection){
range=window.getSelection();
selectedText=range.toString();}
else{
if(document.selection&&document.selection.createRange){
range=document.selection.createRange();
selectedText=range.text;}}
return selectedText;},
onRowClick:function(evt){
if(this.getCurrentSelectedText().length>0){
this.logger.debug("received a click event, or at least what the browser tells us is a click event, but there's a text selection right now so the browser's lying. Returning.");
return false;}
var el=$(evt.target);
if(el.is('a')){
return true;}
if(el.hasClass('pos'))return;
if(el[0].tagName=='SPAN')el=el.parent();
if(this.isSortingElement(el)){
var sortField=Splunk.util.trim(el.text());
if(sortField==this.getSortField()){
this.setSortAsc(!this.getSortAsc());}else{
this.setSortAsc(false);
this.setSortField(sortField);}
this.getResults();
return;}
if(el[0].tagName=='TD'&&$(el).find("div.mv").length>0)return false;
if(this.drilldown=="none"){
if(this.getInferredEntityName()=="events"){
return this.onEventRowClick(evt);}
return;}
if(el[0].tagName!='TD'&&el.parent()[0].tagName!='TD')return;
this.showDescendants(this.DRILLDOWN_VISIBILITY_KEY+"_"+this.moduleId);
var coordinates;
if(this._selection&&this._selection.element){
this._selection.element.removeClass("selected");
if(this.drilldown=="all"){
this.getRowFieldCell(this._selection.element).removeClass('selected');
coordinates=this.getXYCoordinates(this._selection.element);
this.getColumnFieldCell(coordinates.x,this._selection.element).removeClass('selected');}}
this._selection=this.getSelectionState(evt);
if(this._selection&&this._selection.element){
this._selection.element.addClass("selected");
if(this.drilldown=="all"){
this.getRowFieldCell(this._selection.element).addClass('selected');
coordinates=this.getXYCoordinates(this._selection.element);
this.getColumnFieldCell(coordinates.x,this._selection.element).addClass('selected');}}
this.pushContextToChildren();},
onContextChange:function($super){
$super();
this._selection=null;
this.hideDescendants(this.DRILLDOWN_VISIBILITY_KEY+"_"+this.moduleId);
this.renderedCount=-1;
var context=this.getContext();
if(this.haveResultParamsChanged()){
var search=context.get("search");
if(search.job.isDone()||(search.job.getEventAvailableCount()>0)){
this._pageComplete=false;
this.getResults();}}
else if(context.has("results.dataOverlayMode")){
this.onResultsRendered();}},
onJobProgress:function(event){
var context=this.getContext();
var search=context.get("search");
var isJobDone=search.job.isDone();
if(this.getInferredEntityName()=="events"){
if(search.job.getEventSorting()=="desc"){
var needMoreEvents=this.renderedCount<context.get("results.count");
var moreEventsAreAvailable=search.job.getEventAvailableCount()>this.renderedCount;
if(needMoreEvents&&moreEventsAreAvailable){
this.renderedCount=Math.min(search.job.getEventAvailableCount(),context.get("results.count"));
this.getResults();}}else{
this.getResults();}}else{
if(!search.job.isPreviewable()&&!search.job.isDone()){
this.resultsContainer.html('<p class="resultStatusMessage">'
+_('Waiting for search to complete...')
+'</p>');}else{
this.getResults();}}},
onJobDone:function(event){
if(this.getInferredEntityName()=="results"){
this.getResults();}},
resetUI:function(){
this.resultsContainer.html("");},
renderResults:function($super,htmlFragment){
$super(htmlFragment);
if(this.getInferredEntityName()=="events"){
this.renderedCount=$("tr",this.container).length-1;}},
getFieldFormat:function(fieldName,type){
var fieldFormats=this.fieldFormats;
var tryFields=[fieldName,'*'];
for(var i=0,len=tryFields.length;i<len;i++){
if(fieldFormats[tryFields[i]]){
match=$.grep(fieldFormats[tryFields[i]],function(entry){
return entry.type==type;});
if(match)
return match[0];}}},
onResultsRendered:function(){
var context=this.getContext();
if(!context.has("results.dataOverlayMode"))return false;
switch(context.get("results.dataOverlayMode")){
case"none":
this.resetHeatMap(this.container);
this.decorateBounds(this.container,false,false);
break;
case"heatmap":
this.decorateBounds(this.container,false,false);
this.decorateHeatMap(this.container);
break;
case"highlow":
this.resetHeatMap(this.container);
this.decorateBounds(this.container,true,true);
break;
default:
this.logger.warn("Context contains unsupported dataOverlayMode value of",context.get("results.dataOverlayMode"));
break;}
var self=this;
var $sl=$("span.sparklines",this.container);
$sl.each(function(){
var el=$(this);
var coordinates=self.getXYCoordinates(el);
var fieldName=self.getColumnName(coordinates.x,el);
var sld=[];
var fieldFormat=self.getFieldFormat(fieldName,'sparkline');
var sparkline_settings=fieldFormat?fieldFormat.options:self.DEFAULT_SPARKLINE_SETTINGS;
$("div.mv",this).each(function(){
var datum=parseInt(this.innerHTML,10);
if(!isNaN(datum)){
sld.push(datum);}});
$(this).html("").sparkline(sld,sparkline_settings);});},
decorateHeatMap:function(container){
var high=[230,49,53];
var low=[62,135,191];
var neutral=[245,245,245];
$('td[heat]',container).each(function(){
var heat=parseFloat(this.getAttribute('heat'));
var r2,b2,g2;
if(heat!=0){
target=(heat>0?high:low);
r2=parseInt(target[0]+(neutral[0]-target[0])*(1-Math.abs(heat)),10);
b2=parseInt(target[1]+(neutral[1]-target[1])*(1-Math.abs(heat)),10);
g2=parseInt(target[2]+(neutral[2]-target[2])*(1-Math.abs(heat)),10);
this.style.backgroundColor='rgb('+r2+','+b2+','+g2+')';}});},
resetHeatMap:function(){
$('td[heat]',this.container).each(function(){
this.style.backgroundColor='';});},
decorateBounds:function(container,showLow,showHigh){
if(showHigh){
$('td[isMax]',container).addClass('highValue');}else{
$('td[isMax]',container).removeClass('highValue');}
if(showLow){
$('td[isMin]',container).addClass('lowValue');}else{
$('td[isMin]',container).removeClass('lowValue');}}});;}catch(e){var err="The module 'Splunk.Module.SimpleResultsTable' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.SimpleResultsTable",err);});}try{i18n_register({"catalog":{"+-%d field":"%d field","+-Cancel":"Cancel","+-No Fields":"No Fields","+-Save":"Save","+-OK":"OK","+-Fields":"Fields","+-Could not load %(url)s":"Could not load %(url)s"},"plural":function(n){return n==1?0:1;}});
Splunk.Module.FieldPicker=$.klass(Splunk.Module.HiddenFieldPicker,{
INLINE_HEADER_CLASS_NAME:"inlineHeader",
INLINE_HEADER_COUNT_CLASS_NAME:"totalFieldsCount",
POPUP_ADD_ALL_CLASS_NAME:"fpAddAllLink",
POPUP_ADD_UNIT_CLASS_NAME:"fpAddFieldBehavior",
POPUP_ADD_UNIT_CLOSEST_SELECTOR:"tr",
POPUP_AVAILABLE_FIELDS_SELECTOR:".fpFieldListContainerOuter .fpFieldListContainerInner",
POPUP_REMOVE_ALL_CLASS_NAME:"fpClearSelectedFields",
POPUP_CLASS_NAME:"FieldPickerPopup",
POPUP_CONTENT_CLASS_NAME:"popupContent",
POPUP_FILTER_KEYWORD_CLASS_NAME:"fpKeywordFilterField",
POPUP_FILTER_KEYWORD_CLEAR_CLASS_NAME:"fpKeywordFilterClear",
POPUP_FILTER_KEYWORD_DEFAULT_VALUE:"",
POPUP_FILTER_PERCENT_CLASS_NAME:"fpFrequencyFilterField",
POPUP_FILTER_PERCENT_CLEAR_CLASS_NAME:"fpFrequencyFilterClear",
POPUP_FILTER_PERCENT_DEFAULT_VALUE:"1",
POPUP_NON_SELECTED_FIELDS_SELECTOR:".fpFieldList tbody tr:not(.fieldSelected)",
POPUP_SELECTED_FIELD_CLASS_NAME:"fieldSelected",
POPUP_REMOVE_UNIT_CLASS_NAME:"fpRemoveFieldBehavior",
POPUP_REMOVE_UNIT_CLOSEST_SELECTOR:"li",
POPUP_SELECTED_FIELD_CONTAINER_CLASS_NAME:"fpSelectedFields",
POPUP_SELECTED_FIELD_SELECTOR:".fpSelectedFields li",
POPUP_SELECTED_FIELD_NAME_ATTR:"s:fieldname",
POPUP_SELECTED_FIELD_HTML_TEMPLATE:'<li><span class="splIcon splIcon-arrow-w fpRemoveFieldBehavior"/>%(fieldName)s</li>',
POPUP_SORT_KEY_ATTR:"s:sortkey",
POPUP_SORT_DIR_ATTR:"s:sortdir",
POPUP_SUMMARY_CLASS_NAME:"fpFieldSummary",
POPUP_UPDATE_FIELDS_CONTAINER_CLASS_NAME:"fpUpdateFields",
POPUP_UPDATE_FIELDS_UPDATE_CLASS_NAME:"fpUpdateFieldsUpdate",
SIDEBAR_CONTROL_SELECTOR:".sidebarControl a",
SIDEBAR_CONTROL_OPEN_CLASS_NAME:"splIcon-sidebar-open",
SIDEBAR_CONTROL_CLOSED_CLASS_NAME:"splIcon-sidebar-closed",
LAUNCH_POPUP_CLASS_NAME:"fpActivate",
UI_EVENT_TYPES:["click","keyup"],
SIDEBAR_SELECTOR:"div.withSidebar",
initialize:function($super,container){
$super(container);
this.show(this.HIDDEN_MODULE_KEY);
this.logger=Splunk.Logger.getLogger("Splunk.Module.FieldPicker");
this.displaySideBar(Splunk.util.normalizeBoolean(this.getParam("sidebarDisplay")));
this.fieldSummaryLayer=null;
this.fieldSummaryLayerTarget=$("<div>").attr("class","FieldSummaryLayerTwoTarget").appendTo("body");
this.filterKeyword=null;
this.filterPercent=null;
this.firefox2FixFlag=false;
this.inFlightXHR=null;
this.inlineHeaderElement=$("."+this.INLINE_HEADER_CLASS_NAME,this.container);
this.inlineHeaderCountElement=$("."+this.INLINE_HEADER_COUNT_CLASS_NAME,this.inlineHeaderElement);
this.noneMatchRenderAllResults="";
this.popup=null;
this.reportLinkTarget=(this._params["link"])?this._params["link"]["view"]:false;
this.selectedFields=this.getSelectedFieldList();
this.sortKey=null;
this.sortDir=null;
this.container.bind(this.UI_EVENT_TYPES.join(" "),this.onUIEvent.bind(this));
$(this.SIDEBAR_CONTROL_SELECTOR).bind(this.UI_EVENT_TYPES.join(" "),this.onUIEvent.bind(this));},
applyContext:function(context){
if(this.isPageLoadComplete()){
var search=context.get("search");
var fieldsIntention=search.getIntentionReference("setfields");
if(fieldsIntention){
this.selectedFields=[];
var fields=fieldsIntention["arg"];
for(var i=0;i<fields.length;i++){
var field=fields[i];
if(field.charAt(0)!=="_"){
this.selectedFields.push(field);}}
this.setSelectedFieldList(this.selectedFields);
this.pushContextToChildren();
return true;}}},
commitPopupChanges:function(){
this.setSelectedFieldList(this.selectedFields);
this.pushContextToChildren();},
displaySideBar:function(display){
var sidebar=$(this.SIDEBAR_CONTROL_SELECTOR);
var currentDisplay=(sidebar.hasClass(this.SIDEBAR_CONTROL_CLOSED_CLASS_NAME))?false:true;
if(currentDisplay!=display){
sidebar.click();}},
displayUpdateFieldsMessage:function(){
if(this.popup){
var popupContainer=this.popup.getPopup();
$("."+this.POPUP_UPDATE_FIELDS_CONTAINER_CLASS_NAME,popupContainer).css("display","block");}},
fieldSummaryLayerGC:function(){
if(this.fieldSummaryLayer){
this.removeFirefox2Fix();
this.fieldSummaryLayer.hide();
this.fieldSummaryLayer=null;}},
getResultParams:function(){
var context=this.getContext();
var search=context.get("search");
var params={
sid:search.job.getSearchId()}
if(this.selectedFields.length>0){
params.field_list=this.selectedFields.join(",");}
if(this.filterKeyword){
params.filter_keyword=this.filterKeyword;}
if(this.filterPercent){
params.filter_percent=this.filterPercent;}
if(this.sortKey){
params.sort_key=this.sortKey}
if(this.sortDir){
params.sort_dir=this.sortDir}
return params;},
inFlightXHRGC:function(){
if(this.inFlightXHR){
try{
this.inFlightXHR.abort();}catch(e){
this.logger.warn("Could not call abort on inflight XHR.");}
this.inFlightXHR=null;}},
onBeforeJobDispatched:function(search){
search.setMinimumStatusBuckets(1);
search.setRequiredFields(["*"]);},
onContextChange:function(){
if(!this.isPageLoadComplete()){
this.refreshInlineHeaderCount();}
if(this.popup){
this.commitPopupChanges();
this.popup.destroyPopup();}
var context=this.getContext();
var search=context.get("search");
var sid=search.job.getSearchId();
if(sid&&(search.job.getStatusBuckets()<1)){
$(".sidebar").hide();}else{
$(".sidebar").show();}},
onFieldSummaryLayerDispatch:function(arg){
var context;
var search;
switch(arg.type){
case"search":
if(arg.event.altKey){
arg.intention.name="negateterm";}
context=new Splunk.Context();
search=new Splunk.Search("*");
search.addIntention(arg.intention);
context.set("search",search);
this.passContextToParent(context);
if(this.popup){
this.popup.destroyPopup();}
break;
case"report":
context=this.getContext();
search=context.get("search");
var searchStr=$.trim(search.job.getEventSearch())+" | "+arg.reportSearch;
context=new Splunk.Context();
search=new Splunk.Search(searchStr);
search.addIntention(arg.intention);
context.set("search",search);
this.passContextToParent(context);
if(this.popup){
this.popup.destroyPopup();}
break;
case"close":
this.fieldSummaryLayerGC();
break;
default:
break;}
return false;},
onJobProgress:function(){
this.refreshInlineHeaderCount();
this.displayUpdateFieldsMessage();},
onLaunchPopup:function(event,target){
event.preventDefault();
this.inFlightXHRGC();
var params=this.getResultParams();
var url=this.getResultURL(params);
this.inFlightXHR=$.ajax({
type:"GET",
url:url,
dataType:"html",
error:function(){
this.inFlightXHR=null;
this.logger.error(sprintf(_("Could not load %(url)s"),{url:url}));}.bind(this),
complete:function(data,textStatus){
this.inFlightXHR=null;
if(data.status==200||data.status==304){
this.popup=new Splunk.Popup(data.responseText,{
cloneFlag:false,
title:_("Fields"),
pclass:this.POPUP_CLASS_NAME,
buttons:[
{
label:_("Cancel"),
type:"secondary",
callback:function(){
return true;}.bind(this)},
{
label:_("Save"),
type:"primary",
callback:function(){
this.commitPopupChanges();
return true;}.bind(this)}],
onDestroy:this.popupGC.bind(this)});
this.onUIEventPopupBind();}else{
this.popup=new Splunk.Popup(data.responseText,{
cloneFlag:false,
title:_("No Fields"),
pclass:this.POPUP_CLASS_NAME,
buttons:[
{
label:_("OK"),
type:"primary",
callback:function(){
return true;}.bind(this)}],
onDestroy:this.popupGC.bind(this)});
this.onUIEventPopupBind();}}.bind(this)});
return true;},
onPopupAddAll:function(event,target){
var self=this;
var popupContainer=this.popup.getPopup();
$(this.POPUP_NON_SELECTED_FIELDS_SELECTOR,popupContainer).each(function(){
var term=$(this).attr(self.POPUP_SELECTED_FIELD_NAME_ATTR);
if(jQuery.inArray(term,self.selectedFields)==-1){
self.selectedFields.push(term);
$(this).addClass(self.POPUP_SELECTED_FIELD_CLASS_NAME);
var popupContainer=self.popup.getPopup();
var selectedFieldTemplate=sprintf(self.POPUP_SELECTED_FIELD_HTML_TEMPLATE,{fieldName:Splunk.util.escapeHtml(term)});
$("."+self.POPUP_SELECTED_FIELD_CONTAINER_CLASS_NAME,popupContainer).append($(selectedFieldTemplate));}});
return false;},
onPopupToggleUnit:function(event,target){
var closestElement=target.closest(this.POPUP_ADD_UNIT_CLOSEST_SELECTOR);
if(closestElement.length>0){
var fieldName=closestElement.attr(this.POPUP_SELECTED_FIELD_NAME_ATTR)
var popupContainer=this.popup.getPopup();
if(closestElement.hasClass(this.POPUP_SELECTED_FIELD_CLASS_NAME)){
var selectedFields=$(this.POPUP_SELECTED_FIELD_SELECTOR,popupContainer);
for(var i=0;i<selectedFields.length;i++){
var selectedField=$(selectedFields[i]);
if(selectedField.text()==fieldName){
this.selectedFields.splice(jQuery.inArray(fieldName,this.selectedFields),1);
selectedField.remove();
closestElement.removeClass(this.POPUP_SELECTED_FIELD_CLASS_NAME);
break;}}}else{
if(jQuery.inArray(fieldName,this.selectedFields)==-1){
this.selectedFields.push(fieldName);
closestElement.addClass(this.POPUP_SELECTED_FIELD_CLASS_NAME);
var selectedFieldTemplate=sprintf(this.POPUP_SELECTED_FIELD_HTML_TEMPLATE,{fieldName:Splunk.util.escapeHtml(fieldName)});
$("."+this.POPUP_SELECTED_FIELD_CONTAINER_CLASS_NAME,popupContainer).append($(selectedFieldTemplate));}}}
return false;},
onPopupClearAll:function(event,target){
if(this.selectedFields.length>0){
var popupContainer=this.popup.getPopup();
this.selectedFields=[];
$(this.POPUP_SELECTED_FIELD_SELECTOR,popupContainer).remove();
$("."+this.POPUP_SELECTED_FIELD_CLASS_NAME).removeClass(this.POPUP_SELECTED_FIELD_CLASS_NAME);}
return false;},
onPopupSort:function(event,target){
this.sortKey=target.attr(this.POPUP_SORT_KEY_ATTR);
this.sortDir=target.attr(this.POPUP_SORT_DIR_ATTR);
this.renderAvailableFieldsResults();
return false;},
onPopupFilter:function(event,target){
var popupContainer=this.popup.getPopup();
this.filterKeyword=Splunk.util.trim($("."+this.POPUP_FILTER_KEYWORD_CLASS_NAME,popupContainer).attr("value"));
this.filterPercent=Splunk.util.trim($("."+this.POPUP_FILTER_PERCENT_CLASS_NAME,popupContainer).attr("value"));
this.renderAvailableFieldsResults();
return true;},
onPopupFilterClearKeyword:function(event){
var popupContainer=this.popup.getPopup();
$("."+this.POPUP_FILTER_KEYWORD_CLASS_NAME,this.popupContainer).attr("value",this.POPUP_FILTER_KEYWORD_DEFAULT_VALUE);
this.filterKeyword=(this.POPUP_FILTER_KEYWORD_DEFAULT_VALUE.length>0)?this.POPUP_FILTER_KEYWORD_DEFAULT_VALUE:null;
this.renderAvailableFieldsResults();
return false;},
onPopupFilterClearPercent:function(event){
var popupContainer=this.popup.getPopup();
$("."+this.POPUP_FILTER_PERCENT_CLASS_NAME,this.popupContainer).attr("value",this.POPUP_FILTER_PERCENT_DEFAULT_VALUE);
this.filterPercent=(this.POPUP_FILTER_PERCENT_DEFAULT_VALUE.length>0)?this.POPUP_FILTER_PERCENT_DEFAULT_VALUE:null;
this.renderAvailableFieldsResults();
return false;},
onPopupRemoveUnit:function(event,target){
var closestElement=target.closest(this.POPUP_REMOVE_UNIT_CLOSEST_SELECTOR);
if(closestElement.length>0){
var fieldName=closestElement.text();
var popupContainer=this.popup.getPopup();
this.selectedFields.splice(jQuery.inArray(fieldName,this.selectedFields),1);
var selectedFields=$("."+this.POPUP_SELECTED_FIELD_CLASS_NAME,popupContainer);
closestElement.remove();
for(var i=0;i<selectedFields.length;i++){
var selectedField=$(selectedFields[i]);
if(selectedField.attr(this.POPUP_SELECTED_FIELD_NAME_ATTR)==fieldName){
selectedField.removeClass(this.POPUP_SELECTED_FIELD_CLASS_NAME);
break;}}}
return false;},
onPopupSortableSelectedFieldsStop:function(event,ui){
var self=this;
var popupContainer=this.popup.getPopup();
var reorderFields=[];
$(this.POPUP_SELECTED_FIELD_SELECTOR,popupContainer).each(function(){
var fieldName=$(this).text();
reorderFields.push(fieldName);});
this.selectedFields=reorderFields;},
onPopupFieldSummaryLayerLaunch:function(event,target){
var context=this.getContext();
var search=context.get("search");
var sid=search.job.getSearchId();
var fieldName=target.attr(this.POPUP_SELECTED_FIELD_NAME_ATTR);
this.fieldSummaryLayer=new Splunk.Popup.FieldSummaryLayerTwo(sid,fieldName,this.fieldSummaryLayerTarget,target,this.onFieldSummaryLayerDispatch.bind(this));
this.addFirefox2Fix();
this.fieldSummaryLayer.show();},
onPopupUpdateFields:function(event,target){
this.renderAllResults();
return false;},
onSideBarChange:function(event,target){
display=($(target).hasClass(this.SIDEBAR_CONTROL_CLOSED_CLASS_NAME))?true:false;
this.setParam("sidebarDisplay",display);
return true;},
onUIEvent:function(event){
var type=event.type;
var target=$(event.target);
if(target.parent().is('a'))target=target.parent();
if(type==="click"){
if(target.hasClass(this.SIDEBAR_CONTROL_OPEN_CLASS_NAME)||target.hasClass(this.SIDEBAR_CONTROL_CLOSED_CLASS_NAME)){
return this.onSideBarChange(event,target);}else if(target.hasClass(this.LAUNCH_POPUP_CLASS_NAME)){
return this.onLaunchPopup(event,target);}else if(this.popup){
if(target.attr(this.POPUP_SORT_KEY_ATTR)&&target.attr(this.POPUP_SORT_DIR_ATTR)){
return this.onPopupSort(event,target);}else if(target.hasClass(this.POPUP_FILTER_KEYWORD_CLEAR_CLASS_NAME)){
return this.onPopupFilterClearKeyword(event,target);}else if(target.hasClass(this.POPUP_FILTER_PERCENT_CLEAR_CLASS_NAME)){
return this.onPopupFilterClearPercent(event,target);}else if(target.hasClass(this.POPUP_ADD_ALL_CLASS_NAME)){
return this.onPopupAddAll(event,target);}else if(target.hasClass(this.POPUP_REMOVE_ALL_CLASS_NAME)){
return this.onPopupClearAll(event,target);}else if(target.hasClass(this.POPUP_ADD_UNIT_CLASS_NAME)){
return this.onPopupToggleUnit(event,target);}else if(target.hasClass(this.POPUP_REMOVE_UNIT_CLASS_NAME)){
return this.onPopupRemoveUnit(event,target);}else if(target.hasClass(this.POPUP_SUMMARY_CLASS_NAME)){
return this.onPopupFieldSummaryLayerLaunch(event,target);}else if(target.hasClass(this.POPUP_UPDATE_FIELDS_UPDATE_CLASS_NAME)){
return this.onPopupUpdateFields(event,target);}}}else if(type=="keyup"){
if(this.popup&&(target.hasClass(this.POPUP_FILTER_KEYWORD_CLASS_NAME)||target.hasClass(this.POPUP_FILTER_PERCENT_CLASS_NAME))){
return this.onPopupFilter(event,target);}}},
onUIEventPopupBind:function(){
$("input:visible:enabled:first").focus();
if(this.popup){
var popupContainer=this.popup.getPopup();
popupContainer.bind(this.UI_EVENT_TYPES.join(" "),this.onUIEvent.bind(this));
this.onUIEventPopupBindSortableSelectedFields();}else{
this.logger.warn("Cannot bind event listeners for a non-existant popup instance.");}},
onUIEventPopupBindSortableSelectedFields:function(){
var popupContainer=this.popup.getPopup();
popupContainer.find("."+this.POPUP_SELECTED_FIELD_CONTAINER_CLASS_NAME).sortable({
axis:"y",cursor:"move",
stop:this.onPopupSortableSelectedFieldsStop.bind(this)});},
onUIEventPopupUnbind:function(){
if(this.popup){
var popupContainer=this.popup.getPopup();
popupContainer.unbind(this.UI_EVENT_TYPES.join(" "),this.onUIEvent.bind(this));}else{
this.logger.warn("Cannot unbind event listeners for a non-existant popup instance.");}},
popupGC:function(){
this.onUIEventPopupUnbind();
this.noneMatchRenderAllResults="";
if(this.popup){
this.popup=null;}
this.selectedFields=this.getSelectedFieldList();
this.filterKeyword=null;
this.filterPercent=null;
this.sortKey=null;
this.sortDir=null;
this.fieldSummaryLayerGC();},
refreshInlineHeaderCount:function(){
var context=this.getContext();
var search=context.get("search");
var fieldCount=(search.job.getStatusBuckets()==0)?0:search.job.getEventFieldCount();
this.inlineHeaderCountElement.text(sprintf(ungettext('%d field','%d fields',fieldCount),fieldCount));
this.inlineHeaderElement.show();},
renderAllResults:function(){
this.inFlightXHRGC();
if(!this.popup){
return;}
var params=this.getResultParams();
var url=this.getResultURL(params);
this.inFlightXHR=$.ajax({
type:"GET",
url:url,
dataType:"html",
beforeSend:function(XMLHttpRequest){
try{
XMLHttpRequest.setRequestHeader("If-None-Match",this.noneMatchRenderAllResults);}catch(e){}}.bind(this),
error:function(){
this.logger.error(sprintf(_("Could not load %(url)s"),{url:url}));
this.inFlightXHR=null;}.bind(this),
complete:function(data,textStatus){
this.inFlightXHR=null;
this.noneMatchRenderAllResults=data.getResponseHeader("Etag");
if(data.status==200){
if(this.popup){
var popupContainer=this.popup.getPopup();
$("."+this.POPUP_CONTENT_CLASS_NAME,popupContainer).html(data.responseText);
this.onUIEventPopupBindSortableSelectedFields();}}}.bind(this)});},
renderAvailableFieldsResults:function(){
this.inFlightXHRGC();
if(!this.popup){
return;}
var params=this.getResultParams();
var popupContainer=this.popup.getPopup();
params.has_layout=0;
var url=this.getResultURL(params);
this.inFlightXHR=$.ajax({
type:"GET",
url:url,
dataType:"html",
error:function(){
this.logger.error(sprintf(_("Could not load %(url)s"),{url:url}));
this.inFlightXHR=null;}.bind(this),
complete:function(data,textStatus){
this.inFlightXHR=null;
if(this.popup){
var popupContainer=this.popup.getPopup();
$(this.POPUP_AVAILABLE_FIELDS_SELECTOR,popupContainer).html(data.responseText);}}.bind(this)});},
resetUI:function(){
this.inlineHeaderElement.hide();},
setSelectedFieldList:function($super,list,writeSessionOnly){
$super(list,writeSessionOnly);
fieldListStr=Splunk.util.fieldListToString(this._selectedFields);
this.setParam("fields",fieldListStr,writeSessionOnly);},
addFirefox2Fix:function(){
if($.browser.mozilla&&$.browser.version.substr(0,3)<"1.9"){
if($(this.container).parents(this.SIDEBAR_SELECTOR).length!=0&&$(this.SIDEBAR_SELECTOR).css('overflow')=='hidden'){
$(this.SIDEBAR_SELECTOR).css('overflow','visible');
this.firefox2FixFlag=true;}}},
removeFirefox2Fix:function(){
if(this.firefox2FixFlag){
$(this.SIDEBAR_SELECTOR).css('overflow','hidden');
this.firefox2FixFlag=false;}}});;}catch(e){var err="The module 'Splunk.Module.FieldPicker' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.FieldPicker",err);});}try{i18n_register({"catalog":{"+-%(totalFieldCount)s Field":"%(totalFieldCount)s Field","+-Select/show in results":"Select/show in results","+-Other interesting fields (%s)":"Other interesting fields (%s)"},"plural":function(n){return n==1?0:1;}});
Splunk.Module.SuggestedFieldViewer=$.klass(Splunk.Module.MultiFieldViewer,{
initialize:function($super,container){
$super(container);
this.childEnforcement=Splunk.Module.NEVER_ALLOW;
this.logger=Splunk.Logger.getLogger("SuggestedFieldViewer.js");
this._fieldHeaderText=_("%s interesting fields");
this.exclusionRegexes=[];
for(var i=0,len=this._params["exclude"].length;i<len;i++){
var regEx=new RegExp(this._params["exclude"][i]);
this.exclusionRegexes.push(regEx);}},
getResultParams:function($super){
var params=$super();
params["min_freq"]=this._params["minFrequency"];
if(params.hasOwnProperty("field_list")){
delete params["field_list"];}
return params;},
getMatchingFields:function(fieldNodes){
var context=this.getContext();
var selectedFields=context.get("results.fields");
var moduleInstance=this;
var matchingFields=[];
var minDistinctCount=this._params["minDistinctCount"];
$.each(fieldNodes,function(index){
var fieldElt=$(this);
var fieldName=fieldElt.attr("k");
if(selectedFields&&selectedFields.indexOf(fieldName)!=-1)return true;
for(var i=0,len=moduleInstance.exclusionRegexes.length;i<len;i++){
if(fieldName.match(moduleInstance.exclusionRegexes[i]))return true;}
var distinctCount=fieldElt.attr("dc");
if(distinctCount>=minDistinctCount){
matchingFields.push(fieldElt);}});
if(matchingFields.length>this._params["maxFields"]){
matchingFields=matchingFields.splice(0,this._params["maxFields"]);}
return matchingFields;},
getCustomLinks:function($super,fieldName,count,distinctCount,isExact,isNumeric){
var customLinks=$super(fieldName,count,distinctCount,isExact,isNumeric);
customLinks.push($('<a href="#"></a>').text(_("Select and show in results")).click(this.addToSelected.bind(this)));
return customLinks;},
addToSelected:function(){
var context=this.getContext();
var fieldList=context.get("results.fields");
if($.inArray(this.fieldSummaryLayer.fieldName,fieldList)>-1){
return false;}
fieldList.push(this.fieldSummaryLayer.fieldName);
var intention={"name":"setfields","arg":fieldList};
var fieldsContext=new Splunk.Context();
var fieldsSearch=new Splunk.Search();
fieldsSearch.addIntention(intention);
fieldsContext.set("search",fieldsSearch);
this.passContextToParent(fieldsContext);
return false;},
updateHeader:function($super,fieldCount,isNumeric){
$super(fieldCount,isNumeric);
if(fieldCount==0)this.container.hide();
else this.container.show();},
renderResults:function($super,xmlDoc){
$super(xmlDoc);
$(".allFieldsLink",this.container).remove();
var fieldPicker=$(".FieldPicker");
var search=this.getContext().get("search");
var fieldPickerCount=search.job.getEventFieldCount();
if(fieldPicker&&fieldPickerCount){
var allFieldsLink=$("<a>").addClass("allFieldsLink").attr("href","#").click(function(evt){
$("a.fpActivate",fieldPicker).click();
return false;}).text(sprintf(ungettext("Only %(totalFieldCount)s field available","View all %(totalFieldCount)s fields",fieldPickerCount),{totalFieldCount:fieldPickerCount}));
this.container.append(allFieldsLink);}},
resetUI:function($super){
$super();
$(".allFieldsLink",this.container).remove();}});;}catch(e){var err="The module 'Splunk.Module.SuggestedFieldViewer' in the 'search' app has thrown an unexpected error and may not function properly. Contact the app author or disable the app to remove this message. ";if(window.console){window.console.log(err);}$(function(){Splunk.Messenger.System.getInstance().send("error","Splunk.Module.SuggestedFieldViewer",err);});}