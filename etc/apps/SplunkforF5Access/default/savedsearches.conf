### APM Summaries and Reports ###

[F5 - APM -  ActiveSync by User  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0 
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" User="*" | chart count by User | sort - count


[F5 - APM -  ActiveSync by Device  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" DeviceType="*" | chart count by DeviceType | sort - count


[F5 - APM   -  Geolocation by state  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" "New session" | rex field=_raw "\(ST=(?<geo_state>.*)/CC=(?<geo_country>.*)/C=(?<geo_region>.*)\) at VIP (?<vip>\\d+\.\\d+\.\\d+\.\\d+)" | where len(geo_state) > 0 | chart count over geo_state by geo_country


[F5 - APM   -  Geolocation by country  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" "New session" | rex field=_raw "\(ST=(?<geo_state>.*)/CC=(?<geo_country>.*)/C=(?<geo_region>.*)\) at VIP (?<vip>\\d+\.\\d+\.\\d+\.\\d+)" | where len(geo_country) > 0 | chart count over geo_country by geo_region


[F5 - APM   -  Geolocation by region  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" "New session" | rex field=_raw "\(ST=(?<geo_state>.*)/CC=(?<geo_country>.*)/C=(?<geo_region>.*)\) at VIP (?<vip>\\d+\.\\d+\.\\d+\.\\d+)" | where len(geo_region) > 0 | chart count by geo_region | sort - count


[F5 - APM -  Allow ACL  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" "allow ACL" | rex field=_raw "packet: (?<url>.\\S+) (?<net_protocol>.\\w+) (?<clntip>.\\d+\.\\d+\.\\d+\.\\d+:\\d+) -> (?<svrip>.\\d+\.\\d+\.\\d+\.\\d+:\\d+)" | chart count by url | sort - count


[F5 - APM  -  Session Variables  - Summary]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" session.* | rex "(?<sess_var>session\..\\S+) is (?<sess_var_val>.*\\Z)" | top limit=100 sess_var
#vsid = fx3rsu63


[F5 - APM  -  Session Variables  - By Session Id]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" session.* | rex "(?<sess_var>session\..\\S+) is (?<sess_var_val>.*\\Z)" | chart count by session_id | sort - count


[F5 - APM  -  Session Duration  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" ((New session) OR (Session deleted)) | transaction session_id startswith="New session" endswith="Session deleted" | concurrency duration=duration | sort - duration | eval str_duration=tostring(duration, "duration") | join session_id [search sourcetype="apm_log" Username | rex field=_raw "Username '(?<username>.\\S+)'" | where len(username) > 0] | table username, str_duration


[F5 - APM  -  Active Session  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" ((New session) OR (Session deleted)) | transaction session_id startswith="New session" endswith="Session deleted" keepevicted=t | search eventcount="1" NOT deleted


[F5 - APM  -  Max Concurrent Sessions  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" ((New session) OR (Session deleted)) | transaction session_id startswith="New session" endswith="Session deleted" keepevicted=t| concurrency duration=duration | eval duration=tostring(duration, "duration") | fields session_id, duration, concurrency | chart max(concurrency) over _time


[F5 - APM  -  Session Throughput  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" statistics NOT "0," | rex field=_raw "bytes in: (?<bytes_in>\\d+), bytes out: (?<bytes_out>\\d+)" | table _time, bytes_in, bytes_out


[F5 - APM -  Access Type  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" "Access policy result:" | rex field=_raw "Access policy result: (?<access_type>.*$)" | chart count by access_type


[F5 - APM -  Top Users by login  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" Username | rex field=_raw "Username '(?<login_name>.\\S+)'" | where len(login_name) > 0 | stats count by login_name | sort - count


[F5 - APM -  Top Users by Throughput  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" Username | rex field=_raw "Username '(?<username>.\\S+)'" | where len(username) > 0 | join session_id [search sourcetype="apm_log" statistics NOT "0," | rex field=_raw "bytes in: (?<bytes_in>\\d+), bytes out: (?<bytes_out>\\d+)" | eval throughput=bytes_in+bytes_out ] | chart max(throughput) over username | sort - max(throughput)


[F5 - APM -  Auth Success vs. Failed  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search =  sourcetype="apm_log" "Access policy result:" | rex field=_raw "Access policy result: (?<access_type>.*$)" | chart count(eval(access_type="Logon_Deny")) AS "Auth Failed", count(eval(NOT access_type="Logon_Deny")) AS "Auth Success" by host



[F5 - APM -  Access by User Agent  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview= flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="apm_log" session.user.agent | rex field=_raw "session.user.agent is (?<user_agent>.*$)" | stats count by user_agent | sort - count



[F5 - APM -  Client Type over Platform - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search =  sourcetype="apm_log" session.client.browscap_info | chart count over ctype by cplatform 



### Firepass Summaries and Reports ###

[F5 - FirePass - Connections Over Time - Report]
action.email.sendresults = 0
cron_schedule = */10 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0 
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" eventtype="*" | timechart count by eventtype


[F5 - Firepass  -  Connections by User  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0 
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" eventtype="connection_success" | where NOT user="_fpuser" | top user | head 20


[F5 - Firepass  - Failed Connections by User  - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0 
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" eventtype="connection_failed" | where NOT user="_fpuser" | top user | head 20


[F5 - Firepass - Session Duration - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" logged (on OR out) | transaction sid startswith="logged on" endswith="logged out" | concurrency duration=duration | sort - duration | eval str_duration=tostring(duration, "duration") | join sid [search sourcetype="firepass_log" | where len(user) > 0 AND NOT user="_fpuser"] | table user, str_duration


[F5 - Firepass - Active Session - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search =  sourcetype="firepass_log" logged (on OR out) | transaction sid startswith="logged on" endswith="logged out" keepevicted=t | search eventcount="1" NOT out | where NOT user="_fpuser" | stats count by user | sort - count


[F5 - Firepass - Max Concurrent Sessions - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" logged (on OR out) | transaction sid startswith="logged on" endswith="logged out" keepevicted=t | concurrency duration=duration | eval duration=tostring(duration, "duration") | fields sid, duration, concurrency | chart max(concurrency) over _time


[F5 - Firepass - Top Users by Access - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" | where len(user) > 0 AND NOT user="_fpuser" | stats count by user | sort - count


[F5 - Firepass - Connection Success vs Failed - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" eventtype="*" | chart count(eval(eventtype="connection_success")) AS "Connection Success", count(eval(eventtype="connection_failed")) AS "Connection Failed" by host


[F5 - Firepass - Possible Intrusion by IP - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -7d
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" eventtype="possible_intrusion" | stats count by src_ip | sort - count


[F5 - Firepass - Logon Denied - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -3d
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search = sourcetype="firepass_log" logon denied | stats count by src_ip | sort - count


[F5 - Firepass - GarbageCollection by Reason - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search= sourcetype=firepass_log access_type=GarbageCollection | stats count by reason | sort - count


[F5 - Firepass - Network Access by IP - Report]
action.email.sendresults = 0
cron_schedule = */59 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = +0s
displayview = flashtimeline
enableSched = 0
request.ui_dispatch_view = flashtimeline
search= sourcetype=firepass_log access_type=NetworkAccess open | stats count by remote_ip, user | sort - count


#######################################################################
#################### INPUTS DASHBOARD SAVED SEACHES ###################
#######################################################################


[Inputs - Recent Changed Files]
search = index=_internal ("/" OR "\\") group=per_source_thruput earliest=-24h source=*metrics.log NOT splunk | dedup series | fields series | rename series as Filename  
dispatch.earliest_time = -24h

[Inputs - Recent Ignored Files]
search = index=_internal source=*splunkd.log earliest=-24h Component="fileclassifiermanager" Message="invalid file*" | fields Message 
dispatch.earliest_time = -24h

[Inputs - Crawl]
search = | crawl | fields source, sourcetype, size


#######################################################################
#################### ADMIN DASHBOARD SAVED SEACHES ####################
#######################################################################

[Admin - System Info]
search = index=_internal source=*splunkd.log Component="loader" Message="system info*"| head 1 | fields Message | fields - _*

[Admin - Splunkd Errors This Hour]
search = index=_internal source="*splunkd.log" earliest=-1h Log_Level="error" | stats count | rangemap field=count low=0-0 elevated=1-9 default=severe
dispatch.earliest_time = -1h

[Admin - Splunkd Avg Access Delay This Hour]
search = index=_internal source="*splunkd_access.log" earliest=-1h | rex "(?<delay>\d+)ms$" | stats avg(delay) as d | eval d = round(d, 3) | rangemap field=d low=0-250 elevated=250-499 default=severe
dispatch.earliest_time = -1h

[Admin - Splunkd Avg Uptime]
search = source="*splunkd.log" index=_internal "splunkd starting" OR "shutting down splunkd" | transaction startswith="splunkd starting" endswith="shutting down splunkd" | stats avg(duration) as avgdur | eval avgdur = round(avgdur/3600,3) | rangemap field=avgdur low=24-99999999 elevated=1-23.999 default=severe 

[Admin - Splunkd Recent Errors]
search = index=_internal source=*splunkd.log (Log_Level="fatal" OR Log_Level="error")| dedup punct| head 100 | fields Message
dispatch.earliest_time = -24h

[Admin - Recent Timestamping Issues]
search = index=_internal source=*splunkd.log Component="dateparserverbose" | dedup Message | fields Message 
dispatch.earliest_time = -24h

[Admin - Splunkweb 404s This Hour]
search = index=_internal 404 source="*web_access.log" earliest=-1h | stats count | rangemap field=count low=0-0 elevated=1-100 default=severe
dispatch.earliest_time = -1h

[Admin - Splunkweb Recent Unhandled Exceptions]
search = index=_internal source=*web_service.log Message="*Traceback*" | dedup Component,Line|rename Message as _raw
dispatch.earliest_time = -24h

[Admin - Splunkweb Recent Errors]
search = index=_internal source=*web_service.log Log_Level=error NOT traceback NOT "request headers"| dedup Message | fields Message
dispatch.earliest_time = -24h

[Admin - Splunkweb Browser Usage]
search = index=_internal source=*web_service.log  userAgent=* | timechart count(userAgent) by userAgent
dispatch.earliest_time = -24h



