import httplib2, urllib, urllib2, json, string

import cherrypy
import logging
import splunk

logger = logging.getLogger('splunk.appserver.lib.storm')


def get_storm_defaults(force_new_session=False):
    host = cherrypy.config.get('storm_host')
    port = cherrypy.config.get('storm_port', 443)
    scheme = cherrypy.config.get('storm_scheme', 'https')

    if not (host and scheme):
        return

    storm_token = cherrypy.session.get('storm_token')
    if not storm_token:
        logger.warn("No storm_token set in the user's session; returning None from get_storm_defaults")
        return

    data = {"token":storm_token}
    if force_new_session:
        data['newSession'] = '1'

    if port != 80 and port != 443:
    	url = "%s://%s:%s/mgmtapi/getRoute/" % (scheme, host, port)
    else:
    	url = "%s://%s/mgmtapi/getRoute/" % (scheme, host)

    req = urllib2.Request(url=url, data=urllib.urlencode(data))
    try:
        logger.info("Begin query storm getRoute API at %s" % url)
        response = urllib2.urlopen(req)
    except urllib2.URLError, e:
        logger.error("Failed to query storm getRoute API at %s - %s" % (url, e))
        return None
    data = json.loads(response.read())
    if data and data.has_key('searchers'):
        shead = data['searchers'][0]
        return {
            'host': shead['mach'],
            'port': 8089,
            'protocol': 'https',
            'namespace': 'search',
            'user': shead['slot'], 
            'sessionKey': shead['session']
        }


def hook_storm_session():
    splunk.getDefault = storm_get_default

def storm_get_default(key):
    defaults = get_storm_defaults()
    if defaults:
        return defaults.get(key)
    return None

def decrypt_token(token):
    """Decrypt using stupid simple (and no doubt insecure) xor based algorithm"""
    charset = string.ascii_letters + string.digits + '-;'
    mapping = dict([ (ch, i) for i, ch in enumerate(charset)])
    key = cherrypy.config.get('storm_shared_key')
    data = ''.join( [ charset[ mapping[token[i]] ^ mapping[key[i]] ] for i in xrange(len(token))] )
    try:
        salt, token, timestamp = data.split(';')
    except ValueError:
        logger.warn('Failed to decrypt supplied storm session token')
        return 0, ''
    return int(timestamp), token
